<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[快速搭建基于dubbo的微服务]]></title>
      <url>/2020/01/14/java-dubbo-start/</url>
      <content type="html"><![CDATA[<p>一直以来对微服务的使用大多是基于应用层面，较少全局搭建实践，有时候全面了解可能会带来意想不到的收获。<br><a id="more"></a></p>
<p>阅读完dubbo文档之后，一个完整的dubbo微服务应当包括：一个注册中心，一个监控中心，一个提供服务方和一个消费端</p>
<h2 id="1-注册中心和监控搭建"><a href="#1-注册中心和监控搭建" class="headerlink" title="1. 注册中心和监控搭建"></a>1. 注册中心和监控搭建</h2><p>新建一个docker-componse文件</p>
<p>docker-componse -f app.yml up -d</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3&apos;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  zookeeper:</span><br><span class="line">    image: zookeeper</span><br><span class="line">    ports:</span><br><span class="line">      - 2181:2181</span><br><span class="line">  admin:</span><br><span class="line">    image: apache/dubbo-admin</span><br><span class="line">    depends_on:</span><br><span class="line">      - zookeeper</span><br><span class="line">    ports:</span><br><span class="line">      - 8080</span><br><span class="line">    environment:</span><br><span class="line">      - admin.registry.address=zookeeper://zookeeper:2181</span><br><span class="line">      - admin.config-center=zookeeper://zookeeper:2181</span><br><span class="line">      - admin.metadata-report.address=zookeeper://zookeeper:2181</span><br></pre></td></tr></table></figure>
<h2 id="2-创建一个服务提供方"><a href="#2-创建一个服务提供方" class="headerlink" title="2.创建一个服务提供方"></a>2.创建一个服务提供方</h2><p>拉取dubbo-registry-zookeeper-samples，启动</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(version = <span class="string">"$&#123;demo.service.version&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultDemoService</span> <span class="keyword">implements</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The default value of $&#123;dubbo.application.name&#125; is $&#123;spring.application.name&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;dubbo.application.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serviceName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"[%s] : Hello, %s"</span>, serviceName, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboRegistryZooKeeperProviderBootstrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(DubboRegistryZooKeeperProviderBootstrap.class)</span><br><span class="line">                .listeners((ApplicationListener&lt;ApplicationEnvironmentPreparedEvent&gt;) event -&gt; &#123;</span><br><span class="line">                    Environment environment = event.getEnvironment();</span><br><span class="line">                    <span class="keyword">int</span> port = environment.getProperty(<span class="string">"embedded.zookeeper.port"</span>, <span class="keyword">int</span>.class);</span><br><span class="line">                    <span class="keyword">new</span> EmbeddedZooKeeper(port, <span class="keyword">false</span>).start();</span><br><span class="line">                &#125;)</span><br><span class="line">                .run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-创建一个消费方"><a href="#3-创建一个消费方" class="headerlink" title="3.创建一个消费方"></a>3.创建一个消费方</h2><p>启动<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(version = <span class="string">"$&#123;demo.service.version&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultDemoService</span> <span class="keyword">implements</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The default value of $&#123;dubbo.application.name&#125; is $&#123;spring.application.name&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;dubbo.application.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serviceName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"[%s] : Hello, %s"</span>, serviceName, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="4-到监控dubbo-admin中即可以看到是否注册和调用成功"><a href="#4-到监控dubbo-admin中即可以看到是否注册和调用成功" class="headerlink" title="4. 到监控dubbo-admin中即可以看到是否注册和调用成功"></a>4. 到监控dubbo-admin中即可以看到是否注册和调用成功</h2><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ol>
<li><a href="https://github.com/apache/dubbo-admin" target="_blank" rel="noopener">dubbo-admin</a></li>
<li><a href="https://github.com/apache/dubbo-spring-boot-project/tree/master/dubbo-spring-boot-samples/dubbo-registry-zookeeper-samples" target="_blank" rel="noopener">dubbo-registry-zookeeper-samples</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
            <category> duboo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java,dubbo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java工程师该如何编写高效代码？]]></title>
      <url>/2020/01/14/java-efficient-code/</url>
      <content type="html"><![CDATA[<p>世界上只有两种物质：高效率和低效率；世界上只有两种人：高效率的人和低效率的人。——萧伯纳</p>
<p>同理，世界上只有两种代码：高效代码和低效代码；世界上只有两种人：编写高效代码的人和编写低效代码的人。如何编写高效代码，是每个研发团队都面临的一个重大问题。</p>
<p>本文作者根据实际经验，查阅了大量资料，总结了”Java高效代码50例”，让每一个Java程序员都能编写出”高效代码”。<br><a id="more"></a></p>
<h2 id="1-常量-amp-变量"><a href="#1-常量-amp-变量" class="headerlink" title="1. 常量 &amp; 变量"></a>1. 常量 &amp; 变量</h2><h3 id="1-1-直接赋值常量值，禁止声明新对象"><a href="#1-1-直接赋值常量值，禁止声明新对象" class="headerlink" title="1.1. 直接赋值常量值，禁止声明新对象"></a>1.1. 直接赋值常量值，禁止声明新对象</h3><p>直接赋值常量值，只是创建了一个对象引用，而这个对象引用指向常量值。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Long i = <span class="keyword">new</span> Long(<span class="number">1L</span>);</span><br><span class="line">String s = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Long i = <span class="number">1L</span>;</span><br><span class="line">String s = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure>
<h3 id="1-2-当成员变量值无需改变时，尽量定义为静态常量"><a href="#1-2-当成员变量值无需改变时，尽量定义为静态常量" class="headerlink" title="1.2. 当成员变量值无需改变时，尽量定义为静态常量"></a>1.2. 当成员变量值无需改变时，尽量定义为静态常量</h3><p>在类的每个对象实例中，每个成员变量都有一份副本，而成员静态常量只有一份实例。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpConnection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timeout = <span class="number">5L</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpConnection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> TIMEOUT = <span class="number">5L</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-3-尽量使用基本数据类型，避免自动装箱和拆箱"><a href="#1-3-尽量使用基本数据类型，避免自动装箱和拆箱" class="headerlink" title="1.3. 尽量使用基本数据类型，避免自动装箱和拆箱"></a>1.3. 尽量使用基本数据类型，避免自动装箱和拆箱</h3><p>Java 中的基本数据类型 double、float、long、int、short、char、boolean，分别对应包装类 Double、Float、Long、Integer、Short、Character、Boolean。JVM 支持基本类型与对应包装类的自动转换，被称为自动装箱和拆箱。装箱和拆箱都是需要 CPU 和内存资源的，所以应尽量避免使用自动装箱和拆箱。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Integer sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>[] values = ...;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> value : values) &#123;</span><br><span class="line">    sum += value; <span class="comment">// 相当于 result = Integer.valueOf(result.intValue() + value);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>[] values = ...;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> value : values) &#123;</span><br><span class="line">    sum += value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-4-如果变量的初值会被覆盖，就没有必要给变量赋初值"><a href="#1-4-如果变量的初值会被覆盖，就没有必要给变量赋初值" class="headerlink" title="1.4. 如果变量的初值会被覆盖，就没有必要给变量赋初值"></a>1.4. 如果变量的初值会被覆盖，就没有必要给变量赋初值</h3><p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (isAll) &#123;</span><br><span class="line">    userList = userDAO.queryAll();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    userList = userDAO.queryActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList;</span><br><span class="line"><span class="keyword">if</span> (isAll) &#123;</span><br><span class="line">    userList = userDAO.queryAll();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    userList = userDAO.queryActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-5-尽量使用函数内的基本类型临时变量"><a href="#1-5-尽量使用函数内的基本类型临时变量" class="headerlink" title="1.5. 尽量使用函数内的基本类型临时变量"></a>1.5. 尽量使用函数内的基本类型临时变量</h3><p>在函数内，基本类型的参数和临时变量都保存在栈（Stack）中，访问速度较快；对象类型的参数和临时变量的引用都保存在栈（Stack）中，内容都保存在堆（Heap）中，访问速度较慢。在类中，任何类型的成员变量都保存在堆（Heap）中，访问速度较慢。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Accumulator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> result = <span class="number">0.0</span>D;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAll</span><span class="params">(@NonNull <span class="keyword">double</span>[] values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">double</span> value : values) &#123;</span><br><span class="line">            result += value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Accumulator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> result = <span class="number">0.0</span>D;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAll</span><span class="params">(@NonNull <span class="keyword">double</span>[] values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0.0</span>D;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">double</span> value : values) &#123;</span><br><span class="line">            sum += value;</span><br><span class="line">        &#125;</span><br><span class="line">        result += sum;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-6-尽量不要在循环体外定义变量"><a href="#1-6-尽量不要在循环体外定义变量" class="headerlink" title="1.6. 尽量不要在循环体外定义变量"></a>1.6. 尽量不要在循环体外定义变量</h3><p>在老版 JDK 中，建议“尽量不要在循环体内定义变量”，但是在新版的 JDK 中已经做了优化。通过对编译后的字节码分析，变量定义在循环体外和循环体内没有本质的区别，运行效率基本上是一样的。</p>
<p>反而，根据“ 局部变量作用域最小化 ”原则，变量定义在循环体内更科学更便于维护，避免了延长大对象生命周期导致延缓回收问题 。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">UserVO userVO;</span><br><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line">    userVO.setId(userDO.getId());</span><br><span class="line">    ...</span><br><span class="line">    userVOList.add(userVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    UserVO userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line">    userVO.setId(userDO.getId());</span><br><span class="line">    ...</span><br><span class="line">    userVOList.add(userVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-7-不可变的静态常量，尽量使用非线程安全类"><a href="#1-7-不可变的静态常量，尽量使用非线程安全类" class="headerlink" title="1.7. 不可变的静态常量，尽量使用非线程安全类"></a>1.7. 不可变的静态常量，尽量使用非线程安全类</h3><p>不可变的静态常量，虽然需要支持多线程访问，也可以使用非线程安全类。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Class&gt; CLASS_MAP;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    Map&lt;String, Class&gt; classMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    classMap.put(<span class="string">"VARCHAR"</span>, java.lang.String.class);</span><br><span class="line">    ...</span><br><span class="line">    CLASS_MAP = Collections.unmodifiableMap(classMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Class&gt; CLASS_MAP;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    Map&lt;String, Class&gt; classMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    classMap.put(<span class="string">"VARCHAR"</span>, java.lang.String.class);</span><br><span class="line">    ...</span><br><span class="line">    CLASS_MAP = Collections.unmodifiableMap(classMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-8-不可变的成员变量，尽量使用非线程安全类"><a href="#1-8-不可变的成员变量，尽量使用非线程安全类" class="headerlink" title="1.8. 不可变的成员变量，尽量使用非线程安全类"></a>1.8. 不可变的成员变量，尽量使用非线程安全类</h3><p>不可变的成员变量，虽然需要支持多线程访问，也可以使用非线程安全类。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyFactory</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Strategy&gt; strategyList;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Strategy&gt; strategyMap;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(strategyList)) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = (<span class="keyword">int</span>) Math.ceil(strategyList.size() * <span class="number">4.0</span> / <span class="number">3</span>);</span><br><span class="line">            Map&lt;String, Strategy&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(size);</span><br><span class="line">            <span class="keyword">for</span> (Strategy strategy : strategyList) &#123;</span><br><span class="line">                map.put(strategy.getType(), strategy);</span><br><span class="line">            &#125;</span><br><span class="line">            strategyMap = Collections.unmodifiableMap(map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyFactory</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Strategy&gt; strategyList;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Strategy&gt; strategyMap;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(strategyList)) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = (<span class="keyword">int</span>) Math.ceil(strategyList.size() * <span class="number">4.0</span> / <span class="number">3</span>);</span><br><span class="line">            Map&lt;String, Strategy&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(size);</span><br><span class="line">            <span class="keyword">for</span> (Strategy strategy : strategyList) &#123;</span><br><span class="line">                map.put(strategy.getType(), strategy);</span><br><span class="line">            &#125;</span><br><span class="line">            strategyMap = Collections.unmodifiableMap(map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<h2 id="2-对象-amp-类"><a href="#2-对象-amp-类" class="headerlink" title="2. 对象 &amp; 类"></a>2. 对象 &amp; 类</h2><h3 id="2-1-禁止使用-JSON-转化对象"><a href="#2-1-禁止使用-JSON-转化对象" class="headerlink" title="2.1. 禁止使用 JSON 转化对象"></a>2.1. 禁止使用 JSON 转化对象</h3><p>JSON 提供把对象转化为 JSON 字符串、把 JSON 字符串转为对象的功能，于是被某些人用来转化对象。这种对象转化方式，虽然在功能上没有问题，但是在性能上却存在问题。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = JSON.parseArray(JSON.toJSONString(userDOList), UserVO.class);</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    UserVO userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line">    userVO.setId(userDO.getId());</span><br><span class="line">    ...</span><br><span class="line">    userVOList.add(userVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-2-尽量不使用反射赋值对象"><a href="#2-2-尽量不使用反射赋值对象" class="headerlink" title="2.2. 尽量不使用反射赋值对象"></a>2.2. 尽量不使用反射赋值对象</h3><p>用反射赋值对象，主要优点是节省了代码量，主要缺点却是性能有所下降。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    UserVO userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line">    BeanUtils.copyProperties(userDO, userVO);</span><br><span class="line">    userVOList.add(userVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    UserVO userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line">    userVO.setId(userDO.getId());</span><br><span class="line">    ...</span><br><span class="line">    userVOList.add(userVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-采用-Lambda-表达式替换内部匿名类"><a href="#2-3-采用-Lambda-表达式替换内部匿名类" class="headerlink" title="2.3. 采用 Lambda 表达式替换内部匿名类"></a>2.3. 采用 Lambda 表达式替换内部匿名类</h3><p>对于大多数刚接触 JDK8 的同学来说，都会认为 Lambda 表达式就是匿名内部类的语法糖。实际上， Lambda 表达式在大多数虚拟机中采用 invokeDynamic 指令实现，相对于匿名内部类在效率上会更高一些。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList = ...;</span><br><span class="line">Collections.sort(userList, <span class="keyword">new</span> Comparator&lt;User&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(User user1, User user2)</span> </span>&#123;</span><br><span class="line">        Long userId1 = user1.getId();</span><br><span class="line">        Long userId2 = user2.getId();</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> userId1.compareTo(userId2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList = ...;</span><br><span class="line">Collections.sort(userList, (user1, user2) -&gt; &#123;</span><br><span class="line">    Long userId1 = user1.getId();</span><br><span class="line">    Long userId2 = user2.getId();</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> userId1.compareTo(userId2);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="2-4-尽量避免定义不必要的子类"><a href="#2-4-尽量避免定义不必要的子类" class="headerlink" title="2.4. 尽量避免定义不必要的子类"></a>2.4. 尽量避免定义不必要的子类</h3><p>多一个类就需要多一份类加载，所以尽量避免定义不必要的子类。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Class&gt; CLASS_MAP =</span><br><span class="line">    Collections.unmodifiableMap(<span class="keyword">new</span> HashMap&lt;String, Class&gt;(<span class="number">16</span>) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        put(<span class="string">"VARCHAR"</span>, java.lang.String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Class&gt; CLASS_MAP;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    Map&lt;String, Class&gt; classMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    classMap.put(<span class="string">"VARCHAR"</span>, java.lang.String.class);</span><br><span class="line">    ...</span><br><span class="line">    CLASS_MAP = Collections.unmodifiableMap(classMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-5-尽量指定类的-final-修饰符"><a href="#2-5-尽量指定类的-final-修饰符" class="headerlink" title="2.5. 尽量指定类的 final 修饰符"></a>2.5. 尽量指定类的 final 修饰符</h3><p>为类指定 final 修饰符，可以让该类不可以被继承。如果指定了一个类为 final，则该类所有的方法都是 final 的，Java 编译器会寻找机会内联所有的 final 方法。内联对于提升 Java 运行效率作用重大，具体可参见 Java 运行期优化，能够使性能平均提高 50%。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateHelper</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DateHelper</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：使用 Spring 的 AOP 特性时，需要对 Bean 进行动态代理，如果 Bean 类添加了 final 修饰，会导致异常。</p>
<h2 id="3-方法"><a href="#3-方法" class="headerlink" title="3. 方法"></a>3. 方法</h2><h3 id="3-1-把跟类成员变量无关的方法声明成静态方法"><a href="#3-1-把跟类成员变量无关的方法声明成静态方法" class="headerlink" title="3.1. 把跟类成员变量无关的方法声明成静态方法"></a>3.1. 把跟类成员变量无关的方法声明成静态方法</h3><p>静态方法的好处就是不用生成类的实例就可以直接调用。静态方法不再属于某个对象，而是属于它所在的类。只需要通过其类名就可以访问，不需要再消耗资源去反复创建对象。即便在类内部的私有方法，如果没有使用到类成员变量，也应该声明为静态方法。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">  Calendar calendar = Calendar.getInstance();</span><br><span class="line">  calendar.setTime(date);</span><br><span class="line">  <span class="keyword">return</span> calendar.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">  Calendar calendar = Calendar.getInstance();</span><br><span class="line">  calendar.setTime(date);</span><br><span class="line">  <span class="keyword">return</span> calendar.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-尽量使用基本数据类型作为方法参数类型，避免不必要的装箱、拆箱和空指针判断"><a href="#3-2-尽量使用基本数据类型作为方法参数类型，避免不必要的装箱、拆箱和空指针判断" class="headerlink" title="3.2. 尽量使用基本数据类型作为方法参数类型，避免不必要的装箱、拆箱和空指针判断"></a>3.2. 尽量使用基本数据类型作为方法参数类型，避免不必要的装箱、拆箱和空指针判断</h3><p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(Double value1, Double value2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> double1 = Objects.isNull(value1) ? <span class="number">0.0</span>D : value1;</span><br><span class="line">    <span class="keyword">double</span> double2 = Objects.isNull(value2) ? <span class="number">0.0</span>D : value2;</span><br><span class="line">    <span class="keyword">return</span> double1 + double2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> result = sum(<span class="number">1.0</span>D, <span class="number">2.0</span>D);</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> value1, <span class="keyword">double</span> value2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value1 + value2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> result = sum(<span class="number">1.0</span>D, <span class="number">2.0</span>D);</span><br></pre></td></tr></table></figure>
<h3 id="3-3-尽量使用基本数据类型作为方法返回值类型，避免不必要的装箱、拆箱和空指针判断"><a href="#3-3-尽量使用基本数据类型作为方法返回值类型，避免不必要的装箱、拆箱和空指针判断" class="headerlink" title="3.3. 尽量使用基本数据类型作为方法返回值类型，避免不必要的装箱、拆箱和空指针判断"></a>3.3. 尽量使用基本数据类型作为方法返回值类型，避免不必要的装箱、拆箱和空指针判断</h3><p>在 JDK 类库的方法中，很多方法返回值都采用了基本数据类型，首先是为了避免不必要的装箱和拆箱，其次是为了避免返回值的空指针判断。比如：Collection.isEmpty() 和 Map.size()。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">isValid</span><span class="params">(UserDO user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 调用代码</span></span><br><span class="line">UserDO user = ...;</span><br><span class="line">Boolean isValid = isValid(user);</span><br><span class="line"><span class="keyword">if</span> (Objects.nonNull(isValid) &amp;&amp; isValid.booleanValue()) &#123; </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(UserDO user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 调用代码</span></span><br><span class="line">UserDO user = ...;</span><br><span class="line"><span class="keyword">if</span> (isValid(user)) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-协议方法参数值非空，避免不必要的空指针判断"><a href="#3-4-协议方法参数值非空，避免不必要的空指针判断" class="headerlink" title="3.4. 协议方法参数值非空，避免不必要的空指针判断"></a>3.4. 协议方法参数值非空，避免不必要的空指针判断</h3><p>协议编程，可以 @NonNull 和 @Nullable 标注参数，是否遵循全凭调用者自觉。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(UserDO user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(@NonNull UserDO user)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-5-协议方法返回值非空，避免不必要的空指针判断"><a href="#3-5-协议方法返回值非空，避免不必要的空指针判断" class="headerlink" title="3.5. 协议方法返回值非空，避免不必要的空指针判断"></a>3.5. 协议方法返回值非空，避免不必要的空指针判断</h3><p>协议编程，可以 @NonNull 和 @Nullable 标注参数，是否遵循全凭实现者自觉。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;OrderVO&gt; <span class="title">queryUserOrder</span><span class="params">(Long userId)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 调用代码</span></span><br><span class="line">List&lt;OrderVO&gt; orderList = orderService.queryUserOrder(userId);</span><br><span class="line"><span class="keyword">if</span> (CollectionUtils.isNotEmpty(orderList)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (OrderVO order : orderList) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;OrderVO&gt; <span class="title">queryUserOrder</span><span class="params">(Long userId)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 调用代码</span></span><br><span class="line">List&lt;OrderVO&gt; orderList = orderService.queryUserOrder(userId);</span><br><span class="line"><span class="keyword">for</span> (OrderVO order : orderList) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-6-被调用方法已支持判空处理，调用方法无需再进行判空处理"><a href="#3-6-被调用方法已支持判空处理，调用方法无需再进行判空处理" class="headerlink" title="3.6. 被调用方法已支持判空处理，调用方法无需再进行判空处理"></a>3.6. 被调用方法已支持判空处理，调用方法无需再进行判空处理</h3><p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UserDO user = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(value)) &#123;</span><br><span class="line">    user = JSON.parseObject(value, UserDO.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserDO user = JSON.parseObject(value, UserDO.class);</span><br></pre></td></tr></table></figure>
<h3 id="3-7-尽量避免不必要的函数封装"><a href="#3-7-尽量避免不必要的函数封装" class="headerlink" title="3.7. 尽量避免不必要的函数封装"></a>3.7. 尽量避免不必要的函数封装</h3><p>方法调用会引起入栈和出栈，导致消耗更多的 CPU 和内存，应当尽量避免不必要的函数封装。当然，为了使代码更简洁、更清晰、更易维护，增加一定的方法调用所带来的性能损耗是值得的。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数封装</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isVip</span><span class="params">(Boolean isVip)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Boolean.TRUE.equals(isVip);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用代码</span></span><br><span class="line"><span class="keyword">boolean</span> isVip = isVip(user.getVip());</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> isVip = Boolean.TRUE.equals(user.getVip());</span><br></pre></td></tr></table></figure>
<h3 id="3-8-尽量指定方法的-final-修饰符"><a href="#3-8-尽量指定方法的-final-修饰符" class="headerlink" title="3.8. 尽量指定方法的 final 修饰符"></a>3.8. 尽量指定方法的 final 修饰符</h3><p>方法指定 final 修饰符，可以让方法不可以被重写，Java 编译器会寻找机会内联所有的 final 方法。内联对于提升 Java 运行效率作用重大，具体可参见 Java 运行期优化，能够使性能平均提高 50%。</p>
<p>注意：所有的 private 方法会隐式地被指定 final 修饰符，所以无须再为其指定 final 修饰符。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：使用 Spring 的 AOP 特性时，需要对 Bean 进行动态代理，如果方法添加了 final 修饰，将不会被代理。</p>
<h2 id="4-表达式"><a href="#4-表达式" class="headerlink" title="4. 表达式"></a>4. 表达式</h2><h3 id="4-1-尽量减少方法的重复调用"><a href="#4-1-尽量减少方法的重复调用" class="headerlink" title="4.1. 尽量减少方法的重复调用"></a>4.1. 尽量减少方法的重复调用</h3><p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = ...;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = ...;</span><br><span class="line"><span class="keyword">int</span> userLength = userList.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; userLength; i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-尽量避免不必要的方法调用"><a href="#4-2-尽量避免不必要的方法调用" class="headerlink" title="4.2. 尽量避免不必要的方法调用"></a>4.2. 尽量避免不必要的方法调用</h3><p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = userDAO.queryActive();</span><br><span class="line"><span class="keyword">if</span> (isAll) &#123;</span><br><span class="line">    userList = userDAO.queryAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList;</span><br><span class="line"><span class="keyword">if</span> (isAll) &#123;</span><br><span class="line">    userList = userDAO.queryAll();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    userList = userDAO.queryActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-尽量使用移位来代替正整数乘除"><a href="#4-3-尽量使用移位来代替正整数乘除" class="headerlink" title="4.3. 尽量使用移位来代替正整数乘除"></a>4.3. 尽量使用移位来代替正整数乘除</h3><p>用移位操作可以极大地提高性能。对于乘除 2^n(n 为正整数) 的正整数计算，可以用移位操作来代替。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num1 = a * <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = a / <span class="number">4</span>;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num1 = a &lt;&lt; <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = a &gt;&gt; <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<h3 id="4-4-提取公共表达式，避免重复计算"><a href="#4-4-提取公共表达式，避免重复计算" class="headerlink" title="4.4. 提取公共表达式，避免重复计算"></a>4.4. 提取公共表达式，避免重复计算</h3><p>提取公共表达式，只计算一次值，然后重复利用值。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> dx = x2 - x1;</span><br><span class="line"><span class="keyword">double</span> dy = y2 - y1;</span><br><span class="line"><span class="keyword">double</span> distance = Math.sqrt(dx * dx + dy * dy);</span><br><span class="line">或</span><br><span class="line"><span class="keyword">double</span> distance = Math.sqrt(Math.pow(x2 - x1, <span class="number">2</span>) + Math.pow(y2 - y1, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>
<h3 id="4-5-尽量不在条件表达式中用-取反"><a href="#4-5-尽量不在条件表达式中用-取反" class="headerlink" title="4.5. 尽量不在条件表达式中用! 取反"></a>4.5. 尽量不在条件表达式中用! 取反</h3><p>使用! 取反会多一次计算，如果没有必要则优化掉。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(a &gt;= <span class="number">10</span>)) &#123;</span><br><span class="line">    ... <span class="comment">// 条件处理 1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ... <span class="comment">// 条件处理 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    ... <span class="comment">// 条件处理 1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ... <span class="comment">// 条件处理 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-6-对于多常量选择分支，尽量使用-switch-语句而不是-if-else-语句"><a href="#4-6-对于多常量选择分支，尽量使用-switch-语句而不是-if-else-语句" class="headerlink" title="4.6. 对于多常量选择分支，尽量使用 switch 语句而不是 if-else 语句"></a>4.6. 对于多常量选择分支，尽量使用 switch 语句而不是 if-else 语句</h3><p>if-else 语句，每个 if 条件语句都要加装计算，直到 if 条件语句为 true 为止。switch 语句进行了跳转优化，Java 中采用 tableswitch 或 lookupswitch 指令实现，对于多常量选择分支处理效率更高。经过试验证明：在每个分支出现概率相同的情况下，低于 5 个分支时 if-else 语句效率更高，高于 5 个分支时 switch 语句效率更高。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">    ...; <span class="comment">// 分支 1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">    ...; <span class="comment">// 分支 2</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == ...) &#123;</span><br><span class="line">    ...; <span class="comment">// 分支 n</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...; <span class="comment">// 分支 n+1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (i) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line">        ... <span class="comment">// 分支 1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line">        ... <span class="comment">// 分支 2</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ... :</span><br><span class="line">        ... <span class="comment">// 分支 n</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">        ... <span class="comment">// 分支 n+1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>备注：如果业务复杂，可以采用 Map 实现策略模式。</p>
<h2 id="5-字符串"><a href="#5-字符串" class="headerlink" title="5. 字符串"></a>5. 字符串</h2><h3 id="5-1-尽量不要使用正则表达式匹配"><a href="#5-1-尽量不要使用正则表达式匹配" class="headerlink" title="5.1. 尽量不要使用正则表达式匹配"></a>5.1. 尽量不要使用正则表达式匹配</h3><p>正则表达式匹配效率较低，尽量使用字符串匹配操作。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String source = <span class="string">"a::1,b::2,c::3,d::4"</span>;</span><br><span class="line">String target = source.replaceAll(<span class="string">"::"</span>, <span class="string">"="</span>);</span><br><span class="line">Stringp[] targets = source.spit(<span class="string">"::"</span>);</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String source = <span class="string">"a::1,b::2,c::3,d::4"</span>;</span><br><span class="line">String target = source.replace(<span class="string">"::"</span>, <span class="string">"="</span>);</span><br><span class="line">Stringp[] targets = StringUtils.split(source, <span class="string">"::"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="5-2-尽量使用字符替换字符串"><a href="#5-2-尽量使用字符替换字符串" class="headerlink" title="5.2. 尽量使用字符替换字符串"></a>5.2. 尽量使用字符替换字符串</h3><p>字符串的长度不确定，而字符的长度固定为 1，查找和匹配的效率自然提高了。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String source = <span class="string">"a:1,b:2,c:3,d:4"</span>;</span><br><span class="line"><span class="keyword">int</span> index = source.indexOf(<span class="string">":"</span>);</span><br><span class="line">String target = source.replace(<span class="string">":"</span>, <span class="string">"="</span>);</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String source = <span class="string">"a:1,b:2,c:3,d:4"</span>;</span><br><span class="line"><span class="keyword">int</span> index = source.indexOf(<span class="string">':'</span>);</span><br><span class="line">String target = source.replace(<span class="string">':'</span>, <span class="string">'='</span>);</span><br></pre></td></tr></table></figure>
<h3 id="5-3-尽量使用-StringBuilder-进行字符串拼接"><a href="#5-3-尽量使用-StringBuilder-进行字符串拼接" class="headerlink" title="5.3. 尽量使用 StringBuilder 进行字符串拼接"></a>5.3. 尽量使用 StringBuilder 进行字符串拼接</h3><p>String 是 final 类，内容不可修改，所以每次字符串拼接都会生成一个新对象。StringBuilder 在初始化时申请了一块内存，以后的字符串拼接都在这块内存中执行，不会申请新内存和生成新对象。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">        s += <span class="string">','</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s += i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">        sb.append(<span class="string">','</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sb.append(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-4-不要使用-“”-转化字符串"><a href="#5-4-不要使用-“”-转化字符串" class="headerlink" title="5.4. 不要使用 “”+ 转化字符串"></a>5.4. 不要使用 “”+ 转化字符串</h3><p>使用 “”+ 进行字符串转化，使用方便但是效率低，建议使用 String.valueOf.</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">12345</span>;</span><br><span class="line">String s = <span class="string">""</span> + i;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">12345</span>;</span><br><span class="line">String s = String.valueOf(i);</span><br></pre></td></tr></table></figure>
<h2 id="6-数组"><a href="#6-数组" class="headerlink" title="6. 数组"></a>6. 数组</h2><h3 id="6-1-不要使用循环拷贝数组，尽量使用-System-arraycopy-拷贝数组"><a href="#6-1-不要使用循环拷贝数组，尽量使用-System-arraycopy-拷贝数组" class="headerlink" title="6.1. 不要使用循环拷贝数组，尽量使用 System.arraycopy 拷贝数组"></a>6.1. 不要使用循环拷贝数组，尽量使用 System.arraycopy 拷贝数组</h3><p>推荐使用 System.arraycopy 拷贝数组，也可以使用 Arrays.copyOf 拷贝数组。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] sources = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] targets = <span class="keyword">new</span> <span class="keyword">int</span>[sources.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; targets.length; i++) &#123;</span><br><span class="line">    targets[i] = sources[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] sources = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] targets = <span class="keyword">new</span> <span class="keyword">int</span>[sources.length];</span><br><span class="line">System.arraycopy(sources, <span class="number">0</span>, targets, <span class="number">0</span>, targets.length);</span><br></pre></td></tr></table></figure>
<h3 id="6-2-集合转化为类型-T-数组时，尽量传入空数组-T-0"><a href="#6-2-集合转化为类型-T-数组时，尽量传入空数组-T-0" class="headerlink" title="6.2. 集合转化为类型 T 数组时，尽量传入空数组 T[0]"></a>6.2. 集合转化为类型 T 数组时，尽量传入空数组 T[0]</h3><p>将集合转换为数组有 2 种形式：toArray(new T[n]) 和 toArray(new T[0])。在旧的 Java 版本中，建议使用 toArray(new T[n])，因为创建数组时所需的反射调用非常慢。在 OpenJDK6 后，反射调用是内在的，使得性能得以提高，toArray(new T[0]) 比 toArray(new T[n]) 效率更高。此外，toArray(new T[n]) 比 toArray(new T[0]) 多获取一次列表大小，如果计算列表大小耗时过长，也会导致 toArray(new T[n]) 效率降低。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, ...);</span><br><span class="line">Integer[] integers = integerList.toArray(<span class="keyword">new</span> Integer[integerList.size()]);</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, ...);</span><br><span class="line">Integer[] integers = integerList.toArray(<span class="keyword">new</span> Integer[<span class="number">0</span>]); <span class="comment">// 勿用 new Integer[]&#123;&#125;</span></span><br></pre></td></tr></table></figure>
<p>建议：集合应该提供一个 toArray(Class<t> clazz) 方法，避免无用的空数组初始化（new T[0]）。</t></p>
<h3 id="6-3-集合转化为-Object-数组时，尽量使用-toArray-方法"><a href="#6-3-集合转化为-Object-数组时，尽量使用-toArray-方法" class="headerlink" title="6.3. 集合转化为 Object 数组时，尽量使用 toArray() 方法"></a>6.3. 集合转化为 Object 数组时，尽量使用 toArray() 方法</h3><p>转化 Object 数组时，没有必要使用 toArray[new Object[0]]，可以直接使用 toArray()。避免了类型的判断，也避免了空数组的申请，所以效率会更高。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object&gt; objectList = Arrays.asList(<span class="number">1</span>, <span class="string">"2"</span>, <span class="number">3</span>, <span class="string">"4"</span>, <span class="number">5</span>, ...);</span><br><span class="line">Object[] objects = objectList.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object&gt; objectList = Arrays.asList(<span class="number">1</span>, <span class="string">"2"</span>, <span class="number">3</span>, <span class="string">"4"</span>, <span class="number">5</span>, ...);</span><br><span class="line">Object[] objects = objectList.toArray();</span><br></pre></td></tr></table></figure>
<h2 id="7-集合"><a href="#7-集合" class="headerlink" title="7. 集合"></a>7. 集合</h2><h3 id="7-1-初始化集合时，尽量指定集合大小"><a href="#7-1-初始化集合时，尽量指定集合大小" class="headerlink" title="7.1. 初始化集合时，尽量指定集合大小"></a>7.1. 初始化集合时，尽量指定集合大小</h3><p>Java 集合初始化时都会指定一个默认大小，当默认大小不再满足数据需求时就会扩容，每次扩容的时间复杂度有可能是 O(n)。所以，尽量指定预知的集合大小，就能避免或减少集合的扩容次数。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Long&gt; userSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">Map&lt;Long, UserDO&gt; userMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">List&lt;UserVO&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    userSet.add(userDO.getId());</span><br><span class="line">    userMap.put(userDO.getId(), userDO);</span><br><span class="line">    userList.add(transUser(userDO));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line"><span class="keyword">int</span> userSize = userDOList.size();</span><br><span class="line">Set&lt;Long&gt; userSet = <span class="keyword">new</span> HashSet&lt;&gt;(userSize);</span><br><span class="line">Map&lt;Long, UserDO&gt; userMap = <span class="keyword">new</span> HashMap&lt;&gt;((<span class="keyword">int</span>) Math.ceil(userSize * <span class="number">4.0</span> / <span class="number">3</span>));</span><br><span class="line">List&lt;UserVO&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;(userSize);</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    userSet.add(userDO.getId());</span><br><span class="line">    userMap.put(userDO.getId(), userDO);</span><br><span class="line">    userList.add(transUser(userDO));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-2-不要使用循环拷贝集合，尽量使用-JDK-提供的方法拷贝集合"><a href="#7-2-不要使用循环拷贝集合，尽量使用-JDK-提供的方法拷贝集合" class="headerlink" title="7.2. 不要使用循环拷贝集合，尽量使用 JDK 提供的方法拷贝集合"></a>7.2. 不要使用循环拷贝集合，尽量使用 JDK 提供的方法拷贝集合</h3><p>JDK 提供的方法可以一步指定集合的容量，避免多次扩容浪费时间和空间。同时，这些方法的底层也是调用 System.arraycopy 方法实现，进行数据的批量拷贝效率更高。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; user1List = ...;</span><br><span class="line">List&lt;UserDO&gt; user2List = ...;</span><br><span class="line">List&lt;UserDO&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;(user1List.size() + user2List.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO user1 : user1List) &#123;</span><br><span class="line">    userList.add(user1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (UserDO user2 : user2List) &#123;</span><br><span class="line">    userList.add(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; user1List = ...;</span><br><span class="line">List&lt;UserDO&gt; user2List = ...;</span><br><span class="line">List&lt;UserDO&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;(user1List.size() + user2List.size());</span><br><span class="line">userList.addAll(user1List);</span><br><span class="line">userList.addAll(user2List);</span><br></pre></td></tr></table></figure>
<h3 id="7-3-尽量使用-Arrays-asList-转化数组为列表"><a href="#7-3-尽量使用-Arrays-asList-转化数组为列表" class="headerlink" title="7.3. 尽量使用 Arrays.asList 转化数组为列表"></a>7.3. 尽量使用 Arrays.asList 转化数组为列表</h3><p>原理与 “ 不要使用循环拷贝集合，尽量使用 JDK 提供的方法拷贝集合 “ 类似。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; typeList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">typeList.add(<span class="string">"Short"</span>);</span><br><span class="line">typeList.add(<span class="string">"Integer"</span>);</span><br><span class="line">typeList.add(<span class="string">"Long"</span>);</span><br><span class="line"> </span><br><span class="line">String[] names = ...;</span><br><span class="line">List&lt;String&gt; nameList = ...;</span><br><span class="line"><span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">    nameList.add(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; typeList = Arrays.asList(<span class="string">"Short"</span>, <span class="string">"Integer"</span>, <span class="string">"Long"</span>);</span><br><span class="line"> </span><br><span class="line">String[] names = ...;</span><br><span class="line">List&lt;String&gt; nameList = ...;</span><br><span class="line">nameList.addAll(Arrays.asList(names));</span><br></pre></td></tr></table></figure>
<h3 id="7-4-直接迭代需要使用的集合"><a href="#7-4-直接迭代需要使用的集合" class="headerlink" title="7.4. 直接迭代需要使用的集合"></a>7.4. 直接迭代需要使用的集合</h3><p>直接迭代需要使用的集合，无需通过其它操作获取数据。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Long, UserDO&gt; userMap = ...;</span><br><span class="line"><span class="keyword">for</span> (Long userId : userMap.keySet()) &#123;</span><br><span class="line">    UserDO user = userMap.get(userId);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Long, UserDO&gt; userMap = ...;</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Long, UserDO&gt; userEntry : userMap.entrySet()) &#123;</span><br><span class="line">    Long userId = userEntry.getKey();</span><br><span class="line">    UserDO user = userEntry.getValue();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-5-不要使用-size-方法检测空，必须使用-isEmpty-方法检测空"><a href="#7-5-不要使用-size-方法检测空，必须使用-isEmpty-方法检测空" class="headerlink" title="7.5. 不要使用 size 方法检测空，必须使用 isEmpty 方法检测空"></a>7.5. 不要使用 size 方法检测空，必须使用 isEmpty 方法检测空</h3><p>使用 size 方法来检测空逻辑上没有问题，但使用 isEmpty 方法使得代码更易读，并且可以获得更好的性能。任何 isEmpty 方法实现的时间复杂度都是 O(1)，但是某些 size 方法实现的时间复杂度有可能是 O(n)。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = ...;</span><br><span class="line"><span class="keyword">if</span> (userList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">Map&lt;Long, UserDO&gt; userMap = ...;</span><br><span class="line"><span class="keyword">if</span> (userMap.size() == <span class="number">0</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = ...;</span><br><span class="line"><span class="keyword">if</span> (userList.isEmpty()) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">Map&lt;Long, UserDO&gt; userMap = ...;</span><br><span class="line"><span class="keyword">if</span> (userMap.isEmpty()) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-6-非随机访问的-List，尽量使用迭代代替随机访问"><a href="#7-6-非随机访问的-List，尽量使用迭代代替随机访问" class="headerlink" title="7.6. 非随机访问的 List，尽量使用迭代代替随机访问"></a>7.6. 非随机访问的 List，尽量使用迭代代替随机访问</h3><p>对于列表，可分为随机访问和非随机访问两类，可以用是否实现 RandomAccess 接口判断。随机访问列表，直接通过 get 获取数据不影响效率。而非随机访问列表，通过 get 获取数据效率极低。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LinkedList&lt;UserDO&gt; userDOList = ...;</span><br><span class="line"><span class="keyword">int</span> size = userDOList.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">    UserDO userDO = userDOList.get(i);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LinkedList&lt;UserDO&gt; userDOList = ...;</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实，不管列表支不支持随机访问，都应该使用迭代进行遍历。</p>
<h3 id="7-7-尽量使用-HashSet-判断值存在"><a href="#7-7-尽量使用-HashSet-判断值存在" class="headerlink" title="7.7. 尽量使用 HashSet 判断值存在"></a>7.7. 尽量使用 HashSet 判断值存在</h3><p>在 Java 集合类库中，List 的 contains 方法普遍时间复杂度是 O(n)，而 HashSet 的时间复杂度为 O(1)。如果需要频繁调用 contains 方法查找数据，可以先将 List 转换成 HashSet。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Long&gt; adminIdList = ...;</span><br><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    <span class="keyword">if</span> (adminIdList.contains(userDO.getId())) &#123;</span><br><span class="line">        userVOList.add(transUser(userDO));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Long&gt; adminIdSet = ...;</span><br><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    <span class="keyword">if</span> (adminIdSet.contains(userDO.getId())) &#123;</span><br><span class="line">        userVOList.add(transUser(userDO));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-8-避免先判断存在再进行获取"><a href="#7-8-避免先判断存在再进行获取" class="headerlink" title="7.8. 避免先判断存在再进行获取"></a>7.8. 避免先判断存在再进行获取</h3><p>如果需要先判断存在再进行获取，可以直接获取并判断空，从而避免了二次查找操作。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserVO <span class="title">transUser</span><span class="params">(UserDO user, Map&lt;Long, RoleDO&gt; roleMap)</span> </span>&#123;</span><br><span class="line">    UserVO userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line">    userVO.setId(user.getId());</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (roleMap.contains(user.getRoleId())) &#123;</span><br><span class="line">        RoleDO role = roleMap.get(user.getRoleId());</span><br><span class="line">        userVO.setRole(transRole(role));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserVO <span class="title">transUser</span><span class="params">(UserDO user, Map&lt;Long, RoleDO&gt; roleMap)</span> </span>&#123;</span><br><span class="line">    UserVO userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line">    userVO.setId(user.getId());</span><br><span class="line">    ...</span><br><span class="line">    RoleDO role = roleMap.get(user.getRoleId());</span><br><span class="line">    <span class="keyword">if</span> (Objects.nonNull(role)) &#123;</span><br><span class="line">        userVO.setRole(transRole(role));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="8-异常"><a href="#8-异常" class="headerlink" title="8. 异常"></a>8. 异常</h2><h3 id="8-1-直接捕获对应的异常"><a href="#8-1-直接捕获对应的异常" class="headerlink" title="8.1. 直接捕获对应的异常"></a>8.1. 直接捕获对应的异常</h3><p>直接捕获对应的异常，避免用 instanceof 判断，效率更高代码更简洁。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    saveData();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> IOException) &#123;</span><br><span class="line">        log.error(<span class="string">" 保存数据 IO 异常 "</span>, e);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.error(<span class="string">" 保存数据其它异常 "</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    saveData();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    log.error(<span class="string">" 保存数据 IO 异常 "</span>, e);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    log.error(<span class="string">" 保存数据其它异常 "</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-2-尽量避免在循环中捕获异常"><a href="#8-2-尽量避免在循环中捕获异常" class="headerlink" title="8.2. 尽量避免在循环中捕获异常"></a>8.2. 尽量避免在循环中捕获异常</h3><p>当循环体抛出异常后，无需循环继续执行时，没有必要在循环体中捕获异常。因为，过多的捕获异常会降低程序执行效率。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Double <span class="title">sum</span><span class="params">(List&lt;String&gt; valueList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0.0</span>D;</span><br><span class="line">    <span class="keyword">for</span> (String value : valueList) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sum += Double.parseDouble(value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Double <span class="title">sum</span><span class="params">(List&lt;String&gt; valueList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0.0</span>D;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String value : valueList) &#123;</span><br><span class="line">            sum += Double.parseDouble(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-3-禁止使用异常控制业务流程"><a href="#8-3-禁止使用异常控制业务流程" class="headerlink" title="8.3. 禁止使用异常控制业务流程"></a>8.3. 禁止使用异常控制业务流程</h3><p>相对于条件表达式，异常的处理效率更低。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(UserDO user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line">    &#125; <span class="keyword">catch</span>(NullPointerException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(UserDO user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="9-缓冲区"><a href="#9-缓冲区" class="headerlink" title="9. 缓冲区"></a>9. 缓冲区</h2><h3 id="9-1-初始化时尽量指定缓冲区大小"><a href="#9-1-初始化时尽量指定缓冲区大小" class="headerlink" title="9.1. 初始化时尽量指定缓冲区大小"></a>9.1. 初始化时尽量指定缓冲区大小</h3><p>初始化时，指定缓冲区的预期容量大小，避免多次扩容浪费时间和空间。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer(<span class="number">1024</span>);</span><br><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="number">1024</span>);</span><br></pre></td></tr></table></figure>
<h3 id="9-2-尽量重复使用同一缓冲区"><a href="#9-2-尽量重复使用同一缓冲区" class="headerlink" title="9.2. 尽量重复使用同一缓冲区"></a>9.2. 尽量重复使用同一缓冲区</h3><p>针对缓冲区，Java 虚拟机需要花时间生成对象，还要花时间进行垃圾回收处理。所以，尽量重复利用缓冲区。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder builder1 = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line">builder1.append(<span class="string">"update t_user set name = '"</span>).append(userName).append(<span class="string">"' where id = "</span>).append(userId);</span><br><span class="line">statement.executeUpdate(builder1.toString());</span><br><span class="line">StringBuilder builder2 = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line">builder2.append(<span class="string">"select id, name from t_user where id = "</span>).append(userId);</span><br><span class="line">ResultSet resultSet = statement.executeQuery(builder2.toString());</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line">builder.append(<span class="string">"update t_user set name = '"</span>).append(userName).append(<span class="string">"' where id = "</span>).append(userId);</span><br><span class="line">statement.executeUpdate(builder.toString());</span><br><span class="line">builder.setLength(<span class="number">0</span>);</span><br><span class="line">builder.append(<span class="string">"select id, name from t_user where id = "</span>).append(userId);</span><br><span class="line">ResultSet resultSet = statement.executeQuery(builder.toString());</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>其中，使用 setLength 方法让缓冲区重新从 0 开始。</p>
<h3 id="9-3-尽量设计使用同一缓冲区"><a href="#9-3-尽量设计使用同一缓冲区" class="headerlink" title="9.3. 尽量设计使用同一缓冲区"></a>9.3. 尽量设计使用同一缓冲区</h3><p>为了提高程序运行效率，在设计上尽量使用同一缓冲区。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转化 XML(UserDO)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toXml</span><span class="params">(UserDO user)</span> </span>&#123;</span><br><span class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line">    builder.append(<span class="string">"&lt;UserDO&gt;"</span>);</span><br><span class="line">    builder.append(toXml(user.getId()));</span><br><span class="line">    builder.append(toXml(user.getName()));</span><br><span class="line">    builder.append(toXml(user.getRole()));</span><br><span class="line">    builder.append(<span class="string">"&lt;/UserDO&gt;"</span>);</span><br><span class="line">    <span class="keyword">return</span> builder.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 转化 XML(Long)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toXml</span><span class="params">(Long value)</span> </span>&#123;</span><br><span class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line">    builder.append(<span class="string">"&lt;Long&gt;"</span>);</span><br><span class="line">    builder.append(value);</span><br><span class="line">    builder.append(<span class="string">"&lt;/Long&gt;"</span>);</span><br><span class="line">    <span class="keyword">return</span> builder.toString();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用代码</span></span><br><span class="line">UserDO user = ...;</span><br><span class="line">String xml = toXml(user);</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转化 XML(UserDO)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toXml</span><span class="params">(StringBuilder builder, UserDO user)</span> </span>&#123;</span><br><span class="line">    builder.append(<span class="string">"&lt;UserDO&gt;"</span>);</span><br><span class="line">    toXml(builder, user.getId());</span><br><span class="line">    toXml(builder, user.getName());</span><br><span class="line">    toXml(builder, user.getRole());</span><br><span class="line">    builder.append(<span class="string">"&lt;/UserDO&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 转化 XML(Long)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toXml</span><span class="params">(StringBuilder builder, Long value)</span> </span>&#123;</span><br><span class="line">    builder.append(<span class="string">"&lt;Long&gt;"</span>);</span><br><span class="line">    builder.append(value);</span><br><span class="line">    builder.append(<span class="string">"&lt;/Long&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用代码</span></span><br><span class="line">UserDO user = ...;</span><br><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="number">1024</span>);</span><br><span class="line">toXml(builder, user);</span><br><span class="line">String xml = builder.toString();</span><br></pre></td></tr></table></figure>
<p>去掉每个转化方法中的缓冲区申请，申请一个缓冲区给每个转化方法使用。从时间上来说，节约了大量缓冲区的申请释放时间；从空间上来说，节约了大量缓冲区的临时存储空间。</p>
<h3 id="9-4-尽量使用缓冲流减少-IO-操作"><a href="#9-4-尽量使用缓冲流减少-IO-操作" class="headerlink" title="9.4. 尽量使用缓冲流减少 IO 操作"></a>9.4. 尽量使用缓冲流减少 IO 操作</h3><p>使用缓冲流 BufferedReader、BufferedWriter、BufferedInputStream、BufferedOutputStream 等，可以大幅较少 IO 次数并提升 IO 速度。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (FileInputStream input = <span class="keyword">new</span> FileInputStream(<span class="string">"a"</span>);</span><br><span class="line">    FileOutputStream output = <span class="keyword">new</span> FileOutputStream(<span class="string">"b"</span>)) &#123;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] temp = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> ((size = input.read(temp)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        output.write(temp, <span class="number">0</span>, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    log.error(<span class="string">" 复制文件异常 "</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (BufferedInputStream input = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"a"</span>));</span><br><span class="line">    BufferedOutputStream output = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"b"</span>))) &#123;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] temp = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> ((size = input.read(temp)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        output.write(temp, <span class="number">0</span>, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    log.error(<span class="string">" 复制文件异常 "</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，可以根据实际情况手动指定缓冲流的大小，把缓冲流的缓冲作用发挥到最大。</p>
<h2 id="10-线程"><a href="#10-线程" class="headerlink" title="10. 线程"></a>10. 线程</h2><h3 id="10-1-在单线程中，尽量使用非线程安全类"><a href="#10-1-在单线程中，尽量使用非线程安全类" class="headerlink" title="10.1. 在单线程中，尽量使用非线程安全类"></a>10.1. 在单线程中，尽量使用非线程安全类</h3><p>使用非线程安全类，避免了不必要的同步开销。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer(<span class="number">128</span>);</span><br><span class="line">buffer.append(<span class="string">"select * from "</span>).append(T_USER).append(<span class="string">" where id = ?"</span>);</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder buffer = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line">buffer.append(<span class="string">"select * from "</span>).append(T_USER).append(<span class="string">" where id = ?"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="10-2-在多线程中，尽量使用线程安全类"><a href="#10-2-在多线程中，尽量使用线程安全类" class="headerlink" title="10.2. 在多线程中，尽量使用线程安全类"></a>10.2. 在多线程中，尽量使用线程安全类</h3><p>使用线程安全类，比自己实现的同步代码更简洁更高效。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger counter = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">    counter.incrementAndGet();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="10-3-尽量减少同步代码块范围"><a href="#10-3-尽量减少同步代码块范围" class="headerlink" title="10.3. 尽量减少同步代码块范围"></a>10.3. 尽量减少同步代码块范围</h3><p>在一个方法中，可能只有一小部分的逻辑是需要同步控制的，如果同步控制了整个方法会影响执行效率。所以，尽量减少同步代码块的范围，只对需要进行同步的代码进行同步。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">    ... <span class="comment">// 非同步操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    ... <span class="comment">// 非同步操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="10-4-尽量合并为同一同步代码块"><a href="#10-4-尽量合并为同一同步代码块" class="headerlink" title="10.4. 尽量合并为同一同步代码块"></a>10.4. 尽量合并为同一同步代码块</h3><p>同步代码块是有性能开销的，如果确定可以合并为同一同步代码块，就应该尽量合并为同一同步代码块。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理单一订单</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="title">handleOrder</span><span class="params">(OrderDO order)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 处理所有订单</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleOrder</span><span class="params">(List&lt;OrderDO&gt; orderList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (OrderDO order : orderList) &#123;</span><br><span class="line">        handleOrder(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理单一订单</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">handleOrder</span><span class="params">(OrderDO order)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 处理所有订单</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">handleOrder</span><span class="params">(List&lt;OrderDO&gt; orderList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (OrderDO order : orderList) &#123;</span><br><span class="line">        handleOrder(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="10-5-尽量使用线程池减少线程开销"><a href="#10-5-尽量使用线程池减少线程开销" class="headerlink" title="10.5. 尽量使用线程池减少线程开销"></a>10.5. 尽量使用线程池减少线程开销</h3><p>多线程中两个必要的开销：线程的创建和上下文切换。采用线程池，可以尽量地避免这些开销。</p>
<p><strong>反例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeTask</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(runnable).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>正例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService EXECUTOR_SERVICE = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeTask</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">    executorService.execute(runnable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ol>
<li><a href="https://mp.weixin.qq.com/s/-ioLU65Sxg8tTmPyItZ2Iw" target="_blank" rel="noopener">原文</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java, efficient code, 高效代码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring面试问题]]></title>
      <url>/2020/01/14/spring-interview-questions/</url>
      <content type="html"><![CDATA[<p>Spring框架是最受欢迎的Java企业级web应用框架。<em>依赖注入</em>和<em>面象方面</em>是<em>Spring框架</em>的核心。<br><a id="more"></a></p>
<p>我最近提交了许多<a href="https://www.journaldev.com/2888/spring-tutorial-spring-core-tutorial" target="_blank" rel="noopener">Spring教程</a>，它将有助于帮你详细的解释Spring面试问题的核心概念。</p>
<h2 id="Spring面试问题列表"><a href="#Spring面试问题列表" class="headerlink" title="Spring面试问题列表"></a>Spring面试问题列表</h2><ol>
<li>Spring框架是什么？</li>
<li>Spring框架有些什么重要的特性和优势？</li>
<li>你对依赖注入的理解是什么？</li>
<li>Spring框架中怎么样实现依赖注入？</li>
<li>使用Spring工具套件有什么好处？</li>
<li>重要的Spring模块名称有哪些？</li>
<li>你对面向切面编程的理解是什么？</li>
<li>AOP中的Aspect, Advice, Pointcut, JointPoint and Advice Arguments是什么？</li>
<li>Spring AOP 和AspectJ AOP有什么区别？</li>
<li>Spring IoC容器是什么？</li>
<li>Spring Bean是什么？</li>
<li>Spring Bean配置文件的重要性是什么？</li>
<li>把一个类配置成Spring Bean有些什么不同方法？</li>
<li>Spring Bean有些什么不同作用域？</li>
<li><a href="#spring-bean-life-cycle">Spring Bean生命周期是什么？</a></li>
<li>在Spring Bean中怎么获得ServletContext和ServletConfig对象</li>
<li>Bean装配和@Autowired注解是什么？</li>
<li>Spring Bean自动装配有几种不同类型？</li>
<li>Spring Bean是线程安全的吗？</li>
<li>在Spring MVC的Controller是什么？</li>
<li>在Spring中 @Component, @Repository 和 @Service注解有什么区别？</li>
<li>DispatcherServlet 和 ContextLoaderListener是什么？</li>
<li>在Spring中的ViewResolver是什么？</li>
<li>MultipartResolver是什么？什么时候使用？</li>
<li>Spring MVC框架怎样处理异常？</li>
<li>在Java程序中怎样创建ApplicationContext？</li>
<li>能有多个Spring配置文件吗？</li>
<li>ContextLoaderListener是什么？</li>
<li>为了创建Spring MVC应用，至少需要配置什么？</li>
<li><a href="#spring-mvc-architecture">相对与MVC架构，你对Spring MVC框架的理解是怎样的？</a></li>
<li>Spring MVC应用怎样实现平地化？</li>
<li>使用Spring怎样创建Restful Web服务并返回JSON？</li>
<li>你使用过哪些重要的Spring注解？</li>
<li>我们可以发送一个Object作为Controller handler方法的响应吗？</li>
<li>Spring MVC应用怎样上传文件？</li>
<li>Spring Web MVC架构怎样验证表单数据？</li>
<li>Spring MVC拦截器（Interceptor）是什么？怎样使用？</li>
<li>Spring JdbcTemplate类是什么？怎样使用？</li>
<li>Spring Web应用中怎样使用Tomcat JNDI数据资源？</li>
<li>在Spring中怎样实现事务管理？</li>
<li>Spring DAO是什么？</li>
<li>怎样集成Spring和Hibernate框架？</li>
<li>Spring Security是什么？</li>
<li>怎样注入一个java.util.Properties到Spring Bean？</li>
<li>Spring框架使用哪些设计模式？</li>
<li>Spring框架有些什么最佳实践？</li>
</ol>
<h2 id="Spring面试问题及答案"><a href="#Spring面试问题及答案" class="headerlink" title="Spring面试问题及答案"></a>Spring面试问题及答案</h2><h3 id="1-Spring框架是什么？"><a href="#1-Spring框架是什么？" class="headerlink" title="1. Spring框架是什么？"></a>1. Spring框架是什么？</h3><p>Spring是使用最为广泛的Java企业级框架。 Spring框架是“依赖注入”和“面向切面编程”。</p>
<p>Spring框架可以用于一般的java应用中。通过依赖注入的实现不同组件中的松耦合，使用Spring支持的面向切面编程我们可以像日志和认证那样跨截面执行任务。</p>
<p>我喜欢Spring是因它提供了许多特性和不同的功能模块，如Spring MVC和Spring JDBC。由于它是开源的，有许多在线资源和活跃的社区，使用Spring框架，在相同的时间内，工作起来更加的容易和有趣。</p>
<h3 id="2-Spring框架有些什么重要的特性和优势？"><a href="#2-Spring框架有些什么重要的特性和优势？" class="headerlink" title="2. Spring框架有些什么重要的特性和优势？"></a>2. Spring框架有些什么重要的特性和优势？</h3><p>Spring框架是基于“依赖注入”和“面向切面编程”两个设计概念建立。</p>
<p>Spring框架有如下特性：  </p>
<ul>
<li>对开发来讲使用该框架有极少的开销，且它是一个轻量级的框架。  </li>
<li>依赖注入和控制反转编写的组件是相互独立的，Spring容器负责一起装配组件，帮助实现我们的工作。  </li>
<li>Spring IoC容器管理Spring Bean的生命周期和规划具体的配置，如JNDI查找。 </li>
<li>Spring MVC框架可以用于创建web应用，也可以创建返回XML或JSON的web服务。 </li>
<li>只需要非常少的配置便能支持事务管理，JDBC操作，文件上传，异常处理等。配置你可以使用注解或者配置文件实现。</li>
</ul>
<p>使用Spring框架有如下优势：  </p>
<ul>
<li>减少在应用中两个不同组件的直接依赖，一般来说Spring IoC容器负责初始化资源或beans并注入它们的依赖。  </li>
<li>在Spring框架中写单元测试更加容易。因为业务逻辑不直接依赖实际的资源实现类。可以容易的编写测试配置和注入测试目的模拟的beans。  </li>
<li>减少了重复代码的数量，如初始化对象，打开或关闭资源。我很喜欢JdbcTemplate类，是因为它帮助我们移除了所有来自JDBC编程的重复代码。  </li>
<li>Spring框架被分成多个模块，它帮助我们保证我们的应用变得轻量级。例如若不需要Spring事件管理特性，则可以不添加它的依赖到项目中。  </li>
<li>Spring框架支持大部分Java企业级特性，甚至更多。它总是与时俱进，如它有Android的Spring项目，帮助我们写出更好的native android的应用。这些使得Spring框架更完整，不需要因为新需求再引入不同的框架。</li>
</ul>
<h3 id="3-你对依赖注入的理解是什么？"><a href="#3-你对依赖注入的理解是什么？" class="headerlink" title="3. 你对依赖注入的理解是什么？"></a>3. 你对依赖注入的理解是什么？</h3><p>依赖注入设计模式允许我们移除硬编码依赖，确保应用松耦合，可扩展，可维护。把依赖解析从编译时移动运行时，我们就能够实现依赖注入模式。</p>
<p>使用依赖注入有这些好处：分享了关注点，减少了重复代码，组件可配置和更易单元测试。</p>
<h3 id="4-Spring框架中怎么样实现依赖注入？"><a href="#4-Spring框架中怎么样实现依赖注入？" class="headerlink" title="4. Spring框架中怎么样实现依赖注入？"></a>4. Spring框架中怎么样实现依赖注入？</h3><p>在Spring应用中我们可以基于“Spring XML”以及“注解”配置实现依赖注入。更好的理解，请阅读<a href="https://www.journaldev.com/2410/spring-dependency-injection" target="_blank" rel="noopener">Spring依赖注入实例</a>。</p>
<h3 id="5-使用Spring工具套件有什么好处？"><a href="#5-使用Spring工具套件有什么好处？" class="headerlink" title="5. 使用Spring工具套件有什么好处？"></a>5. 使用Spring工具套件有什么好处？</h3><p>安装扫描件到Eclipse将获得更多Spring工具套件的特性。无论如何，Eclipse中的Spring工具套件有诸如Maven支持，创建不同Spring项目类型的模板和更好Spring应用性能的tc服务。</p>
<p>我喜欢Spring工具套件，是因为在使用AOP切入点（pointcuts）和APO通知（advices）时，高亮显示了这些Spring组件。它清楚的显示了哪个方法将来自指定的切入点。因此相较与安装每一件小工具，在开发Spring应用时，我更喜欢使用Spring工具套件。</p>
<h3 id="6-重要的Spring模块名称有哪些？"><a href="#6-重要的Spring模块名称有哪些？" class="headerlink" title="6. 重要的Spring模块名称有哪些？"></a>6. 重要的Spring模块名称有哪些？</h3><p>Spring框架一些重要的模块如下：  </p>
<ul>
<li>Spring Context – 用于依赖注入。  </li>
<li>Spring AOP –用于面向切面编程。  </li>
<li>Spring DAO – 用于DAO模式的数据操作。  </li>
<li>Spring JDBC – 用于JDBC和数据的支持。  </li>
<li>Spring ORM – 用于ORM工具的支持，如Hibernate。</li>
<li>Spring Web Module – 用于创建web应用。</li>
<li>Spring MVC – 为创建web应用，web服务等的MVC实现。</li>
</ul>
<h3 id="7-你对面向切面编程的理解是什么？"><a href="#7-你对面向切面编程的理解是什么？" class="headerlink" title="7. 你对面向切面编程的理解是什么？"></a>7. 你对面向切面编程的理解是什么？</h3><p>企业级应用有一些对不同类型的对象和应用模块的公用横向关注点是合适必要的。例始日志，事务管理，数据验证，身份认证等。<br>在面向切面编程中，应用模块是通过类实现的。如AOP应用模块是通过配置在不同类的方法上的模向关注点Aspects实现的。</p>
<p>AOP从类中分离了横向关注点任务的直接依赖，这在一般的面向对象编程中是不可做到的。例如，你可以把日志从类中分离，但这个类不午不将要调用这些方法记录日志数据（AOP就不需要）。</p>
<h3 id="8-AOP中的连接点（Joinpoint）-切点（Pointcut），通知（Advice），引介（Introduction），切面（Aspect），织入（Weaving）是什么？"><a href="#8-AOP中的连接点（Joinpoint）-切点（Pointcut），通知（Advice），引介（Introduction），切面（Aspect），织入（Weaving）是什么？" class="headerlink" title="8. AOP中的连接点（Joinpoint）, 切点（Pointcut），通知（Advice），引介（Introduction），切面（Aspect），织入（Weaving）是什么？"></a>8. AOP中的连接点（Joinpoint）, 切点（Pointcut），通知（Advice），引介（Introduction），切面（Aspect），织入（Weaving）是什么？</h3><ul>
<li>连接点（Joinpoint）<br>程序执行的某个特定位置：如类某个方法调用前、调用后、方法抛出异常后。一个类或一段程序代码拥有一些具有边界性质的特定点，这些点中的特定点就称为“连接点”。Spring仅支持方法的连接点，即仅能在方法调用前、方法调用后、方法抛出异常时以及方法调用前后这些程序执行点织入通知。连接点由两个信息确定：第一是用方法表示的程序执行点；第二是用相对点表示的方位。连接点是在应用执行过程中能够插入切面的一个点。</li>
</ul>
<p>以查电表为例子：电力公司为多个住户提供服务，连接点就是每一家的电表所在的位置（类中的方法的调用前、调用后…）。</p>
<ul>
<li>切点（Pointcut）<br>AOP通过“切点”定位特定的连接点。切点和连接点不是一对一的关系，一个切点可以匹配多个连接点。在Spring中，切点通过org.springframework.aop.Pointcut接口进行描述，它使用类和方法作为连接点的查询条件，Spring AOP的规则解析引擎负责切点所设定的查询条件，找到对应的连接点。其实确切地说，不能称之为查询连接点，因为连接点是方法执行前、执行后等包括方位信息的具体程序执行点，而切点只定位到某个方法上，所以如果希望定位到具体连接点上，还需要提供方位信息。</li>
</ul>
<p>电力公司为每一个抄表员都分别指定某一块区域的住户。切点就是划分的区域。</p>
<ul>
<li>通知（Advice）<br>切面的工作被称为通知。是织入到目标类连接点上的一段程序代码。<br>Spring切面可以应用5种类型的通知：<br>-前置通知（Before）：在目标方法被调用之前调用通知功能；<br>-后置通知（After）：在目标方法完成之后调用通知，此时不会关心方 法的输出是什么；<br>-返回通知（After-returning）：在目标方法成功执行之后调用通知；<br>-异常通知（After-throwing）：在目标方法抛出异常后调用通知；<br>-环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调 用之前和调用之后执行自定义的行为。</li>
</ul>
<p>抄表员的本职工作是登记用电量，但他们还需要向电力公司汇报的信息。<br>登记用电量是目标对象，汇报的信息就是通知。 </p>
<ul>
<li>引介（Introduction）  </li>
</ul>
<p>引入允许我们向现有的类添加新方法或属性，是一种特殊的通知。这样，即使一个业务类原本没有实现某个接口，通过AOP的引介功能，我们可以动态地为该业务类添加接口的实现逻辑，让业务类成为这个接口的实现类。</p>
<ul>
<li>切面（Aspect）</li>
</ul>
<p>切面由切点和通知（引介）组成，它既包括了横切逻辑的定义，也包括了连接点的定义。</p>
<p>抄表员的开始一天的工作时，他要知道从哪些区域（切点）收集信息，从而进行汇报（通知）。</p>
<ul>
<li>织入（Weaving）</li>
</ul>
<p>织入是把切面应用到目标对象并创建新的代理对象的过程。<br>AOP有三种织入的方式：<br>a、编译期：切面在目标类编译时被织入。这种方式需要特殊的编译器。AspectJ的织入编译器就是以这种方式织入切面的。<br>b、类加载期：切面在目标类加载到JVM时被织入。这种方式需要特殊的类加载器（ClassLoader），它可以在目标类被引入应用之前增<br>强该目标类的字节码。AspectJ 5的加载时织入（load-time weaving，LTW）就支持以这种方式织入切面。<br>c、运行期：切面在应用运行的某个时刻被织入。一般情况下，在织入切面时，AOP容器会为目标对象动态地创建一个代理对象。Spring<br>AOP就是以这种方式织入切面的。</p>
<h3 id="9-Spring-AOP-和AspectJ-AOP有什么区别？"><a href="#9-Spring-AOP-和AspectJ-AOP有什么区别？" class="headerlink" title="9. Spring AOP 和AspectJ AOP有什么区别？"></a>9. Spring AOP 和AspectJ AOP有什么区别？</h3><p>AspectJ是面向方向的一个工业标准级实现，而Spring仅实现了一些案例的AOP。Spring AOP 和AspectJ AOP主要有以下区别：</p>
<ul>
<li>相较与AspectJ，Spring AOP使用更简单，因为不需要担心织入（weaving）处理。 </li>
<li>Spring AOP支持AspectJ 注解,因此你熟悉AspectJ，使用Spring AOP也是容易的。</li>
<li>Spring AOP仅支持基于代理的AOP，因此它仅能应用到方法执行连接点上。AspectJ支持所有种类的切点。</li>
<li>Spring AOP缺点之一是它通过Spring上下文仅能应用到beans创建时。</li>
</ul>
<h3 id="10-Spring-IoC容器是什么？"><a href="#10-Spring-IoC容器是什么？" class="headerlink" title="10. Spring IoC容器是什么？"></a>10. Spring IoC容器是什么？</h3><p>控制反转（Inversion of Control）是在两对象依赖之间实现松耦合的机制。为了实现松耦合和在运行时对象的动态绑定，对象定义依赖是通过其他装配对象被注入的。Spring IoC容器是注入依赖到某个对象和待我们使用的一种程序。</p>
<p>Spring框架的IoC容器类由<code>org.springframework.beans</code>和<code>org.springframework.context</code>包组成。提供给我们多种不同的方式实现对象依赖的解耦。</p>
<p>一些常用的应用上下文实现如下：</p>
<ul>
<li><code>AnnotationConfigApplicationContext</code>: 对于基于注角配置的独立java应用程序。</li>
<li><code>ClassPathXmlApplicationContext</code>: 对于基于XML配置的独立java应用程序。</li>
<li><code>FileSystemXmlApplicationContext</code>: 除xml配置可以在文件系统中的从任何地方加载之外，与<code>ClassPathXmlApplicationContext</code>类似。</li>
<li><code>AnnotationConfigWebApplicationContext</code> 和 <code>XmlWebApplicationContext</code>：对于web应用程序。</li>
</ul>
<h3 id="11-Spring-Bean是什么？"><a href="#11-Spring-Bean是什么？" class="headerlink" title="11. Spring Bean是什么？"></a>11. Spring Bean是什么？</h3><p>Spring IoC容器初始化任何普通的java类被称为Spring Bean。我们使用Spring ApplicationContext得到Spring Bean实例.</p>
<p>Spring IoC容器管理Spring Bean生命周期，bean作用域并在bean中注入任何所需要的依赖关系。</p>
<h3 id="12-Spring-Bean配置文件的重要性是什么？"><a href="#12-Spring-Bean配置文件的重要性是什么？" class="headerlink" title="12. Spring Bean配置文件的重要性是什么？"></a>12. Spring Bean配置文件的重要性是什么？</h3><p>我们使用Spring Bean配置文件定义的所有beans将通过Spring Context初始化。在我们创建Spring ApplicationContext的实例时，它将读取spring bean xml文件和初始化所有的实例。一旦ApplicationContext初始化成功，我们就能够使用它得到不同的bean实例了。</p>
<p>除了Spring Bean配置外，该文件还包含Spring MVC拦截器，视图解析器和其他元素，以支持基于注释的配置。</p>
<h3 id="13-把一个类配置成Spring-Bean有些什么不同方法？"><a href="#13-把一个类配置成Spring-Bean有些什么不同方法？" class="headerlink" title="13. 把一个类配置成Spring Bean有些什么不同方法？"></a>13. 把一个类配置成Spring Bean有些什么不同方法？</h3><p>有以下三种方案配置Spring Bean：</p>
<p><strong>XML 配置</strong>: 这是非常受欢迎的配置方式，我们可以使用在context文件中的元素来配置Spring Bean。例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"myBean"</span> <span class="attr">class</span>=<span class="string">"com.journaldev.spring.beans.MyBean"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>基于Java的配置</strong>：如果仅使用注释，则可以使用@Bean注释配置Spring Bean。 此注释与@Configuration类配合使用即配置成Spring bean。 示例配置如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(value=<span class="string">"com.journaldev.spring.main"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MyService <span class="title">getService</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyService();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>为了从spring context得到这个bean，我们需要使用所以代码段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AnnotationConfigApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(</span><br><span class="line">		MyConfiguration.class);</span><br><span class="line">MyService service = ctx.getBean(MyService.class);</span><br></pre></td></tr></table></figure>
<p><strong>基于注解的配置</strong>：我们还可以使用@Component，@Service，@Repository和@Controller注释与类配置为spring bean。 对于这些，我们需要提供基本的包位置来扫描这些类。 例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.journaldev.spring"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="14-Spring-Bean有些什么不同作用域？"><a href="#14-Spring-Bean有些什么不同作用域？" class="headerlink" title="14. Spring Bean有些什么不同作用域？"></a>14. Spring Bean有些什么不同作用域？</h3><p>Spring Beans定义了5种作用域。</p>
<p><strong>singleton</strong>: 将为每个容器创建一个Bean的一个实例。 这是Spring bean的默认作用域。 在使用此作用域时，确保spring bean没有共享实例变量，否则可能导致数据不一致性问题，因为它不是线程安全的。<br><strong>prototype</strong>: 每次请求bean时都会创建一个新的实例。<br><strong>request</strong>: 这与prototype作用域相同，但它意在用于Web应用程序。 将为每个HTTP请求创建一个新的bean实例。该作用域仅在基于web的Spring上下文中才有效。该作用域仅在基于web的Spring上下文中才有效。<br><strong>session</strong>: 将为容器的每个HTTP会话创建一个新的bean。该作用域仅在基于web的Spring上下文中才有效。<br><strong>global-session</strong>: 这用于为Portlet应用程序创建全局会话bean。该作用域仅在Portlet上下文中才有效。<br>Spring框架是可扩展的，我们也可以创建我们自己的作用域，但是大多数时候，我们使用框架提供的作用域就够了。</p>
<p>要设置Spring bean作用域，我们可以在bean元素或@Scope注解中使用“scope”属性来进行基于注解的配置。</p>
<p><a name="spring-bean-life-cycle"></a></p>
<h3 id="15-Spring-Bean生命周期是什么？"><a href="#15-Spring-Bean生命周期是什么？" class="headerlink" title="15. Spring Bean生命周期是什么？"></a>15. Spring Bean生命周期是什么？</h3><p>Spring Beans通过Spring容器被初始化并所有依赖也被注入。在上下文多销毁时，所有初始化的beans也销毁。这在大多数情况下运行良好，但有时我们希望初始化其他资源或进行一些验证，然后才能使我们的bean准备被使用。Spring框架提供了对Spring bean中的初始化后和销毁前方法的支持。</p>
<p>我们可以通过两种方法来实现 - 通过在Spring bean配置中实现InitializingBean和DisposableBean接口或使用init-method和destroy-method属性。有关更多详细信息，请参阅<a href="https://www.journaldev.com/2637/spring-bean-life-cycle" target="_blank" rel="noopener">Spring Bean生命周期方法</a>。</p>
<h3 id="16-在Spring-Bean中怎么获得ServletContext和ServletConfig对象"><a href="#16-在Spring-Bean中怎么获得ServletContext和ServletConfig对象" class="headerlink" title="16. 在Spring Bean中怎么获得ServletContext和ServletConfig对象"></a>16. 在Spring Bean中怎么获得ServletContext和ServletConfig对象</h3><p>在Spring Bean中有两种方法获得容器指定的对象。</p>
<ol>
<li>实现Spring * Aware接口。对于这些ServletContextAware和ServletConfigAware接口，有关这些aware接口的完整示例，请阅读<a href="https://www.journaldev.com/2637/spring-bean-life-cycle" target="_blank" rel="noopener">Spring Aware Interfaces</a>。   </li>
<li>使用@Autowired注释与类型为ServletContext和ServletConfig的Bean变量。 它们只能在servlet容器的特定环境中工作。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ServletContext servletContext;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="17-Bean装配和-Autowired注解是什么？"><a href="#17-Bean装配和-Autowired注解是什么？" class="headerlink" title="17. Bean装配和@Autowired注解是什么？"></a>17. Bean装配和@Autowired注解是什么？</h3><p>spring bean依赖注入的处理，在初始化它时被称作spring bean装配。</p>
<p>通常来讲显示的装配所有的bean依赖是最佳实践，但spring框架也支持自动装配。我们也可以使用@Autowired注解和域或方法通过类型的方式自动装配。为了使此注解工作，我们还需要在spring bean配置文件中启用基于注释的配置。 这可以通过上下文来完成：annotation-config元素。</p>
<p>有关@Autowired注释的更多详细信息，请阅读<a href="https://www.journaldev.com/2623/spring-autowired-annotation" target="_blank" rel="noopener">Spring Autowire示例</a>。</p>
<h3 id="18-Spring-Bean自动装配有几种不同类型？"><a href="#18-Spring-Bean自动装配有几种不同类型？" class="headerlink" title="18. Spring Bean自动装配有几种不同类型？"></a>18. Spring Bean自动装配有几种不同类型？</h3><p>spring框架有4种类型的自动装配：</p>
<ol>
<li>据名称自动装配  </li>
<li>据类型自动装配  </li>
<li>据构造类自动装配  </li>
<li>据@Autowired和@Qualifier注解自动装配<br>Prior to Spring 3.1, autowire by autodetect was also supported that was similar to autowire by constructor or byType. For more details about these options, please read Spring Bean Autowiring.</li>
</ol>
<p>在Spring 3.1之前，据自动探测自动装配也被支持，它类似于构造器或按类型自动装配。有关这些选项的更多详细信息，请参阅<a href="https://www.journaldev.com/2623/spring-autowired-annotation" target="_blank" rel="noopener">Spring Bean自动装配</a>。</p>
<h3 id="19-Spring-Bean是线程安全的吗？"><a href="#19-Spring-Bean是线程安全的吗？" class="headerlink" title="19. Spring Bean是线程安全的吗？"></a>19. Spring Bean是线程安全的吗？</h3><p>Spring bean的默认作用域是单例的，因此每个上下文只有一个实例。 这意味着所有类级别的变量在任何线程可以更新它，导致数据不一致。 因此，在默认模式下，spring bean不是线程安全的。</p>
<p>但是我们可以改变spring bean的作用域到request, prototype or session，在牺牲性能的基础上，来实现线程安全。 这是一个设计决策，并根据项目要求。</p>
<h3 id="20-在Spring-MVC的Controller是什么？"><a href="#20-在Spring-MVC的Controller是什么？" class="headerlink" title="20. 在Spring MVC的Controller是什么？"></a>20. 在Spring MVC的Controller是什么？</h3><p>就像MVC设计模式一样，Controller是负责处理所有客户端请求的类，并将它们分发到配置的资源去处理它。在Spring MVC中，org.springframework.web.servlet.DispatcherServlet是基于spring bean配置初始化上下文的前端控制器类。</p>
<p>Controller类负责根据请求映射来处理不同类型的客户端请求。 我们可以使用@Controller注解创建一个控制器类。 通常它与@RequestMapping注释一起使用来指定特定URI映射的处理程序方法。</p>
<h3 id="21-在Spring中-Component-Repository-和-Service注解有什么区别？"><a href="#21-在Spring中-Component-Repository-和-Service注解有什么区别？" class="headerlink" title="21. 在Spring中 @Component, @Repository 和 @Service注解有什么区别？"></a>21. 在Spring中 @Component, @Repository 和 @Service注解有什么区别？</h3><p><code>@Component</code>注解用于指示该类是一个组件。 当使用基于注解的配置时，这些类将自动检测并配置为bean被使用。</p>
<p><code>@Controller</code>注解是一种特定类型的组件，用于MVC应用程序，大多与@RequestMapping注解一起使用。</p>
<p><code>@Repository</code>注解用于指示组件用作存储库，以及用于存储/检索/搜索数据的机制。 我们可以使用DAO模式实现类应用此注解。</p>
<p><code>@Service</code>注解用于表示该类是一个服务。 通常会提供一些服务的业务门面类使用该注解。</p>
<p>为了类可以自动检测到，我们可以使用任何以上注解，但不同的类型的注解被提供后，你可以轻松区分类的意图。</p>
<h3 id="22-DispatcherServlet-和-ContextLoaderListener是什么？"><a href="#22-DispatcherServlet-和-ContextLoaderListener是什么？" class="headerlink" title="22. DispatcherServlet 和 ContextLoaderListener是什么？"></a>22. DispatcherServlet 和 ContextLoaderListener是什么？</h3><p><code>DispatcherServlet</code>是Spring MVC应用程序中的前台控制器，它加载spring bean配置文件并初始化配置的所有bean。 如果注解已启用，它还会扫描程序包和配置使用<code>@Component</code>，<code>@Controller</code>，<code>@Repository</code>或<code>@Service</code>注解的任何bean。</p>
<p><code>ContextLoaderListener</code>是启动和关闭Spring的根<code>WebApplicationContext</code>的侦听器。 重要的功能是将<code>ApplicationContext</code>的生命周期与<code>ServletContext</code>的生命周期结合起来，并自动创建<code>ApplicationContext</code>。 我们可以跨越不同spring上下文中,使用它定义共享bean。</p>
<h3 id="23-在Spring中的ViewResolver是什么？"><a href="#23-在Spring中的ViewResolver是什么？" class="headerlink" title="23. 在Spring中的ViewResolver是什么？"></a>23. 在Spring中的ViewResolver是什么？</h3><p><code>ViewResolver</code>实现被用于按名称解析视图页面。 通常我们在spring bean配置文件中配置它。 例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>InternalResourceViewResolver</code>是<code>ViewResolver</code>接口的实现之一，我们通过bean属性提供了view pages目录和后缀位置。 因此，如果控制器处理程序方法返回“home”，则视图解析器将使用位于/WEB-INF/views/home.jsp的视图页面。</p>
<h3 id="24-MultipartResolver是什么？什么时候使用？"><a href="#24-MultipartResolver是什么？什么时候使用？" class="headerlink" title="24. MultipartResolver是什么？什么时候使用？"></a>24. MultipartResolver是什么？什么时候使用？</h3><p><code>MultipartResolver</code>接口用于上传文件 - <code>CommonsMultipartResolver</code>和<code>StandardServletMultipartResolver</code>是由spring框架提供的用于文件上传的两个实现。 默认情况下，没有配置多部分解析器，但是要使用它们来上传文件，我们需要在spring bean配置中定义一个名为“multipartResolver”的bean，其类型为MultipartResolver。</p>
<p>一旦配置完成后，任何多部分请求将由配置的<code>MultipartResolver</code>解析，并传递一个包装的<code>HttpServletRequest</code>。 然后在控制器类中使用它来获取文件并处理它。 这里提供一个完整的例子，请阅读<a href="https://www.journaldev.com/2573/spring-mvc-file-upload-example-single-multiple-files" target="_blank" rel="noopener">Spring MVC文件上传示例</a>。</p>
<h3 id="25-Spring-MVC框架怎样处理异常？"><a href="#25-Spring-MVC框架怎样处理异常？" class="headerlink" title="25. Spring MVC框架怎样处理异常？"></a>25. Spring MVC框架怎样处理异常？</h3><p>Spring MVC框架提供了以下方法来帮助我们实现强大的异常处理。</p>
<ol>
<li><strong>基于控制器</strong> - 我们可以在控制器类中定义异常处理程序方法。 我们需要的是使用@ExceptionHandler注解来注解这些方法。</li>
<li><strong>全局异常处理程序</strong> - 异常处理是一个横切关注的问题，Spring提供了<code>@ControllerAdvice</code>注解，让我们可以使用任何类来定义我们的全局异常处理程序。  </li>
<li><strong><code>HandlerExceptionResolver</code>实现</strong> - 对于一般异常，大多数时候我们提供静态页面。 Spring Framework提供了<code>HandlerExceptionResolver</code>接口，我们可以实现这个接口来创建全局异常处理程序。 这种额外的方法来定义全局异常处理程序的原因是Spring框架还提供了我们可以在spring bean配置文件中定义的默认实现类，以获得Spring框架异常处理的好处。</li>
</ol>
<p>有关完整的示例，请参阅<a href="https://www.journaldev.com/2651/spring-mvc-exception-handling-controlleradvice-exceptionhandler-handlerexceptionresolver" target="_blank" rel="noopener">Spring异常处理</a>示例。</p>
<h3 id="26-在Java程序中怎样创建ApplicationContext？"><a href="#26-在Java程序中怎样创建ApplicationContext？" class="headerlink" title="26. 在Java程序中怎样创建ApplicationContext？"></a>26. 在Java程序中怎样创建ApplicationContext？</h3><p>在独立的java程序中创建<code>ApplicationContext</code>有以下几种方法。</p>
<ol>
<li><strong><code>AnnotationConfigApplicationContext</code></strong>：如果我们在独立的Java应用程序中使用Spring，并使用注解进行配置，那么我们可以使用它来初始化容器并获取bean对象。  </li>
<li><strong><code>ClassPathXmlApplicationContext</code></strong>：如果我们在独立应用程序中有spring bean配置xml文件，那么我们可以使用此类来加载文件并获取容器对象。  </li>
<li><strong><code>FileSystemXmlApplicationContext</code></strong>：类似于<code>ClassPathXmlApplicationContext</code>，除了可以从文件系统中的任何位置之外的任何地方加载xml配置文件。 </li>
</ol>
<h3 id="27-能有多个Spring配置文件吗？"><a href="#27-能有多个Spring配置文件吗？" class="headerlink" title="27. 能有多个Spring配置文件吗？"></a>27. 能有多个Spring配置文件吗？</h3><p>对于Spring MVC应用程序，我们可以通过contextConfigLocation定义多个Spring上下文配置文件。 该位置字符串可以由多个位置组成，并以任意数量的逗号和空格分隔。 例如;<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/appServlet/servlet-context.xml,/WEB-INF/spring/appServlet/servlet-jdbc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>我们还可以定义多个根级Spring配置，并通过上下文参数加载它们。 例如;<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/root-context.xml /WEB-INF/spring/root-security.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>另一个选择是在上下文配置文件中使用import元素来导入其他配置，例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans:import</span> <span class="attr">resource</span>=<span class="string">"spring-jdbc.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="28-ContextLoaderListener是什么？"><a href="#28-ContextLoaderListener是什么？" class="headerlink" title="28. ContextLoaderListener是什么？"></a>28. ContextLoaderListener是什么？</h3><p>ContextLoaderListener是用于加载根上下文的侦听器类，并定义将对所有其他上下文可见的spring bean配置。 它在web.xml文件中配置为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/root-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="29-为了创建Spring-MVC应用，至少需要配置什么？"><a href="#29-为了创建Spring-MVC应用，至少需要配置什么？" class="headerlink" title="29. 为了创建Spring MVC应用，至少需要配置什么？"></a>29. 为了创建Spring MVC应用，至少需要配置什么？</h3><p>要创建一个简单的Spring MVC应用程序，我们需要执行以下任务。</p>
<ol>
<li>在项目中添加spring-context和spring-webmvc依赖项。</li>
<li>在web.xml文件中配置DispatcherServlet，以通过spring容器处理请求。</li>
<li>Spring bean配置文件来定义bean，如果使用注解，那么必须在这里配置。 此外，我们还需要为视图页面配置视图解析器。</li>
<li>控制器类与请求映射定义为处理客户端请求。<br>以上步骤应该足以创建一个简单的Spring MVC Hello World应用程序。</li>
</ol>
<p><a name="spring-mvc-architecture"></a></p>
<h3 id="30-相对与MVC架构，你对Spring-MVC框架的理解是怎样的？"><a href="#30-相对与MVC架构，你对Spring-MVC框架的理解是怎样的？" class="headerlink" title="30. 相对与MVC架构，你对Spring MVC框架的理解是怎样的？"></a>30. 相对与MVC架构，你对Spring MVC框架的理解是怎样的？</h3><p>正如名称所示，Spring MVC建立在Model-View-Controller架构之上。 DispatcherServlet是Spring MVC应用程序中的前端控制器，负责处理所有传入的请求并将其委托给不同的控制器处理程序方法。</p>
<p>模型可以是Spring框架中的任何Java Bean，就像任何其他MVC框架Spring一样，提供了将表单数据自动绑定到java bean。 我们可以将模型bean设置为在视图页面中使用的属性。</p>
<p>查看页面可以是JSP，静态HTML等，视图解析器负责查找正确的视图页面。 一旦查看页面被识别到，控制将返回给DispatcherServlet控制器。 DispatcherServlet负责呈现视图，并向客户端返回最终响应。</p>
<h3 id="31-Spring-MVC应用怎样实现本地化？"><a href="#31-Spring-MVC应用怎样实现本地化？" class="headerlink" title="31. Spring MVC应用怎样实现本地化？"></a>31. Spring MVC应用怎样实现本地化？</h3><p>Spring通过资源包为本地化或i18n提供了极好的支持。 使我们的应用程序本地化所需的基本步骤是：</p>
<ol>
<li>为不同的区域设置创建消息资源束，如messages_en.properties，messages_fr.properties等。</li>
<li>在<code>ResourceBundleMessageSource</code>或<code>ReloadableResourceBundleMessageSource</code>类型的spring bean配置文件中定义messageSource bean。</li>
<li><p>要更改区域设置支持，请定义类型为CookieLocaleResolver的localeResolver bean并配置LocaleChangeInterceptor拦截器。<br>示例配置可以如下所示：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.context.support.ReloadableResourceBundleMessageSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"basename"</span> <span class="attr">value</span>=<span class="string">"classpath:messages"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"localeResolver"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.CookieLocaleResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"defaultLocale"</span> <span class="attr">value</span>=<span class="string">"en"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"cookieName"</span> <span class="attr">value</span>=<span class="string">"myAppLocaleCookie"</span>&gt;</span><span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"cookieMaxAge"</span> <span class="attr">value</span>=<span class="string">"3600"</span>&gt;</span><span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.LocaleChangeInterceptor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"paramName"</span> <span class="attr">value</span>=<span class="string">"locale"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在具有键名称的视图页面中使用spring:message元素，DispatcherServlet选择相应的值，并将页面呈现在相应的区域设置中，并作为响应返回。</p>
</li>
</ol>
<p>有关完整的示例，请阅读<a href="https://www.journaldev.com/2610/spring-mvc-internationalization-i18n-and-localization-l10n-example" target="_blank" rel="noopener">Spring本地化</a>示例 。</p>
<h3 id="32-使用Spring怎样创建Restful-Web服务并返回JSON？"><a href="#32-使用Spring怎样创建Restful-Web服务并返回JSON？" class="headerlink" title="32. 使用Spring怎样创建Restful Web服务并返回JSON？"></a>32. 使用Spring怎样创建Restful Web服务并返回JSON？</h3><p>我们可以使用Spring Framework创建返回JSON数据的Restful Web服务。 Spring提供与<a href="https://www.journaldev.com/2324/jackson-json-java-parser-api-example-tutorial" target="_blank" rel="noopener">Jackson JSON</a> API的集成，我们可以使用它在安静的Web服务中发送JSON响应。</p>
<p>我们需要执行以下步骤来配置我们的Spring MVC应用程序以发送JSON响应：</p>
<ol>
<li><p>添加Jackson JSON依赖项，如果您使用Maven，可以使用以下代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Jackson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.databind-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在Spring bean配置文件中配置RequestMappingHandlerAdapter bean，并将messageConverters属性设置为MappingJackson2HttpMessageConverter bean。 样品配置将是：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Configure to plugin JSON as request and response in method handler --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">beans:ref</span> <span class="attr">bean</span>=<span class="string">"jsonMessageConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">beans:list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Configure bean to convert JSON to POJO and vice versa --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"jsonMessageConverter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在控制器处理程序方法中，使用@ResponseBody注释返回Object作为响应。 示例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = EmpRestURIConstants.GET_EMP, method = RequestMethod.GET)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Employee <span class="title">getEmployee</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> empId) </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"Start getEmployee. ID="</span>+empId);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> empData.get(empId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>您可以通过任何API调用其余服务，但是如果要使用Spring，那么我们可以使用RestTemplate类来轻松实现。<br>有关一个完整的例子，请阅读<a href="https://www.journaldev.com/2552/spring-rest-example-tutorial-spring-restful-web-services" target="_blank" rel="noopener">Spring Restful Webservice</a>示例 。</p>
</li>
</ol>
<h3 id="33-你使用过哪些重要的Spring注解？"><a href="#33-你使用过哪些重要的Spring注解？" class="headerlink" title="33. 你使用过哪些重要的Spring注解？"></a>33. 你使用过哪些重要的Spring注解？</h3><p>我在项目中使用的一些Spring注解是：</p>
<p><strong>@Controller</strong> - 用于Spring MVC项目中的控制器类。<br><strong>@RequestMapping</strong> - 用于在控制器处理程序方法中配置URI映射。 这是一个非常重要的注释。<br><strong>@ResponseBody</strong> - 用于发送Object作为响应，通常用于发送XML或JSON数据作为响应。<br><strong>@PathVariable</strong> - 用于将动态值从URI映射到处理程序方法参数。<br><strong>@Autowired</strong> - 用于spring bean的自动装配依赖。<br><strong>@Qualifier</strong> - 与@Autowired注解一起使用，以避免多个Bean类型的实例存在混淆。<br><strong>@Service</strong> - 用于服务类。<br><strong>@Scope</strong> - 用于配置spring bean的作用域。<br><strong>@Configuration</strong>， <strong>@ComponentScan</strong>和<strong>@Bean</strong> - 用于基于Java的配置。<br>用于配置切面和通知的AspectJ注解， <strong>@Aspect</strong> ， <strong>@Before</strong> ， <strong>@After</strong> ， <strong>@Around</strong> ， <strong>@Pointcut</strong>等。</p>
<h3 id="34-我们可以发送一个Object作为Controller-handler方法的响应吗？"><a href="#34-我们可以发送一个Object作为Controller-handler方法的响应吗？" class="headerlink" title="34. 我们可以发送一个Object作为Controller handler方法的响应吗？"></a>34. 我们可以发送一个Object作为Controller handler方法的响应吗？</h3><p>可以，我们可以使用@ResponseBody注解。 这就是我们如何在restful的Web服务中发送基于JSON或XML的响应。</p>
<h3 id="35-Spring-MVC应用怎样上传文件？"><a href="#35-Spring-MVC应用怎样上传文件？" class="headerlink" title="35. Spring MVC应用怎样上传文件？"></a>35. Spring MVC应用怎样上传文件？</h3><p>Spring提供内置的支持，可通过MultipartResolver接口实现上传文件。 它非常易于使用，只需要配置更改才能使其正常工作。 显然，我们需要编写控制器处理程序方法来处理传入的文件并进行处理。 有关完整的示例，请参阅<a href="https://www.journaldev.com/2573/spring-mvc-file-upload-example-single-multiple-files" target="_blank" rel="noopener">Spring文件上传</a>示例 。</p>
<h3 id="36-Spring-Web-MVC架构怎样验证表单数据？"><a href="#36-Spring-Web-MVC架构怎样验证表单数据？" class="headerlink" title="36. Spring Web MVC架构怎样验证表单数据？"></a>36. Spring Web MVC架构怎样验证表单数据？</h3><p>Spring支持基于JSR-303注释的验证，并提供我们可以实现的Validator接口来创建我们自己的自定义验证器。 对于使用基于JSR-303的验证，我们需要使用所需的验证来注释bean变量。</p>
<p>对于自定义验证器实现，我们需要在controller类中进行配置。 有关完整的示例，请参阅<a href="https://www.journaldev.com/2668/spring-validation-example-mvc-validator" target="_blank" rel="noopener">Spring MVC表单验证</a>示例 。</p>
<h3 id="37-Spring-MVC拦截器（Interceptor）是什么？怎样使用？"><a href="#37-Spring-MVC拦截器（Interceptor）是什么？怎样使用？" class="headerlink" title="37. Spring MVC拦截器（Interceptor）是什么？怎样使用？"></a>37. Spring MVC拦截器（Interceptor）是什么？怎样使用？</h3><p>Spring MVC拦截器就像Servlet过滤器，允许我们拦截客户端请求并处理它。 我们可以在三个地方拦截客户端请求 - <strong>preHandle</strong> ， <strong>postHandle</strong>和<strong>afterCompletion</strong> 。</p>
<p>我们可以通过实现HandlerInterceptor接口或扩展抽象类HandlerInterceptorAdapter来创建spring拦截器。</p>
<p>我们需要在spring bean配置文件中配置拦截器。 我们可以定义拦截器来拦截所有的客户端请求，也可以为特定的URI映射进行配置。 有关详细的示例，请参考<a href="https://www.journaldev.com/2676/spring-mvc-interceptor-example-handlerinterceptor-handlerinterceptoradapter" target="_blank" rel="noopener">Spring MVC拦截器</a>示例 。</p>
<h3 id="38-Spring-JdbcTemplate类是什么？怎样使用？"><a href="#38-Spring-JdbcTemplate类是什么？怎样使用？" class="headerlink" title="38. Spring JdbcTemplate类是什么？怎样使用？"></a>38. Spring JdbcTemplate类是什么？怎样使用？</h3><p>Spring Framework提供与JDBC API的良好集成，并提供JdbcTemplate实用程序类，我们可以使用它来避免数据库操作逻辑（如打开/关闭连接，ResultSet，PreparedStatement等）的bolier-plate代码。</p>
<p>对于JdbcTemplate示例，请参考<a href="https://www.journaldev.com/2593/spring-jdbc-example" target="_blank" rel="noopener">Spring JDBC</a>示例 。</p>
<h3 id="39-Spring-Web应用中怎样使用Tomcat-JNDI数据资源？"><a href="#39-Spring-Web应用中怎样使用Tomcat-JNDI数据资源？" class="headerlink" title="39. Spring Web应用中怎样使用Tomcat JNDI数据资源？"></a>39. Spring Web应用中怎样使用Tomcat JNDI数据资源？</h3><p>对于使用servlet容器配置的JNDI DataSource，我们需要在spring bean配置文件中进行配置，然后将其注入spring beans作为依赖关系。 然后我们可以使用它与JdbcTemplate来执行数据库操作。</p>
<p>示例配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"dbDataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jndi.JndiObjectFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"jndiName"</span> <span class="attr">value</span>=<span class="string">"java:comp/env/jdbc/MyLocalDB"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>有关完整的例子，请参考<a href="https://www.journaldev.com/2597/spring-datasource-jndi-with-tomcat-example" target="_blank" rel="noopener">Spring Tomcat JNDI</a>示例 。</p>
<h3 id="40-在Spring中怎样实现事务管理？"><a href="#40-在Spring中怎样实现事务管理？" class="headerlink" title="40. 在Spring中怎样实现事务管理？"></a>40. 在Spring中怎样实现事务管理？</h3><p>Spring框架通过声明式事务管理以及编程式事务管理来提供事务管理支持。 声明式事务管理被广泛使用，因为它在大多数情况下易于使用和工作。</p>
<p>我们使用@Transactional注释的注释方法进行声明式事务管理。 我们需要在Spring bean配置文件中为DataSource配置事务管理器。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="41-Spring-DAO是什么？"><a href="#41-Spring-DAO是什么？" class="headerlink" title="41. Spring DAO是什么？"></a>41. Spring DAO是什么？</h3><p>提供Spring DAO支持，以一致和简单的方式处理JDBC，Hibernate等数据访问技术。 例如，对于各自的技术，我们有<code>JdbcDaoSupport</code> ， <code>HibernateDaoSupport</code> ， <code>JdoDaoSupport</code>和<code>JpaDaoSupport</code> 。</p>
<p>Spring DAO还提供了异常层次结构的一致性，我们不需要捕获特定的异常。</p>
<h3 id="42-怎样集成Spring和Hibernate框架？"><a href="#42-怎样集成Spring和Hibernate框架？" class="headerlink" title="42. 怎样集成Spring和Hibernate框架？"></a>42. 怎样集成Spring和Hibernate框架？</h3><p>我们可以使用Spring ORM模块来集成Spring和Hibernate框架，如果您正在使用Hibernate 3+，SessionFactory提供当前会话，那么您应该避免使用<code>HibernateTemplate</code>或<code>HibernateDaoSupport</code>类，并更好地使用依赖注入的DAO模式进行集成。</p>
<p>Spring ORM还提供对使用Spring声明性事务管理的支持，所以您应该利用这一点，而不是使用hibernate的锅炉代码进行事务管理。</p>
<p>为了更好地理解，您应该请阅读以下教程：</p>
<p><a href="https://www.journaldev.com/3524/spring-hibernate-integration-example-tutorial" target="_blank" rel="noopener">Spring Hibernate集成</a>示例<br><a href="https://www.journaldev.com/3531/spring-mvc-hibernate-mysql-integration-crud-example-tutorial" target="_blank" rel="noopener">Spring MVC Hibernate集成</a>示例</p>
<h3 id="43-Spring-Security是什么？"><a href="#43-Spring-Security是什么？" class="headerlink" title="43. Spring Security是什么？"></a>43. Spring Security是什么？</h3><p>Spring Security框架关注的焦点是在java应用程序中提供身份验证和授权。 它解决了大多数常见的安全漏洞问题，如CSRF攻击。</p>
<p>通过使用注解,如@EnableWebSecurity ，在Web应用程序中使用Spring Security是很有好处的且易于使用。 您应该通过以下文章来了解如何使用Spring Security框架。</p>
<p><a href="https://www.journaldev.com/2715/spring-security-example-tutorial" target="_blank" rel="noopener">Servlet Web应用程序中的Spring Security</a><br><a href="https://www.journaldev.com/2736/spring-security-example-userdetailsservice" target="_blank" rel="noopener">Spring MVC和Spring Security集成</a>示例</p>
<h3 id="44-怎样注入一个java-util-Properties到Spring-Bean？"><a href="#44-怎样注入一个java-util-Properties到Spring-Bean？" class="headerlink" title="44. 怎样注入一个java.util.Properties到Spring Bean？"></a>44. 怎样注入一个java.util.Properties到Spring Bean？</h3><p>我们需要定义propertyConfigurer bean，该bean将从给定的属性文件加载属性。 然后我们可以使用Spring EL支持将属性注入其他bean依赖关系。 例如;<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"org.springframework.context.support.PropertySourcesPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/application.properties"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.journaldev.spring.EmployeeDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxReadResults"</span> <span class="attr">value</span>=<span class="string">"$&#123;results.read.max&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果您使用注解来配置spring bean，则可以像下面那样注入属性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;maxReadResults&#125;"</span>) </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxReadResults;</span><br></pre></td></tr></table></figure></p>
<h3 id="45-Spring框架使用哪些设计模式？"><a href="#45-Spring框架使用哪些设计模式？" class="headerlink" title="45. Spring框架使用哪些设计模式？"></a>45. Spring框架使用哪些设计模式？</h3><p>Spring框架正在使用很多设计模式，其中一些常见的是：</p>
<ol>
<li>单例模式：创建具有默认范围的bean。</li>
<li>工厂模式 ：Bean Factory类</li>
<li>原型模式 ：Bean作用域</li>
<li>适配器模式 ：Spring Web和Spring MVC</li>
<li>代理模式 ：Spring Aspect面向编程支持</li>
<li>模板方法模式 ：JdbcTemplate，HibernateTemplate等</li>
<li>前端控制器：Spring MVC DispatcherServlet</li>
<li>数据访问对象：Spring DAO支持</li>
<li>依赖注入和面向方面的编程</li>
</ol>
<h3 id="46-Spring框架有些什么最佳实践？"><a href="#46-Spring框架有些什么最佳实践？" class="headerlink" title="46. Spring框架有些什么最佳实践？"></a>46. Spring框架有些什么最佳实践？</h3><p>Spring Framework的一些最佳实践是：</p>
<ol>
<li>避免模​​式引用中的版本号，以确保我们有最新的配置。</li>
<li>根据spring-jdbc.xml，spring-security.xml等关注的问题来分隔spring bean配置。</li>
<li>对于在Spring MVC中的多个上下文中使用的spring bean，在根上下文中创建它们并使用listener进行初始化。</li>
<li>尽可能多地配置bean依赖关系，尽量避免自动装配。</li>
<li>对于应用程序级属性，最佳方法是创建一个属性文件，并在spring bean配置文件中读取它。</li>
<li>对于较小的应用程序，注解是有用的，但对于较大的应用程序注解可能会变得很痛苦。 如果我们在xml文件中有所有配置，维护它将会更容易。</li>
<li>为组件使用正确的注解，轻松了解其意图。 对于服务，使用@Service和DAO bean使用@Repository。</li>
<li>Spring框架有很多模块，使用你需要的。 删除通过Spring Tool Suite模板创建项目时添加的所有额外的依赖项。</li>
<li>如果您正在使用Aspects，请确保连接点范围尽可能的窄，以避免对不需要的方法的发送通知。 考虑更容易使用的自定义注解，可以避免任何问题。</li>
<li>当有实际利益时，使用依赖注入，只是为了松散耦合而不使用它，因为它更难维护。</li>
</ol>
<p>这就是Spring Framework面试的问题。 我希望这些问题能帮助您进行Java EE面试。 一旦有新的面试问题我将即时更新！</p>
<h2 id><a href="#" class="headerlink" title="======="></a>=======</h2><p>title: Spring面试问题<br>tags: java,spring,interview,面试<br>categories: </p>
<ul>
<li>java</li>
</ul>
<h2 id="thumbnail-gallery-blue-water6-jpg"><a href="#thumbnail-gallery-blue-water6-jpg" class="headerlink" title="thumbnail: /gallery/blue-water6.jpg"></a>thumbnail: /gallery/blue-water6.jpg</h2><p>Spring框架是最受欢迎的Java企业级web应用框架。<em>依赖注入</em>和<em>面象方面</em>是<em>Spring框架</em>的核心。<br><!-- more --></p>
<p>我最近提交了许多<a href="https://www.journaldev.com/2888/spring-tutorial-spring-core-tutorial" target="_blank" rel="noopener">Spring教程</a>，它将有助于帮你详细的解释Spring面试问题的核心概念。</p>
<h2 id="Spring面试问题列表-1"><a href="#Spring面试问题列表-1" class="headerlink" title="Spring面试问题列表"></a>Spring面试问题列表</h2><ol>
<li>Spring框架是什么？</li>
<li>Spring框架有些什么重要的特性和优势？</li>
<li>你对依赖注入的理解是什么？</li>
<li>Spring框架中怎么样实现依赖注入？</li>
<li>使用Spring工具套件有什么好处？</li>
<li>重要的Spring模块名称有哪些？</li>
<li>你对面向切面编程的理解是什么？</li>
<li>AOP中的Aspect, Advice, Pointcut, JointPoint and Advice Arguments是什么？</li>
<li>Spring AOP 和AspectJ AOP有什么区别？</li>
<li>Spring IoC容器是什么？</li>
<li>Spring Bean是什么？</li>
<li>Spring Bean配置文件的重要性是什么？</li>
<li>把一个类配置成Spring Bean有些什么不同方法？</li>
<li>Spring Bean有些什么不同作用域？</li>
<li><a href="#spring-bean-life-cycle">Spring Bean生命周期是什么？</a></li>
<li>在Spring Bean中怎么获得ServletContext和ServletConfig对象</li>
<li>Bean装配和@Autowired注解是什么？</li>
<li>Spring Bean自动装配有几种不同类型？</li>
<li>Spring Bean是线程安全的吗？</li>
<li>在Spring MVC的Controller是什么？</li>
<li>在Spring中 @Component, @Repository 和 @Service注解有什么区别？</li>
<li>DispatcherServlet 和 ContextLoaderListener是什么？</li>
<li>在Spring中的ViewResolver是什么？</li>
<li>MultipartResolver是什么？什么时候使用？</li>
<li>Spring MVC框架怎样处理异常？</li>
<li>在Java程序中怎样创建ApplicationContext？</li>
<li>能有多个Spring配置文件吗？</li>
<li>ContextLoaderListener是什么？</li>
<li>为了创建Spring MVC应用，至少需要配置什么？</li>
<li><a href="#spring-mvc-architecture">相对与MVC架构，你对Spring MVC框架的理解是怎样的？</a></li>
<li>Spring MVC应用怎样实现平地化？</li>
<li>使用Spring怎样创建Restful Web服务并返回JSON？</li>
<li>你使用过哪些重要的Spring注解？</li>
<li>我们可以发送一个Object作为Controller handler方法的响应吗？</li>
<li>Spring MVC应用怎样上传文件？</li>
<li>Spring Web MVC架构怎样验证表单数据？</li>
<li>Spring MVC拦截器（Interceptor）是什么？怎样使用？</li>
<li>Spring JdbcTemplate类是什么？怎样使用？</li>
<li>Spring Web应用中怎样使用Tomcat JNDI数据资源？</li>
<li>在Spring中怎样实现事务管理？</li>
<li>Spring DAO是什么？</li>
<li>怎样集成Spring和Hibernate框架？</li>
<li>Spring Security是什么？</li>
<li>怎样注入一个java.util.Properties到Spring Bean？</li>
<li>Spring框架使用哪些设计模式？</li>
<li>Spring框架有些什么最佳实践？</li>
</ol>
<h2 id="Spring面试问题及答案-1"><a href="#Spring面试问题及答案-1" class="headerlink" title="Spring面试问题及答案"></a>Spring面试问题及答案</h2><h3 id="1-Spring框架是什么？-1"><a href="#1-Spring框架是什么？-1" class="headerlink" title="1. Spring框架是什么？"></a>1. Spring框架是什么？</h3><p>Spring是使用最为广泛的Java企业级框架。 Spring框架是“依赖注入”和“面向切面编程”。</p>
<p>Spring框架可以用于一般的java应用中。通过依赖注入的实现不同组件中的松耦合，使用Spring支持的面向切面编程我们可以像日志和认证那样跨截面执行任务。</p>
<p>我喜欢Spring是因它提供了许多特性和不同的功能模块，如Spring MVC和Spring JDBC。由于它是开源的，有许多在线资源和活跃的社区，使用Spring框架，在相同的时间内，工作起来更加的容易和有趣。</p>
<h3 id="2-Spring框架有些什么重要的特性和优势？-1"><a href="#2-Spring框架有些什么重要的特性和优势？-1" class="headerlink" title="2. Spring框架有些什么重要的特性和优势？"></a>2. Spring框架有些什么重要的特性和优势？</h3><p>Spring框架是基于“依赖注入”和“面向切面编程”两个设计概念建立。</p>
<p>Spring框架有如下特性：  </p>
<ul>
<li>对开发来讲使用该框架有极少的开销，且它是一个轻量级的框架。  </li>
<li>依赖注入和控制反转编写的组件是相互独立的，Spring容器负责一起装配组件，帮助实现我们的工作。  </li>
<li>Spring IoC容器管理Spring Bean的生命周期和规划具体的配置，如JNDI查找。 </li>
<li>Spring MVC框架可以用于创建web应用，也可以创建返回XML或JSON的web服务。 </li>
<li>只需要非常少的配置便能支持事务管理，JDBC操作，文件上传，异常处理等。配置你可以使用注解或者配置文件实现。</li>
</ul>
<p>使用Spring框架有如下优势：  </p>
<ul>
<li>减少在应用中两个不同组件的直接依赖，一般来说Spring IoC容器负责初始化资源或beans并注入它们的依赖。  </li>
<li>在Spring框架中写单元测试更加容易。因为业务逻辑不直接依赖实际的资源实现类。可以容易的编写测试配置和注入测试目的模拟的beans。  </li>
<li>减少了重复代码的数量，如初始化对象，打开或关闭资源。我很喜欢JdbcTemplate类，是因为它帮助我们移除了所有来自JDBC编程的重复代码。  </li>
<li>Spring框架被分成多个模块，它帮助我们保证我们的应用变得轻量级。例如若不需要Spring事件管理特性，则可以不添加它的依赖到项目中。  </li>
<li>Spring框架支持大部分Java企业级特性，甚至更多。它总是与时俱进，如它有Android的Spring项目，帮助我们写出更好的native android的应用。这些使得Spring框架更完整，不需要因为新需求再引入不同的框架。</li>
</ul>
<h3 id="3-你对依赖注入的理解是什么？-1"><a href="#3-你对依赖注入的理解是什么？-1" class="headerlink" title="3. 你对依赖注入的理解是什么？"></a>3. 你对依赖注入的理解是什么？</h3><p>依赖注入设计模式允许我们移除硬编码依赖，确保应用松耦合，可扩展，可维护。把依赖解析从编译时移动运行时，我们就能够实现依赖注入模式。</p>
<p>使用依赖注入有这些好处：分享了关注点，减少了重复代码，组件可配置和更易单元测试。</p>
<h3 id="4-Spring框架中怎么样实现依赖注入？-1"><a href="#4-Spring框架中怎么样实现依赖注入？-1" class="headerlink" title="4. Spring框架中怎么样实现依赖注入？"></a>4. Spring框架中怎么样实现依赖注入？</h3><p>在Spring应用中我们可以基于“Spring XML”以及“注解”配置实现依赖注入。更好的理解，请阅读<a href="https://www.journaldev.com/2410/spring-dependency-injection" target="_blank" rel="noopener">Spring依赖注入实例</a>。</p>
<h3 id="5-使用Spring工具套件有什么好处？-1"><a href="#5-使用Spring工具套件有什么好处？-1" class="headerlink" title="5. 使用Spring工具套件有什么好处？"></a>5. 使用Spring工具套件有什么好处？</h3><p>安装扫描件到Eclipse将获得更多Spring工具套件的特性。无论如何，Eclipse中的Spring工具套件有诸如Maven支持，创建不同Spring项目类型的模板和更好Spring应用性能的tc服务。</p>
<p>我喜欢Spring工具套件，是因为在使用AOP切入点（pointcuts）和APO通知（advices）时，高亮显示了这些Spring组件。它清楚的显示了哪个方法将来自指定的切入点。因此相较与安装每一件小工具，在开发Spring应用时，我更喜欢使用Spring工具套件。</p>
<h3 id="6-重要的Spring模块名称有哪些？-1"><a href="#6-重要的Spring模块名称有哪些？-1" class="headerlink" title="6. 重要的Spring模块名称有哪些？"></a>6. 重要的Spring模块名称有哪些？</h3><p>Spring框架一些重要的模块如下：  </p>
<ul>
<li>Spring Context – 用于依赖注入。  </li>
<li>Spring AOP –用于面向切面编程。  </li>
<li>Spring DAO – 用于DAO模式的数据操作。  </li>
<li>Spring JDBC – 用于JDBC和数据的支持。  </li>
<li>Spring ORM – 用于ORM工具的支持，如Hibernate。</li>
<li>Spring Web Module – 用于创建web应用。</li>
<li>Spring MVC – 为创建web应用，web服务等的MVC实现。</li>
</ul>
<h3 id="7-你对面向切面编程的理解是什么？-1"><a href="#7-你对面向切面编程的理解是什么？-1" class="headerlink" title="7. 你对面向切面编程的理解是什么？"></a>7. 你对面向切面编程的理解是什么？</h3><p>企业级应用有一些对不同类型的对象和应用模块的公用横向关注点是合适必要的。例始日志，事务管理，数据验证，身份认证等。<br>在面向切面编程中，应用模块是通过类实现的。如AOP应用模块是通过配置在不同类的方法上的模向关注点Aspects实现的。</p>
<p>AOP从类中分离了横向关注点任务的直接依赖，这在一般的面向对象编程中是不可做到的。例如，你可以把日志从类中分离，但这个类不午不将要调用这些方法记录日志数据（AOP就不需要）。</p>
<h3 id="8-AOP中的连接点（Joinpoint）-切点（Pointcut），通知（Advice），引介（Introduction），切面（Aspect），织入（Weaving）是什么？-1"><a href="#8-AOP中的连接点（Joinpoint）-切点（Pointcut），通知（Advice），引介（Introduction），切面（Aspect），织入（Weaving）是什么？-1" class="headerlink" title="8. AOP中的连接点（Joinpoint）, 切点（Pointcut），通知（Advice），引介（Introduction），切面（Aspect），织入（Weaving）是什么？"></a>8. AOP中的连接点（Joinpoint）, 切点（Pointcut），通知（Advice），引介（Introduction），切面（Aspect），织入（Weaving）是什么？</h3><ul>
<li>连接点（Joinpoint）<br>程序执行的某个特定位置：如类某个方法调用前、调用后、方法抛出异常后。一个类或一段程序代码拥有一些具有边界性质的特定点，这些点中的特定点就称为“连接点”。Spring仅支持方法的连接点，即仅能在方法调用前、方法调用后、方法抛出异常时以及方法调用前后这些程序执行点织入通知。连接点由两个信息确定：第一是用方法表示的程序执行点；第二是用相对点表示的方位。连接点是在应用执行过程中能够插入切面的一个点。</li>
</ul>
<p>以查电表为例子：电力公司为多个住户提供服务，连接点就是每一家的电表所在的位置（类中的方法的调用前、调用后…）。</p>
<ul>
<li>切点（Pointcut）<br>AOP通过“切点”定位特定的连接点。切点和连接点不是一对一的关系，一个切点可以匹配多个连接点。在Spring中，切点通过org.springframework.aop.Pointcut接口进行描述，它使用类和方法作为连接点的查询条件，Spring AOP的规则解析引擎负责切点所设定的查询条件，找到对应的连接点。其实确切地说，不能称之为查询连接点，因为连接点是方法执行前、执行后等包括方位信息的具体程序执行点，而切点只定位到某个方法上，所以如果希望定位到具体连接点上，还需要提供方位信息。</li>
</ul>
<p>电力公司为每一个抄表员都分别指定某一块区域的住户。切点就是划分的区域。</p>
<ul>
<li>通知（Advice）<br>切面的工作被称为通知。是织入到目标类连接点上的一段程序代码。<br>Spring切面可以应用5种类型的通知：<br>-前置通知（Before）：在目标方法被调用之前调用通知功能；<br>-后置通知（After）：在目标方法完成之后调用通知，此时不会关心方 法的输出是什么；<br>-返回通知（After-returning）：在目标方法成功执行之后调用通知；<br>-异常通知（After-throwing）：在目标方法抛出异常后调用通知；<br>-环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调 用之前和调用之后执行自定义的行为。</li>
</ul>
<p>抄表员的本职工作是登记用电量，但他们还需要向电力公司汇报的信息。<br>登记用电量是目标对象，汇报的信息就是通知。 </p>
<ul>
<li>引介（Introduction）  </li>
</ul>
<p>引入允许我们向现有的类添加新方法或属性，是一种特殊的通知。这样，即使一个业务类原本没有实现某个接口，通过AOP的引介功能，我们可以动态地为该业务类添加接口的实现逻辑，让业务类成为这个接口的实现类。</p>
<ul>
<li>切面（Aspect）</li>
</ul>
<p>切面由切点和通知（引介）组成，它既包括了横切逻辑的定义，也包括了连接点的定义。</p>
<p>抄表员的开始一天的工作时，他要知道从哪些区域（切点）收集信息，从而进行汇报（通知）。</p>
<ul>
<li>织入（Weaving）</li>
</ul>
<p>织入是把切面应用到目标对象并创建新的代理对象的过程。<br>AOP有三种织入的方式：<br>a、编译期：切面在目标类编译时被织入。这种方式需要特殊的编译器。AspectJ的织入编译器就是以这种方式织入切面的。<br>b、类加载期：切面在目标类加载到JVM时被织入。这种方式需要特殊的类加载器（ClassLoader），它可以在目标类被引入应用之前增<br>强该目标类的字节码。AspectJ 5的加载时织入（load-time weaving，LTW）就支持以这种方式织入切面。<br>c、运行期：切面在应用运行的某个时刻被织入。一般情况下，在织入切面时，AOP容器会为目标对象动态地创建一个代理对象。Spring<br>AOP就是以这种方式织入切面的。</p>
<h3 id="9-Spring-AOP-和AspectJ-AOP有什么区别？-1"><a href="#9-Spring-AOP-和AspectJ-AOP有什么区别？-1" class="headerlink" title="9. Spring AOP 和AspectJ AOP有什么区别？"></a>9. Spring AOP 和AspectJ AOP有什么区别？</h3><p>AspectJ是面向方向的一个工业标准级实现，而Spring仅实现了一些案例的AOP。Spring AOP 和AspectJ AOP主要有以下区别：</p>
<ul>
<li>相较与AspectJ，Spring AOP使用更简单，因为不需要担心织入（weaving）处理。 </li>
<li>Spring AOP支持AspectJ 注解,因此你熟悉AspectJ，使用Spring AOP也是容易的。</li>
<li>Spring AOP仅支持基于代理的AOP，因此它仅能应用到方法执行连接点上。AspectJ支持所有种类的切点。</li>
<li>Spring AOP缺点之一是它通过Spring上下文仅能应用到beans创建时。</li>
</ul>
<h3 id="10-Spring-IoC容器是什么？-1"><a href="#10-Spring-IoC容器是什么？-1" class="headerlink" title="10. Spring IoC容器是什么？"></a>10. Spring IoC容器是什么？</h3><p>控制反转（Inversion of Control）是在两对象依赖之间实现松耦合的机制。为了实现松耦合和在运行时对象的动态绑定，对象定义依赖是通过其他装配对象被注入的。Spring IoC容器是注入依赖到某个对象和待我们使用的一种程序。</p>
<p>Spring框架的IoC容器类由<code>org.springframework.beans</code>和<code>org.springframework.context</code>包组成。提供给我们多种不同的方式实现对象依赖的解耦。</p>
<p>一些常用的应用上下文实现如下：</p>
<ul>
<li><code>AnnotationConfigApplicationContext</code>: 对于基于注角配置的独立java应用程序。</li>
<li><code>ClassPathXmlApplicationContext</code>: 对于基于XML配置的独立java应用程序。</li>
<li><code>FileSystemXmlApplicationContext</code>: 除xml配置可以在文件系统中的从任何地方加载之外，与<code>ClassPathXmlApplicationContext</code>类似。</li>
<li><code>AnnotationConfigWebApplicationContext</code> 和 <code>XmlWebApplicationContext</code>：对于web应用程序。</li>
</ul>
<h3 id="11-Spring-Bean是什么？-1"><a href="#11-Spring-Bean是什么？-1" class="headerlink" title="11. Spring Bean是什么？"></a>11. Spring Bean是什么？</h3><p>Spring IoC容器初始化任何普通的java类被称为Spring Bean。我们使用Spring ApplicationContext得到Spring Bean实例.</p>
<p>Spring IoC容器管理Spring Bean生命周期，bean作用域并在bean中注入任何所需要的依赖关系。</p>
<h3 id="12-Spring-Bean配置文件的重要性是什么？-1"><a href="#12-Spring-Bean配置文件的重要性是什么？-1" class="headerlink" title="12. Spring Bean配置文件的重要性是什么？"></a>12. Spring Bean配置文件的重要性是什么？</h3><p>我们使用Spring Bean配置文件定义的所有beans将通过Spring Context初始化。在我们创建Spring ApplicationContext的实例时，它将读取spring bean xml文件和初始化所有的实例。一旦ApplicationContext初始化成功，我们就能够使用它得到不同的bean实例了。</p>
<p>除了Spring Bean配置外，该文件还包含Spring MVC拦截器，视图解析器和其他元素，以支持基于注释的配置。</p>
<h3 id="13-把一个类配置成Spring-Bean有些什么不同方法？-1"><a href="#13-把一个类配置成Spring-Bean有些什么不同方法？-1" class="headerlink" title="13. 把一个类配置成Spring Bean有些什么不同方法？"></a>13. 把一个类配置成Spring Bean有些什么不同方法？</h3><p>有以下三种方案配置Spring Bean：</p>
<p><strong>XML 配置</strong>: 这是非常受欢迎的配置方式，我们可以使用在context文件中的元素来配置Spring Bean。例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"myBean"</span> <span class="attr">class</span>=<span class="string">"com.journaldev.spring.beans.MyBean"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>基于Java的配置</strong>：如果仅使用注释，则可以使用@Bean注释配置Spring Bean。 此注释与@Configuration类配合使用即配置成Spring bean。 示例配置如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(value=<span class="string">"com.journaldev.spring.main"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MyService <span class="title">getService</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyService();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>为了从spring context得到这个bean，我们需要使用所以代码段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AnnotationConfigApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(</span><br><span class="line">		MyConfiguration.class);</span><br><span class="line">MyService service = ctx.getBean(MyService.class);</span><br></pre></td></tr></table></figure>
<p><strong>基于注解的配置</strong>：我们还可以使用@Component，@Service，@Repository和@Controller注释与类配置为spring bean。 对于这些，我们需要提供基本的包位置来扫描这些类。 例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.journaldev.spring"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="14-Spring-Bean有些什么不同作用域？-1"><a href="#14-Spring-Bean有些什么不同作用域？-1" class="headerlink" title="14. Spring Bean有些什么不同作用域？"></a>14. Spring Bean有些什么不同作用域？</h3><p>Spring Beans定义了5种作用域。</p>
<p><strong>singleton</strong>: 将为每个容器创建一个Bean的一个实例。 这是Spring bean的默认作用域。 在使用此作用域时，确保spring bean没有共享实例变量，否则可能导致数据不一致性问题，因为它不是线程安全的。<br><strong>prototype</strong>: 每次请求bean时都会创建一个新的实例。<br><strong>request</strong>: 这与prototype作用域相同，但它意在用于Web应用程序。 将为每个HTTP请求创建一个新的bean实例。该作用域仅在基于web的Spring上下文中才有效。该作用域仅在基于web的Spring上下文中才有效。<br><strong>session</strong>: 将为容器的每个HTTP会话创建一个新的bean。该作用域仅在基于web的Spring上下文中才有效。<br><strong>global-session</strong>: 这用于为Portlet应用程序创建全局会话bean。该作用域仅在Portlet上下文中才有效。<br>Spring框架是可扩展的，我们也可以创建我们自己的作用域，但是大多数时候，我们使用框架提供的作用域就够了。</p>
<p>要设置Spring bean作用域，我们可以在bean元素或@Scope注解中使用“scope”属性来进行基于注解的配置。</p>
<p><a name="spring-bean-life-cycle"></a></p>
<h3 id="15-Spring-Bean生命周期是什么？-1"><a href="#15-Spring-Bean生命周期是什么？-1" class="headerlink" title="15. Spring Bean生命周期是什么？"></a>15. Spring Bean生命周期是什么？</h3><p>Spring Beans通过Spring容器被初始化并所有依赖也被注入。在上下文多销毁时，所有初始化的beans也销毁。这在大多数情况下运行良好，但有时我们希望初始化其他资源或进行一些验证，然后才能使我们的bean准备被使用。Spring框架提供了对Spring bean中的初始化后和销毁前方法的支持。</p>
<p>我们可以通过两种方法来实现 - 通过在Spring bean配置中实现InitializingBean和DisposableBean接口或使用init-method和destroy-method属性。有关更多详细信息，请参阅<a href="https://www.journaldev.com/2637/spring-bean-life-cycle" target="_blank" rel="noopener">Spring Bean生命周期方法</a>。</p>
<h3 id="16-在Spring-Bean中怎么获得ServletContext和ServletConfig对象-1"><a href="#16-在Spring-Bean中怎么获得ServletContext和ServletConfig对象-1" class="headerlink" title="16. 在Spring Bean中怎么获得ServletContext和ServletConfig对象"></a>16. 在Spring Bean中怎么获得ServletContext和ServletConfig对象</h3><p>在Spring Bean中有两种方法获得容器指定的对象。</p>
<ol>
<li>实现Spring * Aware接口。对于这些ServletContextAware和ServletConfigAware接口，有关这些aware接口的完整示例，请阅读<a href="https://www.journaldev.com/2637/spring-bean-life-cycle" target="_blank" rel="noopener">Spring Aware Interfaces</a>。   </li>
<li>使用@Autowired注释与类型为ServletContext和ServletConfig的Bean变量。 它们只能在servlet容器的特定环境中工作。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ServletContext servletContext;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="17-Bean装配和-Autowired注解是什么？-1"><a href="#17-Bean装配和-Autowired注解是什么？-1" class="headerlink" title="17. Bean装配和@Autowired注解是什么？"></a>17. Bean装配和@Autowired注解是什么？</h3><p>spring bean依赖注入的处理，在初始化它时被称作spring bean装配。</p>
<p>通常来讲显示的装配所有的bean依赖是最佳实践，但spring框架也支持自动装配。我们也可以使用@Autowired注解和域或方法通过类型的方式自动装配。为了使此注解工作，我们还需要在spring bean配置文件中启用基于注释的配置。 这可以通过上下文来完成：annotation-config元素。</p>
<p>有关@Autowired注释的更多详细信息，请阅读<a href="https://www.journaldev.com/2623/spring-autowired-annotation" target="_blank" rel="noopener">Spring Autowire示例</a>。</p>
<h3 id="18-Spring-Bean自动装配有几种不同类型？-1"><a href="#18-Spring-Bean自动装配有几种不同类型？-1" class="headerlink" title="18. Spring Bean自动装配有几种不同类型？"></a>18. Spring Bean自动装配有几种不同类型？</h3><p>spring框架有4种类型的自动装配：</p>
<ol>
<li>据名称自动装配  </li>
<li>据类型自动装配  </li>
<li>据构造类自动装配  </li>
<li>据@Autowired和@Qualifier注解自动装配<br>Prior to Spring 3.1, autowire by autodetect was also supported that was similar to autowire by constructor or byType. For more details about these options, please read Spring Bean Autowiring.</li>
</ol>
<p>在Spring 3.1之前，据自动探测自动装配也被支持，它类似于构造器或按类型自动装配。有关这些选项的更多详细信息，请参阅<a href="https://www.journaldev.com/2623/spring-autowired-annotation" target="_blank" rel="noopener">Spring Bean自动装配</a>。</p>
<h3 id="19-Spring-Bean是线程安全的吗？-1"><a href="#19-Spring-Bean是线程安全的吗？-1" class="headerlink" title="19. Spring Bean是线程安全的吗？"></a>19. Spring Bean是线程安全的吗？</h3><p>Spring bean的默认作用域是单例的，因此每个上下文只有一个实例。 这意味着所有类级别的变量在任何线程可以更新它，导致数据不一致。 因此，在默认模式下，spring bean不是线程安全的。</p>
<p>但是我们可以改变spring bean的作用域到request, prototype or session，在牺牲性能的基础上，来实现线程安全。 这是一个设计决策，并根据项目要求。</p>
<h3 id="20-在Spring-MVC的Controller是什么？-1"><a href="#20-在Spring-MVC的Controller是什么？-1" class="headerlink" title="20. 在Spring MVC的Controller是什么？"></a>20. 在Spring MVC的Controller是什么？</h3><p>就像MVC设计模式一样，Controller是负责处理所有客户端请求的类，并将它们分发到配置的资源去处理它。在Spring MVC中，org.springframework.web.servlet.DispatcherServlet是基于spring bean配置初始化上下文的前端控制器类。</p>
<p>Controller类负责根据请求映射来处理不同类型的客户端请求。 我们可以使用@Controller注解创建一个控制器类。 通常它与@RequestMapping注释一起使用来指定特定URI映射的处理程序方法。</p>
<h3 id="21-在Spring中-Component-Repository-和-Service注解有什么区别？-1"><a href="#21-在Spring中-Component-Repository-和-Service注解有什么区别？-1" class="headerlink" title="21. 在Spring中 @Component, @Repository 和 @Service注解有什么区别？"></a>21. 在Spring中 @Component, @Repository 和 @Service注解有什么区别？</h3><p><code>@Component</code>注解用于指示该类是一个组件。 当使用基于注解的配置时，这些类将自动检测并配置为bean被使用。</p>
<p><code>@Controller</code>注解是一种特定类型的组件，用于MVC应用程序，大多与@RequestMapping注解一起使用。</p>
<p><code>@Repository</code>注解用于指示组件用作存储库，以及用于存储/检索/搜索数据的机制。 我们可以使用DAO模式实现类应用此注解。</p>
<p><code>@Service</code>注解用于表示该类是一个服务。 通常会提供一些服务的业务门面类使用该注解。</p>
<p>为了类可以自动检测到，我们可以使用任何以上注解，但不同的类型的注解被提供后，你可以轻松区分类的意图。</p>
<h3 id="22-DispatcherServlet-和-ContextLoaderListener是什么？-1"><a href="#22-DispatcherServlet-和-ContextLoaderListener是什么？-1" class="headerlink" title="22. DispatcherServlet 和 ContextLoaderListener是什么？"></a>22. DispatcherServlet 和 ContextLoaderListener是什么？</h3><p><code>DispatcherServlet</code>是Spring MVC应用程序中的前台控制器，它加载spring bean配置文件并初始化配置的所有bean。 如果注解已启用，它还会扫描程序包和配置使用<code>@Component</code>，<code>@Controller</code>，<code>@Repository</code>或<code>@Service</code>注解的任何bean。</p>
<p><code>ContextLoaderListener</code>是启动和关闭Spring的根<code>WebApplicationContext</code>的侦听器。 重要的功能是将<code>ApplicationContext</code>的生命周期与<code>ServletContext</code>的生命周期结合起来，并自动创建<code>ApplicationContext</code>。 我们可以跨越不同spring上下文中,使用它定义共享bean。</p>
<h3 id="23-在Spring中的ViewResolver是什么？-1"><a href="#23-在Spring中的ViewResolver是什么？-1" class="headerlink" title="23. 在Spring中的ViewResolver是什么？"></a>23. 在Spring中的ViewResolver是什么？</h3><p><code>ViewResolver</code>实现被用于按名称解析视图页面。 通常我们在spring bean配置文件中配置它。 例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>InternalResourceViewResolver</code>是<code>ViewResolver</code>接口的实现之一，我们通过bean属性提供了view pages目录和后缀位置。 因此，如果控制器处理程序方法返回“home”，则视图解析器将使用位于/WEB-INF/views/home.jsp的视图页面。</p>
<h3 id="24-MultipartResolver是什么？什么时候使用？-1"><a href="#24-MultipartResolver是什么？什么时候使用？-1" class="headerlink" title="24. MultipartResolver是什么？什么时候使用？"></a>24. MultipartResolver是什么？什么时候使用？</h3><p><code>MultipartResolver</code>接口用于上传文件 - <code>CommonsMultipartResolver</code>和<code>StandardServletMultipartResolver</code>是由spring框架提供的用于文件上传的两个实现。 默认情况下，没有配置多部分解析器，但是要使用它们来上传文件，我们需要在spring bean配置中定义一个名为“multipartResolver”的bean，其类型为MultipartResolver。</p>
<p>一旦配置完成后，任何多部分请求将由配置的<code>MultipartResolver</code>解析，并传递一个包装的<code>HttpServletRequest</code>。 然后在控制器类中使用它来获取文件并处理它。 这里提供一个完整的例子，请阅读<a href="https://www.journaldev.com/2573/spring-mvc-file-upload-example-single-multiple-files" target="_blank" rel="noopener">Spring MVC文件上传示例</a>。</p>
<h3 id="25-Spring-MVC框架怎样处理异常？-1"><a href="#25-Spring-MVC框架怎样处理异常？-1" class="headerlink" title="25. Spring MVC框架怎样处理异常？"></a>25. Spring MVC框架怎样处理异常？</h3><p>Spring MVC框架提供了以下方法来帮助我们实现强大的异常处理。</p>
<ol>
<li><strong>基于控制器</strong> - 我们可以在控制器类中定义异常处理程序方法。 我们需要的是使用@ExceptionHandler注解来注解这些方法。</li>
<li><strong>全局异常处理程序</strong> - 异常处理是一个横切关注的问题，Spring提供了<code>@ControllerAdvice</code>注解，让我们可以使用任何类来定义我们的全局异常处理程序。  </li>
<li><strong><code>HandlerExceptionResolver</code>实现</strong> - 对于一般异常，大多数时候我们提供静态页面。 Spring Framework提供了<code>HandlerExceptionResolver</code>接口，我们可以实现这个接口来创建全局异常处理程序。 这种额外的方法来定义全局异常处理程序的原因是Spring框架还提供了我们可以在spring bean配置文件中定义的默认实现类，以获得Spring框架异常处理的好处。</li>
</ol>
<p>有关完整的示例，请参阅<a href="https://www.journaldev.com/2651/spring-mvc-exception-handling-controlleradvice-exceptionhandler-handlerexceptionresolver" target="_blank" rel="noopener">Spring异常处理</a>示例。</p>
<h3 id="26-在Java程序中怎样创建ApplicationContext？-1"><a href="#26-在Java程序中怎样创建ApplicationContext？-1" class="headerlink" title="26. 在Java程序中怎样创建ApplicationContext？"></a>26. 在Java程序中怎样创建ApplicationContext？</h3><p>在独立的java程序中创建<code>ApplicationContext</code>有以下几种方法。</p>
<ol>
<li><strong><code>AnnotationConfigApplicationContext</code></strong>：如果我们在独立的Java应用程序中使用Spring，并使用注解进行配置，那么我们可以使用它来初始化容器并获取bean对象。  </li>
<li><strong><code>ClassPathXmlApplicationContext</code></strong>：如果我们在独立应用程序中有spring bean配置xml文件，那么我们可以使用此类来加载文件并获取容器对象。  </li>
<li><strong><code>FileSystemXmlApplicationContext</code></strong>：类似于<code>ClassPathXmlApplicationContext</code>，除了可以从文件系统中的任何位置之外的任何地方加载xml配置文件。 </li>
</ol>
<h3 id="27-能有多个Spring配置文件吗？-1"><a href="#27-能有多个Spring配置文件吗？-1" class="headerlink" title="27. 能有多个Spring配置文件吗？"></a>27. 能有多个Spring配置文件吗？</h3><p>对于Spring MVC应用程序，我们可以通过contextConfigLocation定义多个Spring上下文配置文件。 该位置字符串可以由多个位置组成，并以任意数量的逗号和空格分隔。 例如;<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/appServlet/servlet-context.xml,/WEB-INF/spring/appServlet/servlet-jdbc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>我们还可以定义多个根级Spring配置，并通过上下文参数加载它们。 例如;<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/root-context.xml /WEB-INF/spring/root-security.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>另一个选择是在上下文配置文件中使用import元素来导入其他配置，例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans:import</span> <span class="attr">resource</span>=<span class="string">"spring-jdbc.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="28-ContextLoaderListener是什么？-1"><a href="#28-ContextLoaderListener是什么？-1" class="headerlink" title="28. ContextLoaderListener是什么？"></a>28. ContextLoaderListener是什么？</h3><p>ContextLoaderListener是用于加载根上下文的侦听器类，并定义将对所有其他上下文可见的spring bean配置。 它在web.xml文件中配置为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/root-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="29-为了创建Spring-MVC应用，至少需要配置什么？-1"><a href="#29-为了创建Spring-MVC应用，至少需要配置什么？-1" class="headerlink" title="29. 为了创建Spring MVC应用，至少需要配置什么？"></a>29. 为了创建Spring MVC应用，至少需要配置什么？</h3><p>要创建一个简单的Spring MVC应用程序，我们需要执行以下任务。</p>
<ol>
<li>在项目中添加spring-context和spring-webmvc依赖项。</li>
<li>在web.xml文件中配置DispatcherServlet，以通过spring容器处理请求。</li>
<li>Spring bean配置文件来定义bean，如果使用注解，那么必须在这里配置。 此外，我们还需要为视图页面配置视图解析器。</li>
<li>控制器类与请求映射定义为处理客户端请求。<br>以上步骤应该足以创建一个简单的Spring MVC Hello World应用程序。</li>
</ol>
<p><a name="spring-mvc-architecture"></a></p>
<h3 id="30-相对与MVC架构，你对Spring-MVC框架的理解是怎样的？-1"><a href="#30-相对与MVC架构，你对Spring-MVC框架的理解是怎样的？-1" class="headerlink" title="30. 相对与MVC架构，你对Spring MVC框架的理解是怎样的？"></a>30. 相对与MVC架构，你对Spring MVC框架的理解是怎样的？</h3><p>正如名称所示，Spring MVC建立在Model-View-Controller架构之上。 DispatcherServlet是Spring MVC应用程序中的前端控制器，负责处理所有传入的请求并将其委托给不同的控制器处理程序方法。</p>
<p>模型可以是Spring框架中的任何Java Bean，就像任何其他MVC框架Spring一样，提供了将表单数据自动绑定到java bean。 我们可以将模型bean设置为在视图页面中使用的属性。</p>
<p>查看页面可以是JSP，静态HTML等，视图解析器负责查找正确的视图页面。 一旦查看页面被识别到，控制将返回给DispatcherServlet控制器。 DispatcherServlet负责呈现视图，并向客户端返回最终响应。</p>
<h3 id="31-Spring-MVC应用怎样实现本地化？-1"><a href="#31-Spring-MVC应用怎样实现本地化？-1" class="headerlink" title="31. Spring MVC应用怎样实现本地化？"></a>31. Spring MVC应用怎样实现本地化？</h3><p>Spring通过资源包为本地化或i18n提供了极好的支持。 使我们的应用程序本地化所需的基本步骤是：</p>
<ol>
<li>为不同的区域设置创建消息资源束，如messages_en.properties，messages_fr.properties等。</li>
<li>在<code>ResourceBundleMessageSource</code>或<code>ReloadableResourceBundleMessageSource</code>类型的spring bean配置文件中定义messageSource bean。</li>
<li><p>要更改区域设置支持，请定义类型为CookieLocaleResolver的localeResolver bean并配置LocaleChangeInterceptor拦截器。<br>示例配置可以如下所示：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.context.support.ReloadableResourceBundleMessageSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"basename"</span> <span class="attr">value</span>=<span class="string">"classpath:messages"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"localeResolver"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.CookieLocaleResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"defaultLocale"</span> <span class="attr">value</span>=<span class="string">"en"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"cookieName"</span> <span class="attr">value</span>=<span class="string">"myAppLocaleCookie"</span>&gt;</span><span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"cookieMaxAge"</span> <span class="attr">value</span>=<span class="string">"3600"</span>&gt;</span><span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.LocaleChangeInterceptor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"paramName"</span> <span class="attr">value</span>=<span class="string">"locale"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在具有键名称的视图页面中使用spring:message元素，DispatcherServlet选择相应的值，并将页面呈现在相应的区域设置中，并作为响应返回。</p>
</li>
</ol>
<p>有关完整的示例，请阅读<a href="https://www.journaldev.com/2610/spring-mvc-internationalization-i18n-and-localization-l10n-example" target="_blank" rel="noopener">Spring本地化</a>示例 。</p>
<h3 id="32-使用Spring怎样创建Restful-Web服务并返回JSON？-1"><a href="#32-使用Spring怎样创建Restful-Web服务并返回JSON？-1" class="headerlink" title="32. 使用Spring怎样创建Restful Web服务并返回JSON？"></a>32. 使用Spring怎样创建Restful Web服务并返回JSON？</h3><p>我们可以使用Spring Framework创建返回JSON数据的Restful Web服务。 Spring提供与<a href="https://www.journaldev.com/2324/jackson-json-java-parser-api-example-tutorial" target="_blank" rel="noopener">Jackson JSON</a> API的集成，我们可以使用它在安静的Web服务中发送JSON响应。</p>
<p>我们需要执行以下步骤来配置我们的Spring MVC应用程序以发送JSON响应：</p>
<ol>
<li><p>添加Jackson JSON依赖项，如果您使用Maven，可以使用以下代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Jackson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.databind-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在Spring bean配置文件中配置RequestMappingHandlerAdapter bean，并将messageConverters属性设置为MappingJackson2HttpMessageConverter bean。 样品配置将是：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Configure to plugin JSON as request and response in method handler --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">beans:ref</span> <span class="attr">bean</span>=<span class="string">"jsonMessageConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">beans:list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Configure bean to convert JSON to POJO and vice versa --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"jsonMessageConverter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在控制器处理程序方法中，使用@ResponseBody注释返回Object作为响应。 示例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = EmpRestURIConstants.GET_EMP, method = RequestMethod.GET)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Employee <span class="title">getEmployee</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> empId) </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"Start getEmployee. ID="</span>+empId);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> empData.get(empId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>您可以通过任何API调用其余服务，但是如果要使用Spring，那么我们可以使用RestTemplate类来轻松实现。<br>有关一个完整的例子，请阅读<a href="https://www.journaldev.com/2552/spring-rest-example-tutorial-spring-restful-web-services" target="_blank" rel="noopener">Spring Restful Webservice</a>示例 。</p>
</li>
</ol>
<h3 id="33-你使用过哪些重要的Spring注解？-1"><a href="#33-你使用过哪些重要的Spring注解？-1" class="headerlink" title="33. 你使用过哪些重要的Spring注解？"></a>33. 你使用过哪些重要的Spring注解？</h3><p>我在项目中使用的一些Spring注解是：</p>
<p><strong>@Controller</strong> - 用于Spring MVC项目中的控制器类。<br><strong>@RequestMapping</strong> - 用于在控制器处理程序方法中配置URI映射。 这是一个非常重要的注释。<br><strong>@ResponseBody</strong> - 用于发送Object作为响应，通常用于发送XML或JSON数据作为响应。<br><strong>@PathVariable</strong> - 用于将动态值从URI映射到处理程序方法参数。<br><strong>@Autowired</strong> - 用于spring bean的自动装配依赖。<br><strong>@Qualifier</strong> - 与@Autowired注解一起使用，以避免多个Bean类型的实例存在混淆。<br><strong>@Service</strong> - 用于服务类。<br><strong>@Scope</strong> - 用于配置spring bean的作用域。<br><strong>@Configuration</strong>， <strong>@ComponentScan</strong>和<strong>@Bean</strong> - 用于基于Java的配置。<br>用于配置切面和通知的AspectJ注解， <strong>@Aspect</strong> ， <strong>@Before</strong> ， <strong>@After</strong> ， <strong>@Around</strong> ， <strong>@Pointcut</strong>等。</p>
<h3 id="34-我们可以发送一个Object作为Controller-handler方法的响应吗？-1"><a href="#34-我们可以发送一个Object作为Controller-handler方法的响应吗？-1" class="headerlink" title="34. 我们可以发送一个Object作为Controller handler方法的响应吗？"></a>34. 我们可以发送一个Object作为Controller handler方法的响应吗？</h3><p>可以，我们可以使用@ResponseBody注解。 这就是我们如何在restful的Web服务中发送基于JSON或XML的响应。</p>
<h3 id="35-Spring-MVC应用怎样上传文件？-1"><a href="#35-Spring-MVC应用怎样上传文件？-1" class="headerlink" title="35. Spring MVC应用怎样上传文件？"></a>35. Spring MVC应用怎样上传文件？</h3><p>Spring提供内置的支持，可通过MultipartResolver接口实现上传文件。 它非常易于使用，只需要配置更改才能使其正常工作。 显然，我们需要编写控制器处理程序方法来处理传入的文件并进行处理。 有关完整的示例，请参阅<a href="https://www.journaldev.com/2573/spring-mvc-file-upload-example-single-multiple-files" target="_blank" rel="noopener">Spring文件上传</a>示例 。</p>
<h3 id="36-Spring-Web-MVC架构怎样验证表单数据？-1"><a href="#36-Spring-Web-MVC架构怎样验证表单数据？-1" class="headerlink" title="36. Spring Web MVC架构怎样验证表单数据？"></a>36. Spring Web MVC架构怎样验证表单数据？</h3><p>Spring支持基于JSR-303注释的验证，并提供我们可以实现的Validator接口来创建我们自己的自定义验证器。 对于使用基于JSR-303的验证，我们需要使用所需的验证来注释bean变量。</p>
<p>对于自定义验证器实现，我们需要在controller类中进行配置。 有关完整的示例，请参阅<a href="https://www.journaldev.com/2668/spring-validation-example-mvc-validator" target="_blank" rel="noopener">Spring MVC表单验证</a>示例 。</p>
<h3 id="37-Spring-MVC拦截器（Interceptor）是什么？怎样使用？-1"><a href="#37-Spring-MVC拦截器（Interceptor）是什么？怎样使用？-1" class="headerlink" title="37. Spring MVC拦截器（Interceptor）是什么？怎样使用？"></a>37. Spring MVC拦截器（Interceptor）是什么？怎样使用？</h3><p>Spring MVC拦截器就像Servlet过滤器，允许我们拦截客户端请求并处理它。 我们可以在三个地方拦截客户端请求 - <strong>preHandle</strong> ， <strong>postHandle</strong>和<strong>afterCompletion</strong> 。</p>
<p>我们可以通过实现HandlerInterceptor接口或扩展抽象类HandlerInterceptorAdapter来创建spring拦截器。</p>
<p>我们需要在spring bean配置文件中配置拦截器。 我们可以定义拦截器来拦截所有的客户端请求，也可以为特定的URI映射进行配置。 有关详细的示例，请参考<a href="https://www.journaldev.com/2676/spring-mvc-interceptor-example-handlerinterceptor-handlerinterceptoradapter" target="_blank" rel="noopener">Spring MVC拦截器</a>示例 。</p>
<h3 id="38-Spring-JdbcTemplate类是什么？怎样使用？-1"><a href="#38-Spring-JdbcTemplate类是什么？怎样使用？-1" class="headerlink" title="38. Spring JdbcTemplate类是什么？怎样使用？"></a>38. Spring JdbcTemplate类是什么？怎样使用？</h3><p>Spring Framework提供与JDBC API的良好集成，并提供JdbcTemplate实用程序类，我们可以使用它来避免数据库操作逻辑（如打开/关闭连接，ResultSet，PreparedStatement等）的bolier-plate代码。</p>
<p>对于JdbcTemplate示例，请参考<a href="https://www.journaldev.com/2593/spring-jdbc-example" target="_blank" rel="noopener">Spring JDBC</a>示例 。</p>
<h3 id="39-Spring-Web应用中怎样使用Tomcat-JNDI数据资源？-1"><a href="#39-Spring-Web应用中怎样使用Tomcat-JNDI数据资源？-1" class="headerlink" title="39. Spring Web应用中怎样使用Tomcat JNDI数据资源？"></a>39. Spring Web应用中怎样使用Tomcat JNDI数据资源？</h3><p>对于使用servlet容器配置的JNDI DataSource，我们需要在spring bean配置文件中进行配置，然后将其注入spring beans作为依赖关系。 然后我们可以使用它与JdbcTemplate来执行数据库操作。</p>
<p>示例配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"dbDataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jndi.JndiObjectFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"jndiName"</span> <span class="attr">value</span>=<span class="string">"java:comp/env/jdbc/MyLocalDB"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>有关完整的例子，请参考<a href="https://www.journaldev.com/2597/spring-datasource-jndi-with-tomcat-example" target="_blank" rel="noopener">Spring Tomcat JNDI</a>示例 。</p>
<h3 id="40-在Spring中怎样实现事务管理？-1"><a href="#40-在Spring中怎样实现事务管理？-1" class="headerlink" title="40. 在Spring中怎样实现事务管理？"></a>40. 在Spring中怎样实现事务管理？</h3><p>Spring框架通过声明式事务管理以及编程式事务管理来提供事务管理支持。 声明式事务管理被广泛使用，因为它在大多数情况下易于使用和工作。</p>
<p>我们使用@Transactional注释的注释方法进行声明式事务管理。 我们需要在Spring bean配置文件中为DataSource配置事务管理器。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="41-Spring-DAO是什么？-1"><a href="#41-Spring-DAO是什么？-1" class="headerlink" title="41. Spring DAO是什么？"></a>41. Spring DAO是什么？</h3><p>提供Spring DAO支持，以一致和简单的方式处理JDBC，Hibernate等数据访问技术。 例如，对于各自的技术，我们有<code>JdbcDaoSupport</code> ， <code>HibernateDaoSupport</code> ， <code>JdoDaoSupport</code>和<code>JpaDaoSupport</code> 。</p>
<p>Spring DAO还提供了异常层次结构的一致性，我们不需要捕获特定的异常。</p>
<h3 id="42-怎样集成Spring和Hibernate框架？-1"><a href="#42-怎样集成Spring和Hibernate框架？-1" class="headerlink" title="42. 怎样集成Spring和Hibernate框架？"></a>42. 怎样集成Spring和Hibernate框架？</h3><p>我们可以使用Spring ORM模块来集成Spring和Hibernate框架，如果您正在使用Hibernate 3+，SessionFactory提供当前会话，那么您应该避免使用<code>HibernateTemplate</code>或<code>HibernateDaoSupport</code>类，并更好地使用依赖注入的DAO模式进行集成。</p>
<p>Spring ORM还提供对使用Spring声明性事务管理的支持，所以您应该利用这一点，而不是使用hibernate的锅炉代码进行事务管理。</p>
<p>为了更好地理解，您应该请阅读以下教程：</p>
<p><a href="https://www.journaldev.com/3524/spring-hibernate-integration-example-tutorial" target="_blank" rel="noopener">Spring Hibernate集成</a>示例<br><a href="https://www.journaldev.com/3531/spring-mvc-hibernate-mysql-integration-crud-example-tutorial" target="_blank" rel="noopener">Spring MVC Hibernate集成</a>示例</p>
<h3 id="43-Spring-Security是什么？-1"><a href="#43-Spring-Security是什么？-1" class="headerlink" title="43. Spring Security是什么？"></a>43. Spring Security是什么？</h3><p>Spring Security框架关注的焦点是在java应用程序中提供身份验证和授权。 它解决了大多数常见的安全漏洞问题，如CSRF攻击。</p>
<p>通过使用注解,如@EnableWebSecurity ，在Web应用程序中使用Spring Security是很有好处的且易于使用。 您应该通过以下文章来了解如何使用Spring Security框架。</p>
<p><a href="https://www.journaldev.com/2715/spring-security-example-tutorial" target="_blank" rel="noopener">Servlet Web应用程序中的Spring Security</a><br><a href="https://www.journaldev.com/2736/spring-security-example-userdetailsservice" target="_blank" rel="noopener">Spring MVC和Spring Security集成</a>示例</p>
<h3 id="44-怎样注入一个java-util-Properties到Spring-Bean？-1"><a href="#44-怎样注入一个java-util-Properties到Spring-Bean？-1" class="headerlink" title="44. 怎样注入一个java.util.Properties到Spring Bean？"></a>44. 怎样注入一个java.util.Properties到Spring Bean？</h3><p>我们需要定义propertyConfigurer bean，该bean将从给定的属性文件加载属性。 然后我们可以使用Spring EL支持将属性注入其他bean依赖关系。 例如;<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"org.springframework.context.support.PropertySourcesPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/application.properties"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.journaldev.spring.EmployeeDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxReadResults"</span> <span class="attr">value</span>=<span class="string">"$&#123;results.read.max&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果您使用注解来配置spring bean，则可以像下面那样注入属性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;maxReadResults&#125;"</span>) </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxReadResults;</span><br></pre></td></tr></table></figure></p>
<h3 id="45-Spring框架使用哪些设计模式？-1"><a href="#45-Spring框架使用哪些设计模式？-1" class="headerlink" title="45. Spring框架使用哪些设计模式？"></a>45. Spring框架使用哪些设计模式？</h3><p>Spring框架正在使用很多设计模式，其中一些常见的是：</p>
<ol>
<li>单例模式：创建具有默认范围的bean。</li>
<li>工厂模式 ：Bean Factory类</li>
<li>原型模式 ：Bean作用域</li>
<li>适配器模式 ：Spring Web和Spring MVC</li>
<li>代理模式 ：Spring Aspect面向编程支持</li>
<li>模板方法模式 ：JdbcTemplate，HibernateTemplate等</li>
<li>前端控制器：Spring MVC DispatcherServlet</li>
<li>数据访问对象：Spring DAO支持</li>
<li>依赖注入和面向方面的编程</li>
</ol>
<h3 id="46-Spring框架有些什么最佳实践？-1"><a href="#46-Spring框架有些什么最佳实践？-1" class="headerlink" title="46. Spring框架有些什么最佳实践？"></a>46. Spring框架有些什么最佳实践？</h3><p>Spring Framework的一些最佳实践是：</p>
<ol>
<li>避免模​​式引用中的版本号，以确保我们有最新的配置。</li>
<li>根据spring-jdbc.xml，spring-security.xml等关注的问题来分隔spring bean配置。</li>
<li>对于在Spring MVC中的多个上下文中使用的spring bean，在根上下文中创建它们并使用listener进行初始化。</li>
<li>尽可能多地配置bean依赖关系，尽量避免自动装配。</li>
<li>对于应用程序级属性，最佳方法是创建一个属性文件，并在spring bean配置文件中读取它。</li>
<li>对于较小的应用程序，注解是有用的，但对于较大的应用程序注解可能会变得很痛苦。 如果我们在xml文件中有所有配置，维护它将会更容易。</li>
<li>为组件使用正确的注解，轻松了解其意图。 对于服务，使用@Service和DAO bean使用@Repository。</li>
<li>Spring框架有很多模块，使用你需要的。 删除通过Spring Tool Suite模板创建项目时添加的所有额外的依赖项。</li>
<li>如果您正在使用Aspects，请确保连接点范围尽可能的窄，以避免对不需要的方法的发送通知。 考虑更容易使用的自定义注解，可以避免任何问题。</li>
<li>当有实际利益时，使用依赖注入，只是为了松散耦合而不使用它，因为它更难维护。</li>
</ol>
<p>这就是Spring Framework面试的问题。 我希望这些问题能帮助您进行Java EE面试。 一旦有新的面试问题我将即时更新！</p>
<p><a href="https://www.journaldev.com/2696/spring-interview-questions-and-answers" target="_blank" rel="noopener">原文</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java,spring,interview,面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot热部署：spring-boot-devtools]]></title>
      <url>/2020/01/14/spring-hot-deploy/</url>
      <content type="html"><![CDATA[<p>spring-boot-devtools 是一个为开发者服务的一个模块，其中最重要的功能就是热部署。</p>
<a id="more"></a>
<p>当我们修改了classpath下的文件（包括类文件、属性文件、页面等）时，会重新启动应用（由于其采用的双类加载器机制，这个启动会非常快，另外也可以选择使用jrebel）。</p>
<p>spring-boot-devtools使用了两个类加载器来实现重启（restart）机制：</p>
<p>base类加载器（base ClassLoader）, restart类加载器（restart ClassLoader）。</p>
<ul>
<li>base ClassLoader：用于加载不会改变的jar（eg.第三方依赖的jar）</li>
<li>restart ClassLoader：用于加载我们正在开发的jar（eg.整个项目里我们自己编写的类）。当应用重启后，原先的restart ClassLoader被丢掉、重新new一个restart ClassLoader来加载这些修改过的东西，而base ClassLoader却不需要动一下。这就是devtools重启速度快的原因。</li>
</ul>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<h1 id="使用devtools，只需要添加其依赖即可"><a href="#使用devtools，只需要添加其依赖即可" class="headerlink" title="使用devtools，只需要添加其依赖即可 :"></a>使用devtools，只需要添加其依赖即可 :</h1><p>使用devtools，需要添加其依赖即可 :</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>master_bak</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">=======</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- fork:如果没有该配置，这个devtools不会起作用，即应用不会restart --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; master_bak</span><br></pre></td></tr></table></figure>
<p>默认情况下，<br><code>/META-INF/maven，/META-INF/resources，/resources，/static，/templates，/public</code><br>这些文件夹下的文件修改不会使应用重启，但是会重新加载（devtools内嵌了一个LiveReload server，当资源发生改变时，浏览器刷新）。</p>
<p>另外，使用Intellij的可能会遇到这个问题，即使项目使用了spring-boot-devtools，修改了类或者html、js等，idea还是不会自动重启，非要手动去make一下或者重启，就更没有使用热部署一样。出现这种情况，并不是你的配置问题，其根本原因是因为Intellij IEDA和Eclipse不同，Eclipse设置了自动编译之后，修改类它会自动编译，而IDEA在非RUN或DEBUG情况下才会自动编译（前提是你已经设置了Auto-Compile）。</p>
<p>首先，IDEA设置里面Setting-&gt;Builder,Excution,Deployment-&gt;Compiler的Make project automatically，把这个选项打勾</p>
<p>然后 Shift+Ctrl+Alt+/(Mac: Shift+Command+Alt+/)，选择Registry<br>把compiler.automake.allow.when.app.running 打勾</p>
<p>OK了，重启一下项目，然后改一下类里面的内容，IDEA就会自动去make了。</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java,spring,spring boot,spring-boot-devtools,热部署 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux常用命令]]></title>
      <url>/2020/01/14/linux-usefully-command/</url>
      <content type="html"><![CDATA[<p>收集平时常用的一些linux命令。<br><a id="more"></a></p>
<h1 id="lt-lt-lt-lt-lt-lt-lt-HEAD"><a href="#lt-lt-lt-lt-lt-lt-lt-HEAD" class="headerlink" title="&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</h1><h2 id="ssh几个超时参数"><a href="#ssh几个超时参数" class="headerlink" title="ssh几个超时参数"></a>ssh几个超时参数</h2><h3 id="客户端方案"><a href="#客户端方案" class="headerlink" title="客户端方案"></a>客户端方案</h3><p>Host *<br>    ServerAliveInterval 60</p>
<h3 id="服务器方案"><a href="#服务器方案" class="headerlink" title="服务器方案"></a>服务器方案</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>#ClientAliveInterval 0改为ClientAliveInterval 500     （每500秒往客户端发送会话请求，保持连接）</p>
<p>#ClientAliveCountMax 3      （去掉注释即可，3表示重连3次失败后，重启SSH会话）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd   <span class="comment">#重启sshd服务</span></span><br></pre></td></tr></table></figure></p>
<p><a href="http://www.361way.com/ssh-autologout/4679.html" target="_blank" rel="noopener">http://www.361way.com/ssh-autologout/4679.html</a></p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>master_bak</p>
<h2 id="更改密码"><a href="#更改密码" class="headerlink" title="更改密码"></a>更改密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  passwd</span><br></pre></td></tr></table></figure>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h1 id="lt-lt-lt-lt-lt-lt-lt-HEAD-1"><a href="#lt-lt-lt-lt-lt-lt-lt-HEAD-1" class="headerlink" title="&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</h1><h2 id="查看大文本"><a href="#查看大文本" class="headerlink" title="查看大文本"></a>查看大文本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  more filename</span><br></pre></td></tr></table></figure>
<h2 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ more /proc/version</span><br><span class="line">Linux version 3.10.0-514.26.2.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-11) (GCC) ) <span class="comment">#1 SMP Tue Jul 4 15:04:05 UTC 2017</span></span><br><span class="line"></span><br><span class="line">$ more /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.2.1511 (Core)</span><br><span class="line"></span><br><span class="line">$ uname -a</span><br><span class="line">Linux izbp1hsmr9thgc19em3gl8z 3.10.0-514.26.2.el7.x86_64 <span class="comment">#1 SMP Tue Jul 4 15:04:05 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>
<h2 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://mirrors.163.com/centos/7/os/x86_64/Packages/iptables-1.4.21-33.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">$ vim /etc/sysconfig/iptables-config</span><br><span class="line"></span><br><span class="line">$ systemctl restart iptables</span><br></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>master_bak</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux,linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM，JRE和JDK]]></title>
      <url>/2020/01/14/jvm-jre-jdk/</url>
      <content type="html"><![CDATA[<p>不要只从编程语言的角度来看Java，这只会看到“冰山一角”<br><a id="more"></a></p>
<p>这可以用Java SE Technologies中的图来印证： </p>
<p><img src="/gallery/java-se-platform.jpg" alt="Java SE platform" title="Java SE platform"></p>
<p>如果你安装JDK，就会安装这全部的东西，而Java Language只是最左上角一小部份。 </p>
<h2 id="什么是JVM？"><a href="#什么是JVM？" class="headerlink" title="什么是JVM？"></a>什么是JVM？</h2><p>在上图中，Platforms表示Solaris、Linux、Windows各种作业系统平台，在这些平台上架构了Java虚拟机，也就是JVM，JVM让Java可以跨平台，但是跨平台是怎么一回事？在这之前，你得先了解不能跨平台是怎么一回事。 </p>
<p>对于电脑而言，只认识一种语言，也就是0、1序列组成的机器指令。 当你使用C/C++等高阶语言编写程序时，其实这些语言，是比较贴近人类可阅读的文法，也就是比较接近英语文法的语言。 这是为了方便人类阅读及编写，电脑其实看不懂C/C++这类语言，为了将C/C++翻译为0、1序列组成的机器指令，你必须有个翻译员，担任翻译员工作的就是编译器（Compiler）。 </p>
<p>问题在于，每个平台认识的0、1序列并不一样。 某个指令在Windows上也许是0101，在Linux下也许是1010，因此必须使用不同的编译器为不同平台编译出可执行的机器码，在Windows平台上编译好的程序，不能直接拿到Linux等其它平台执行，也就是说，你的应用程序无法达到「编译一次，到处执行」的跨平台目的。 </p>
<p>Java是个高级语言，要让电脑执行你编写的程序，也得通过编译器的翻译。 不过Java在编译时，并不直接编译为相依于某平台的0、1序列，而是翻译为中介格式的字节码（Byte code）。 </p>
<p>Java源码扩展名为<em>.java ，经过编译器翻译后为扩展名</em>.class的字节码。 如果想要执行字节码文件，目标平台必须安装JVM（Java Virtual Machine）。 JVM会将字节码翻译为相应平台的机器码。 </p>
<p>不同的平台必须安装专属该平台的JVM。 这就好比你讲中文（<em>.java），Java编译器帮你翻译为英语（</em>.class），之后这份英语文件，到各国家之后，再由当地看得懂英文的人（JVM）翻译为当地语言（机器码）。 </p>
<p>所以 <strong>JVM担任的职责之一就是当地翻译员，将字节码文档翻译为当前平台看得懂的0、1序列，有了JVM，你的Java程序就可以达到「编译一次，到处到处执行」的跨平台目的</strong>。 除了了解JVM具有让Java程序跨平台的重要任务之外，编写Java程序时，对JVM的重要认知就是： </p>
<p>对Java程序而言，只认识一种作业系统，这个系统叫JVM，字节码文件（扩展名为.class的文件）就是JVM的可执行文件。 </p>
<p>Java程序理想上，并不用理会真正执行于哪个平台，只要知道如何执行于JVM就可以了，至于JVM实际上如何与底层平台作沟通，则是JVM自己的事！ 由于JVM实际上就相当于Java程序的作业系统，JVM就负责了Java程序的各种资源管理。 </p>
<h2 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h2><p>之后会学到的第一个Java程序，其中会有这么一段程序码： </p>
<p>System.out.println(“Hello World”);</p>
<p>先前曾经谈过，Java是个标准，System、out、println这些名称，都是标准中所规范的名称，实际上必须要有人根据标准编写出System.java，编译为System.class，如此你才能在编写第一个Java程序时，使用System类别（Class）上out物件（Object）的println()方法（Method）。 </p>
<p>谁来实现System.java？ 谁来编译为.class？ 可能是Oracle、IBM、Apache，无论如何，这些厂商必须根据相关的JSR标准文件，将标准程序库实现出来，如此你编写的第一个Java程序，在Oracle、IBM、Apache等厂商实现的JVM上运行时，引用如System这些标准API，你的第一个Java程序，才可能轻易地运行在不同的平台。 </p>
<p>在上图中右边可以看到Java SE API ，涵盖了各式常用的程序库，像是通用的群集（Collection）、输入输出、连接数据库的JDBC、编写窗口程序的AWT与Swing等，这些都是在各个JSR标准文件规范之中， </p>
<p><strong>Java Runtime Environment就是Java执行环境，简称JRE， 包括了Java SE API与JVM</strong>。只要你使用Java SE API中的程序库，在安装有JRE的电脑上就可以直接运行，无需额外在你的程序中再包装标准程序库，而可以由JRE直接提供。 </p>
<h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><p>先前说过，你要在.java中编写Java程序语言，使用编译器编译为.class文档，那么像编译器这样的工具程序是由谁提供？ 答案就是JDK，全名为Java Developer Killer ！ 呃！ 不对！ 是Java Development Kit ！</p>
<p>正如上图所示，JDK包括了javac、appletviewer、javadoc等工具程序，对于要开发Java程序的人，必须安装的是JDK，如此才有这些工具程序可以使用，JDK本身包括了JRE，如此你才能执行Java程序，所以总结就是 <strong>JDK包括了Java程序语言、工具程序与JRE，JRE则包括了部署技术、Java SE API与JVM</strong> 。</p>
<p>编写Java程序的人才需要JDK，如果你的程序只是想让朋友执行呢？ 那他只要装JRE就可以了，不用安装JDK，因为他不需要javac这些工具程序，但他需要Java SE API与JVM。</p>
<h2 id><a href="#" class="headerlink" title="======="></a>=======</h2><p>title: JVM，JRE和JDK<br>tags: JVM,JRE, JDK,javv虚拟面,java运行时环境,java开发工具包<br>categories: </p>
<ul>
<li>java</li>
</ul>
<h2 id="thumbnail-gallery-java-se-platform-jpg"><a href="#thumbnail-gallery-java-se-platform-jpg" class="headerlink" title="thumbnail: /gallery/java-se-platform.jpg"></a>thumbnail: /gallery/java-se-platform.jpg</h2><p>不要只从编程语言的角度来看Java，这只会看到“冰山一角”<br><!-- more --></p>
<p>这可以用Java SE Technologies中的图来印证： </p>
<p><img src="/gallery/java-se-platform.jpg" alt="Java SE platform" title="Java SE platform"></p>
<p>如果你安装JDK，就会安装这全部的东西，而Java Language只是最左上角一小部份。 </p>
<h2 id="什么是JVM？-1"><a href="#什么是JVM？-1" class="headerlink" title="什么是JVM？"></a>什么是JVM？</h2><p>在上图中，Platforms表示Solaris、Linux、Windows各种作业系统平台，在这些平台上架构了Java虚拟机，也就是JVM，JVM让Java可以跨平台，但是跨平台是怎么一回事？在这之前，你得先了解不能跨平台是怎么一回事。 </p>
<p>对于电脑而言，只认识一种语言，也就是0、1序列组成的机器指令。 当你使用C/C++等高阶语言编写程序时，其实这些语言，是比较贴近人类可阅读的文法，也就是比较接近英语文法的语言。 这是为了方便人类阅读及编写，电脑其实看不懂C/C++这类语言，为了将C/C++翻译为0、1序列组成的机器指令，你必须有个翻译员，担任翻译员工作的就是编译器（Compiler）。 </p>
<p>问题在于，每个平台认识的0、1序列并不一样。 某个指令在Windows上也许是0101，在Linux下也许是1010，因此必须使用不同的编译器为不同平台编译出可执行的机器码，在Windows平台上编译好的程序，不能直接拿到Linux等其它平台执行，也就是说，你的应用程序无法达到「编译一次，到处执行」的跨平台目的。 </p>
<p>Java是个高级语言，要让电脑执行你编写的程序，也得通过编译器的翻译。 不过Java在编译时，并不直接编译为相依于某平台的0、1序列，而是翻译为中介格式的字节码（Byte code）。 </p>
<p>Java源码扩展名为<em>.java ，经过编译器翻译后为扩展名</em>.class的字节码。 如果想要执行字节码文件，目标平台必须安装JVM（Java Virtual Machine）。 JVM会将字节码翻译为相应平台的机器码。 </p>
<p>不同的平台必须安装专属该平台的JVM。 这就好比你讲中文（<em>.java），Java编译器帮你翻译为英语（</em>.class），之后这份英语文件，到各国家之后，再由当地看得懂英文的人（JVM）翻译为当地语言（机器码）。 </p>
<p>所以 <strong>JVM担任的职责之一就是当地翻译员，将字节码文档翻译为当前平台看得懂的0、1序列，有了JVM，你的Java程序就可以达到「编译一次，到处到处执行」的跨平台目的</strong>。 除了了解JVM具有让Java程序跨平台的重要任务之外，编写Java程序时，对JVM的重要认知就是： </p>
<p>对Java程序而言，只认识一种作业系统，这个系统叫JVM，字节码文件（扩展名为.class的文件）就是JVM的可执行文件。 </p>
<p>Java程序理想上，并不用理会真正执行于哪个平台，只要知道如何执行于JVM就可以了，至于JVM实际上如何与底层平台作沟通，则是JVM自己的事！ 由于JVM实际上就相当于Java程序的作业系统，JVM就负责了Java程序的各种资源管理。 </p>
<h2 id="JRE-1"><a href="#JRE-1" class="headerlink" title="JRE"></a>JRE</h2><p>之后会学到的第一个Java程序，其中会有这么一段程序码： </p>
<p>System.out.println(“Hello World”);</p>
<p>先前曾经谈过，Java是个标准，System、out、println这些名称，都是标准中所规范的名称，实际上必须要有人根据标准编写出System.java，编译为System.class，如此你才能在编写第一个Java程序时，使用System类别（Class）上out物件（Object）的println()方法（Method）。 </p>
<p>谁来实现System.java？ 谁来编译为.class？ 可能是Oracle、IBM、Apache，无论如何，这些厂商必须根据相关的JSR标准文件，将标准程序库实现出来，如此你编写的第一个Java程序，在Oracle、IBM、Apache等厂商实现的JVM上运行时，引用如System这些标准API，你的第一个Java程序，才可能轻易地运行在不同的平台。 </p>
<p>在上图中右边可以看到Java SE API ，涵盖了各式常用的程序库，像是通用的群集（Collection）、输入输出、连接数据库的JDBC、编写窗口程序的AWT与Swing等，这些都是在各个JSR标准文件规范之中， </p>
<p><strong>Java Runtime Environment就是Java执行环境，简称JRE， 包括了Java SE API与JVM</strong>。只要你使用Java SE API中的程序库，在安装有JRE的电脑上就可以直接运行，无需额外在你的程序中再包装标准程序库，而可以由JRE直接提供。 </p>
<h2 id="JDK-1"><a href="#JDK-1" class="headerlink" title="JDK"></a>JDK</h2><p>先前说过，你要在.java中编写Java程序语言，使用编译器编译为.class文档，那么像编译器这样的工具程序是由谁提供？ 答案就是JDK，全名为Java Developer Killer ！ 呃！ 不对！ 是Java Development Kit ！</p>
<p>正如上图所示，JDK包括了javac、appletviewer、javadoc等工具程序，对于要开发Java程序的人，必须安装的是JDK，如此才有这些工具程序可以使用，JDK本身包括了JRE，如此你才能执行Java程序，所以总结就是 <strong>JDK包括了Java程序语言、工具程序与JRE，JRE则包括了部署技术、Java SE API与JVM</strong> 。</p>
<p>编写Java程序的人才需要JDK，如果你的程序只是想让朋友执行呢？ 那他只要装JRE就可以了，不用安装JDK，因为他不需要javac这些工具程序，但他需要Java SE API与JVM。</p>
<p>对初学者来说，JDK确实很不友善，这大概是Java阵营的哲学，假设你懂得如何准备相关开发环境，因此装好JDK之后，该自己设定的变数或选项就要自己设定，JDK不会代劳，过去戏称JDK全名为Java Developer Killer其实是其来于这。</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JVM,JRE, JDK,javv虚拟面,java运行时环境,java开发工具包 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git常用命令]]></title>
      <url>/2020/01/14/git-usefully-command/</url>
      <content type="html"><![CDATA[<p>收集平时常用的一些maven命令。<br><a id="more"></a></p>
<h2 id="打标签并推送到远程"><a href="#打标签并推送到远程" class="headerlink" title="打标签并推送到远程"></a>打标签并推送到远程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于当前节点打tag</span></span><br><span class="line"></span><br><span class="line">git tag -a v0.9.0.RELEASE -m <span class="string">'接手之前的版本'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指琮前节点打tag</span></span><br><span class="line"></span><br><span class="line">git tag -a v0.9.0.RELEASE -m <span class="string">'接手之前的版本'</span> 033133b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示tag内容</span></span><br><span class="line">git show v0.9.0.RELEASE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送tag到远程</span></span><br><span class="line">git push origin v0.9.0.RELEASE</span><br></pre></td></tr></table></figure>
<h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>git revert <commit> …对所有n个提交做回滚，然后push到远程，保留了修改历史记录。</commit></p>
<h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p> git reset –hard HEAD~n 重设到指定分支，若push到远程，可能被阻止，可以使用git push -f 强制更新。</p>
<h2 id="回滚远程提交"><a href="#回滚远程提交" class="headerlink" title="回滚远程提交"></a>回滚远程提交</h2><h3 id="方法1-1"><a href="#方法1-1" class="headerlink" title="方法1"></a>方法1</h3><p>git revert <commit> …对所有n个提交做回滚，然后push到远程，保留了修改历史记录。</commit></p>
<h3 id="方法2-1"><a href="#方法2-1" class="headerlink" title="方法2"></a>方法2</h3><p> git reset –hard HEAD~n 重设到指定分支，若push到远程，可能被阻止，可以使用git push -f 强制更新。</p>
<h2 id="git-clone查定分支和目录"><a href="#git-clone查定分支和目录" class="headerlink" title="git clone查定分支和目录"></a>git clone查定分支和目录</h2><p>$ git clone<br>will give you the whole repository.</p>
<p>After the clone, you can list the tags with $ git tag -l and then checkout a specific tag:</p>
<p>$ git checkout tags/<tag_name><br>Even better, checkout and create a branch (otherwise you will be on a branch named after the revision number of tag):</tag_name></p>
<p>$ git checkout tags/<tag_name> -b <branch_name></branch_name></tag_name></p>
<h2 id="查看远程地址"><a href="#查看远程地址" class="headerlink" title="查看远程地址"></a>查看远程地址</h2><p>查看全名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></p>
<p>短名方式查看</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure>
<h2 id="创建临时版本"><a href="#创建临时版本" class="headerlink" title="创建临时版本"></a>创建临时版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev20170803</span><br></pre></td></tr></table></figure>
<h2 id="git-bash连接linux"><a href="#git-bash连接linux" class="headerlink" title="git bash连接linux"></a>git bash连接linux</h2><ol>
<li>linux上执行，ssh-keygen 生成公私钥对</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line"><span class="comment"># 据提示输入文件名称，如id_rsa.trainmall</span></span><br></pre></td></tr></table></figure>
<ol>
<li>公钥添加到authorized_keys</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<ol>
<li>修改配置文件允许使用秘钥登录</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>PubkeyAuthentication yes<br>AuthorizedKeysFile      .ssh/authorized_keys<br>PasswordAuthentication yes</p>
<ol>
<li><p>重启ssh服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure>
</li>
<li><p>复制linux服务器上的私钥到本地机</p>
</li>
</ol>
<p>scp root@192.168.1.168:/root/.ssh/id_rsa ~/.ssh</p>
<ol>
<li><p>需要本地配置多个ssh，则要进行config配置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加以下配置</span></span><br><span class="line"><span class="comment"># trainmall</span></span><br><span class="line">Host trainmall</span><br><span class="line">	Hostname 47.96.102.25</span><br><span class="line">	PreferredAuthentications publickey</span><br><span class="line">	IdentityFile ~/.ssh/id_rsa.trainmall</span><br><span class="line">	User jesshaw@126.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试是否成功</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@trainmall</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="管理git生成的多个ssh-key"><a href="#管理git生成的多个ssh-key" class="headerlink" title="管理git生成的多个ssh key"></a>管理git生成的多个ssh key</h2><ol>
<li><p>生成公私钥对</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh/</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"jeshaw@lexiangmiao.com"</span></span><br><span class="line"><span class="comment"># 根据提示输入文件名称，如id_rsa.lexiangmiao</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加公钥到需要上传的代码网站</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.lexiangmiao.pub</span><br></pre></td></tr></table></figure>
<ol>
<li><p>配置config</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim config</span><br><span class="line"></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line">Host mygithub github.com</span><br><span class="line">	Hostname github.com</span><br><span class="line">	PreferredAuthentications publickey</span><br><span class="line">	IdentityFile ~/.ssh/id_rsa.github</span><br><span class="line">	User jesshaw@lexiangmiao.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># lexiangmiao</span></span><br><span class="line">Host code.lexiangmiao.com</span><br><span class="line">	Hostname code.lexiangmiao.com</span><br><span class="line">	PreferredAuthentications publickey</span><br><span class="line">	IdentityFile ~/.ssh/id_rsa.lexiangmiao</span><br><span class="line">	User jesshaw@lexiangmiao.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加私钥到本地</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先要启动ssh-agent才能添加</span></span><br><span class="line"><span class="built_in">eval</span> $(ssh-agent -s)</span><br><span class="line"></span><br><span class="line">ssh-add ~/.ssh/id_rsa.lexiangmiao</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除私钥 hostname配置在config中</span></span><br><span class="line">ssh-keygen -R hostname</span><br></pre></td></tr></table></figure>
<ol>
<li><p>测试是否成功</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#调试方式查看是否成功</span></span><br><span class="line">ssh -vT git@code.lexiangmiao.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置当前库的用户和邮箱</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config user.name <span class="string">"Firstname Lastname"</span></span><br><span class="line">git config user.email <span class="string">"your_email@example.com"</span></span><br><span class="line">git config --<span class="built_in">local</span> -l</span><br><span class="line"><span class="comment"># 查看全局配置</span></span><br><span class="line">git config --global -l</span><br></pre></td></tr></table></figure>
<ol>
<li>配置新的url<br>git remote set-url origin git@github.com-worker_user1:worker_user1/repo_name.git</li>
</ol>
<h2 id="拉不到代码，原因是因为不是以管理方式运行的git-bash"><a href="#拉不到代码，原因是因为不是以管理方式运行的git-bash" class="headerlink" title="拉不到代码，原因是因为不是以管理方式运行的git bash"></a>拉不到代码，原因是因为不是以管理方式运行的git bash</h2><p>git@git.dev.sh.ctripcorp.com: Permission denied (ssh key error).<br>fatal: Could not read from remote repository.</p>
<p>Please make sure you have the correct access rights<br>and the repository exists.</p>
<h2 id="改用https方式作为库地址时，保留输入用户名和密码"><a href="#改用https方式作为库地址时，保留输入用户名和密码" class="headerlink" title="改用https方式作为库地址时，保留输入用户名和密码"></a>改用https方式作为库地址时，保留输入用户名和密码</h2><p>git config –global credential.helper store</p>
<h2 id="箭头键不能工作"><a href="#箭头键不能工作" class="headerlink" title="箭头键不能工作"></a>箭头键不能工作</h2><p>经常碰到在bash中执行命名后需要使用上下箭头键来完成选择，但是偏偏在win7中不能使用。(当然换到cmd中是可以的，不使用此方式的原因你懂的)</p>
<p>实际上我们是实现选择的工作，虽然体验上是差了一些，但以下方法是行的</p>
<p>即使用输入”数字+回车”实现选择的功能，如下示例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yo generate</span><br><span class="line">what would you like to <span class="keyword">do</span>? (Use arrow keys)</span><br><span class="line">Run a generator</span><br><span class="line">Bootstrap</span><br><span class="line">Loopback</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment">## 输入2+回车即选择了Bootstrap</span></span><br></pre></td></tr></table></figure></p>
<h2 id="设置提交的用户名和邮箱"><a href="#设置提交的用户名和邮箱" class="headerlink" title="设置提交的用户名和邮箱"></a>设置提交的用户名和邮箱</h2><h5 id="列出所有配置"><a href="#列出所有配置" class="headerlink" title="列出所有配置"></a>列出所有配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config [--<span class="built_in">local</span>|--global|--system] -l</span><br></pre></td></tr></table></figure>
<h5 id="设置某个配置项的值"><a href="#设置某个配置项的值" class="headerlink" title="设置某个配置项的值"></a>设置某个配置项的值</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config [--<span class="built_in">local</span>|--global|--system] section.key value</span><br><span class="line"></span><br><span class="line">git config --<span class="built_in">local</span> user.name <span class="string">"lexiangmiao"</span></span><br></pre></td></tr></table></figure>
<h5 id="查看某项的当前值"><a href="#查看某项的当前值" class="headerlink" title="查看某项的当前值"></a>查看某项的当前值</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config name</span><br><span class="line"></span><br><span class="line">git config user.name</span><br></pre></td></tr></table></figure>
<h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><p>回滚前两次提交</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD~2</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>push之后会增加一条revert “引用上一次提交的备注”的提交记录</p>
<h2 id="获取分支"><a href="#获取分支" class="headerlink" title="获取分支"></a>获取分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev.0.1 origin/dev.0.1 </span><br><span class="line">$ git checkout dev.0.1</span><br></pre></td></tr></table></figure>
<h2 id="以ssh方式复制项目（不需要输入帐户）"><a href="#以ssh方式复制项目（不需要输入帐户）" class="headerlink" title="以ssh方式复制项目（不需要输入帐户）"></a>以ssh方式复制项目（不需要输入帐户）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:jesshaw/node-sample-project.git</span><br></pre></td></tr></table></figure>
<h2 id="日志输出更友好"><a href="#日志输出更友好" class="headerlink" title="日志输出更友好"></a>日志输出更友好</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph --pretty=format:<span class="string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit</span><br><span class="line">$ git config --global alias.lg <span class="string">"log --color --graph --pretty=format:'%C(bold cyan)%h%C(reset) -%C(yellow)%d%C(reset) %s %C(green)(%cr) %C(bold magenta)&lt;%an&gt;%C(reset)' --abbrev-commit"</span></span><br><span class="line">$ git config --global alias.lgl <span class="string">"log --color --graph --pretty=format:'%C(bold cyan)%h%C(reset) -%C(yellow)%d%C(reset) %s %C(green)(%ci) %C(bold magenta)&lt;%an&gt;%Creset' --abbrev-commit"</span></span><br><span class="line">$ git config --global --<span class="built_in">unset</span> alias.lg</span><br><span class="line">$ git config --global --<span class="built_in">unset</span> alias.lgl</span><br></pre></td></tr></table></figure>
<h2 id="怎样移除远程的提交日志"><a href="#怎样移除远程的提交日志" class="headerlink" title="怎样移除远程的提交日志"></a>怎样移除远程的提交日志</h2><h5 id="示例数据如下"><a href="#示例数据如下" class="headerlink" title="示例数据如下"></a>示例数据如下</h5><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git lg -5</span><br><span class="line">* 728e3ed - (HEAD -&gt; master, origin/master, origin/HEAD) test4 (26 minutes ago) &lt;ximing&gt;</span><br><span class="line">* c8f834f - (mywork) test3 (19 hours ago) &lt;ximing&gt;</span><br><span class="line">* 3992e9c - test2 (19 hours ago) &lt;ximing&gt;</span><br><span class="line">* abbe339 - test1 (19 hours ago) &lt;ximing&gt;</span><br><span class="line">* 2936159 - add bookmark (21 hours ago) &lt;ximing&gt;</span><br></pre></td></tr></table></figure>
</code></pre><h5 id="方法1-2"><a href="#方法1-2" class="headerlink" title="方法1"></a>方法1</h5><p>移除c8f834f之后的提交历史</p>
<pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 3992e9c</span><br><span class="line">$ git push origin -f  master</span><br></pre></td></tr></table></figure>
</code></pre><h5 id="方法2-2"><a href="#方法2-2" class="headerlink" title="方法2"></a>方法2</h5><ol>
<li><p>仅移除abbe339的提交，其他保留</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i 2936159</span><br><span class="line">error: could not apply 3992e9c... test2</span><br><span class="line"></span><br><span class="line">When you have resolved this problem, run <span class="string">"git rebase --continue"</span>.</span><br><span class="line">If you prefer to skip this patch, run <span class="string">"git rebase --skip"</span> instead.</span><br><span class="line">To check out the original branch and stop rebasing, run <span class="string">"git rebase --abort"</span>.</span><br><span class="line">Could not apply 3992e9c9ac3a6e6bb64e0876dace165980990b45... test2</span><br></pre></td></tr></table></figure>
</li>
<li><p>此时应当解决冲突，然后多次执行以下命令直至没有error: could not apply 3992e9c… test2此类错误为止</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">$ git add -A </span><br><span class="line">$ git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>提交到远程</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> push origin +master</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="清除远程上某个文件的所有提交日志"><a href="#清除远程上某个文件的所有提交日志" class="headerlink" title="清除远程上某个文件的所有提交日志"></a>清除远程上某个文件的所有提交日志</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> current directory</span><br><span class="line">$ git filter-branch --force --index-filter <span class="string">'git rm --cached --ignore-unmatch 文件名'</span> --prune-empty --tag-name-filter cat -- --all</span><br><span class="line">$ git push origin master --force</span><br><span class="line">$ rm -rf .git/refs/original/</span><br><span class="line">$ git reflog expire --expire=now --all</span><br><span class="line">$ git gc --prune=now</span><br><span class="line">$ git gc --aggressive --prune=now</span><br></pre></td></tr></table></figure>
<h2 id="提交所有更改的文件"><a href="#提交所有更改的文件" class="headerlink" title="提交所有更改的文件"></a>提交所有更改的文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -a -m <span class="string">"提交备注"</span></span><br></pre></td></tr></table></figure>
<h2 id="取消远程某次或某几次提交-远程日志保留"><a href="#取消远程某次或某几次提交-远程日志保留" class="headerlink" title="取消远程某次或某几次提交(远程日志保留)"></a>取消远程某次或某几次提交(远程日志保留)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git revert --no-commit b49eb8e 1d8b062</span><br><span class="line"><span class="comment">## 解决冲突后提交</span></span><br><span class="line">$ git commit -a -m <span class="string">"Revert commits b49eb8e and 1d8b062"</span></span><br></pre></td></tr></table></figure>
<h2 id="取消本地文件修改"><a href="#取消本地文件修改" class="headerlink" title="取消本地文件修改"></a>取消本地文件修改</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout file1.js file2.js</span><br></pre></td></tr></table></figure>
<h2 id="选择某个（dev1）分支上指定的提交合并到其他（bugfix）分支"><a href="#选择某个（dev1）分支上指定的提交合并到其他（bugfix）分支" class="headerlink" title="选择某个（dev1）分支上指定的提交合并到其他（bugfix）分支"></a>选择某个（dev1）分支上指定的提交合并到其他（bugfix）分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout dev1</span><br><span class="line">$ git rebase -i bugfix <span class="comment">#基于bugfix，列出提交的记录，选择需要的提交执行。有时需要解决冲突</span></span><br><span class="line">$ git checkout bugfix</span><br><span class="line">$ git merge dev1</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git,git命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker常用命令]]></title>
      <url>/2020/01/14/docker-usefully-command/</url>
      <content type="html"><![CDATA[<p>收集平时常用的一些docker命令。<br><a id="more"></a></p>
<h1 id="lt-lt-lt-lt-lt-lt-lt-HEAD"><a href="#lt-lt-lt-lt-lt-lt-lt-HEAD" class="headerlink" title="&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</h1><p>###<br>docker build src/main/docker -t trainmall:v3 </p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>master_bak</p>
<h5 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull</span><br></pre></td></tr></table></figure>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h5 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build</span><br></pre></td></tr></table></figure>
<h5 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">docker imgaes</span><br><span class="line">=======</span><br><span class="line">docker images</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; master_bak</span><br></pre></td></tr></table></figure>
<h5 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run</span><br></pre></td></tr></table></figure>
<h5 id="列出容器"><a href="#列出容器" class="headerlink" title="列出容器"></a>列出容器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>
<h5 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">docker rm</span><br><span class="line">=======</span><br><span class="line">docker rm 1adbdsaf</span><br></pre></td></tr></table></figure>
<h5 id="删除所有已出的容器"><a href="#删除所有已出的容器" class="headerlink" title="删除所有已出的容器"></a>删除所有已出的容器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rmi `docker ps -a | grep  <span class="string">"Exited"</span> | awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; master_bak</span><br></pre></td></tr></table></figure>
<h5 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">docker rmi</span><br></pre></td></tr></table></figure>
<h5 id="在host和container之间拷贝文件"><a href="#在host和container之间拷贝文件" class="headerlink" title="在host和container之间拷贝文件"></a>在host和container之间拷贝文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker cp</span><br><span class="line">=======</span><br><span class="line">docker rmi 1232a</span><br></pre></td></tr></table></figure>
<h5 id="删除所有none镜像"><a href="#删除所有none镜像" class="headerlink" title="删除所有none镜像"></a>删除所有none镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi `docker images | grep  <span class="string">"&lt;none&gt;"</span> | awk <span class="string">'&#123;print $3&#125;'</span>`</span><br></pre></td></tr></table></figure>
<h5 id="在host和container之间拷贝文件-1"><a href="#在host和container之间拷贝文件-1" class="headerlink" title="在host和container之间拷贝文件"></a>在host和container之间拷贝文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker cp</span><br><span class="line"></span><br><span class="line">docker cp &lt;containerId&gt;:/file/path/within/container /host/path/targe</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; master_bak</span><br></pre></td></tr></table></figure>
<h5 id="保存改动为新的镜像"><a href="#保存改动为新的镜像" class="headerlink" title="保存改动为新的镜像"></a>保存改动为新的镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit</span><br></pre></td></tr></table></figure>
<h5 id="进行docker容器"><a href="#进行docker容器" class="headerlink" title="进行docker容器"></a>进行docker容器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it [container id] bash</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br></pre></td></tr></table></figure>
<p>=======</p>
<p>docker exec -it [container id] /bin/sh<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 启动docker的jenkins时给jenkins授权,1000:1000为jenkins用户和用户组</span><br><span class="line">```bash</span><br><span class="line">sudo chown -R 1000:1000 /home/docker/jenkins</span><br></pre></td></tr></table></figure></p>
<h5 id="配置客户端访问私有仓库"><a href="#配置客户端访问私有仓库" class="headerlink" title="配置客户端访问私有仓库"></a>配置客户端访问私有仓库</h5><ol>
<li>vim /etc/docker/daemon.json 增加以下接点</li>
</ol>
<p>“insecure-registries” : [“47.100.28.49:5000”]</p>
<ol>
<li><p>sudo systemctl daemon-reload</p>
</li>
<li><p>sudo systemctl restart docker</p>
</li>
<li><p>验证</p>
</li>
</ol>
<p>docker login -u jes -p jes1@lexiangmiao.com 47.100.28.49:5000</p>
<h5 id="登录拉取私有库数据，并启动"><a href="#登录拉取私有库数据，并启动" class="headerlink" title="登录拉取私有库数据，并启动"></a>登录拉取私有库数据，并启动</h5><p>docker login -u jes -p jes1@lexiangmiao.com localhost:5000</p>
<p>docker pull localhost:5000/jesshaw/retail:lastest</p>
<p>docker-componse -f retail.yml up -d</p>
<p>retail.yml</p>
<p>version: ‘2’<br>services:<br>    retail-app:<br>        image: localhost:5000/jesshaw/retail:latest<br>        environment:</p>
<pre><code>    - _JAVA_OPTIONS=-Xmx512m -Xms256m
    - SPRING_PROFILES_ACTIVE=prod,swagger
    - SPRING_DATASOURCE_URL=jdbc:mysql://lxm-mysql:3306/retail?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false
    - JHIPSTER_SLEEP=10 # gives time for the database to boot before the application
ports:
    - 8090:8080
</code></pre><ol>
<li>shell启用 retail</li>
</ol>
<p>start-retail</p>
<p>start.sh</p>
<p>chmod 777  start.sh</p>
<p>#!/bin/sh</p>
<p>echo “—————remove images—————————-“<br>docker-compose down<br>echo “—————remove sucess —————————“</p>
<p>echo “—————remove images—————————-“<br>sudo docker rmi -f  localhost:5000/jesshaw/retail<br>echo “—————remove sucess —————————“</p>
<p>echo “—————login localhost registry————–”<br>sudo docker login -u jes -p jes1@lexiangmiao.com localhost:5000<br>echo “—————login sucess ————————–”</p>
<p>echo “—————pull images—————————-“<br>sudo docker pull localhost:5000/jesshaw/retail<br>echo “—————pull sucess —————————“</p>
<p>echo “—————–start api start———————“<br>docker-compose up -d<br>echo “—————–start api end———————“</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>master_bak</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker,docker命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS下安装Docker]]></title>
      <url>/2020/01/14/docker-install/</url>
      <content type="html"><![CDATA[<p>Docker意为搬运工人。负责将开发出来的代码部署到指定的系统环境当中。相对于原始的手动或虚拟机部署，Docker极大的提高了生产效率。</p>
<a id="more"></a>
<h2 id="Docker介绍"><a href="#Docker介绍" class="headerlink" title="Docker介绍"></a>Docker介绍</h2><p>Docker 是个划时代的开源项目，它彻底释放了计算虚拟化的威力，极大提高了应用的维护效率，降低了云计算应用开发的成本！使用 Docker，可以让应用的部署、测试和分发都变得前所未有的高效和轻松！</p>
<p>无论是应用开发者、运维人员、还是其他信息技术从业人员，都有必要认识和掌握 Docker，用以提高生产效率，节约有限的生命。</p>
<h2 id="Docker基本概念"><a href="#Docker基本概念" class="headerlink" title="Docker基本概念"></a>Docker基本概念</h2><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>
<h3 id="镜像（Image）"><a href="#镜像（Image）" class="headerlink" title="镜像（Image）"></a>镜像（Image）</h3><p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>
<h3 id="容器（Container）"><a href="#容器（Container）" class="headerlink" title="容器（Container）"></a>容器（Container）</h3><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。</p>
<h3 id="仓库（Repository）"><a href="#仓库（Repository）" class="headerlink" title="仓库（Repository）"></a>仓库（Repository）</h3><p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。</p>
<p>一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。</p>
<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>Docker有两个版本，分别是社区版本：Community Edition (CE)和企业版本：Enterprise Edition (EE)。一般使用CE版。</li>
<li>CE版本仅支持64位系统。</li>
<li>Docker安装方式有很多种，因为线路原因，综合考虑使用从安装包安装的方式。</li>
</ol>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1 下载stable版本的包 </p>
<p>到<a href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/" target="_blank" rel="noopener">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</a> 下载需要装的版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/package.rpm</span><br></pre></td></tr></table></figure></p>
<p>注意: 如要下载edge包，则需要改变路径。stable版每季度发版一次，提供4个月的支持。<br>edge版每月发版一次，仅当月提供支持。</p>
<p>2 安装Docker CE  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install /path/to/package.rpm</span><br></pre></td></tr></table></figure>
<p>3 启动</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>
<p>4 验证</p>
<p>通过运行hell-world镜像，验证是否安装正确。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure>
<h2 id="Docker国内镜像配置"><a href="#Docker国内镜像配置" class="headerlink" title="Docker国内镜像配置"></a>Docker国内镜像配置</h2><p>由于种种原因，下载镜像会很慢，配置国内镜像是明智选择。</p>
<p>1 停止docker</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop docker</span><br></pre></td></tr></table></figure>
<p>2 配置镜像</p>
<p>创建或修改daemon.json<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /etc/docker/daemon.json</span><br></pre></td></tr></table></figure></p>
<p>在daemon.json中增加以下配置<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">"registry-mirrors": ["https://docker.mirrors.ustc.edu.cn", "http://hub-mirror.c.163.com"],</span><br><span class="line">=======</span><br><span class="line">"registry-mirrors": ["https://docker.mirrors.ustc.edu.cn", "http://hub-mirror.c.163.com","https://registry.docker-cn.com"],</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; master_bak</span><br><span class="line">"max-concurrent-downloads": 10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3 启动docker</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ol>
<li><a href="https://docs.docker.com/install/linux/docker-ce/centos/#upgrade-docker-ce" target="_blank" rel="noopener">在centos中，从安装包安装Docker</a></li>
<li><a href="https://docker_practice.gitee.io/introduction/what.html" target="_blank" rel="noopener">Docker最佳实践</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CentOS, docker, install,安装 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker Compose：链接外部容器的几种方式]]></title>
      <url>/2020/01/14/docker-compose-external-links/</url>
      <content type="html"><![CDATA[<p>在Docker中，容器之间的链接是一种很常见的操作：它提供了访问其中的某个容器的网络服务而不需要将所需的端口暴露给Docker Host主机的功能。Docker Compose中对该特性的支持同样是很方便的。然而，如果需要链接的容器没有定义在同一个docker-compose.yml中的时候，这个时候就稍微麻烦复杂了点。</p>
<a id="more"></a>
<p>在不使用Docker Compose的时候，将两个容器链接起来使用—link参数，相对来说比较简单，以nginx镜像为例子：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm --name test1 -d nginx  <span class="comment">#开启一个实例test1</span></span><br><span class="line">docker run --rm --name test2 --link test1 -d nginx <span class="comment">#开启一个实例test2并与test1建立链接</span></span><br></pre></td></tr></table></figure>
<p>这样，test2与test1便建立了链接，就可以在test2中使用访问test1中的服务了。</p>
<p>如果使用Docker Compose，那么这个事情就更简单了，还是以上面的nginx镜像为例子，编辑docker-compose.yml文件为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">"3"</span></span><br><span class="line">services:</span><br><span class="line">  test2:</span><br><span class="line">    image: nginx</span><br><span class="line">    depends_on:</span><br><span class="line">      - test1</span><br><span class="line">    links:</span><br><span class="line">      - test1</span><br><span class="line">  test1:</span><br><span class="line">    image: nginx</span><br></pre></td></tr></table></figure>
<p>最终效果与使用普通的Docker命令docker run xxxx建立的链接并无区别。这只是一种最为理想的情况。</p>
<p>如果容器没有定义在同一个docker-compose.yml文件中，应该如何链接它们呢？<br>又如果定义在docker-compose.yml文件中的容器需要与docker run xxx启动的容器链接，需要如何处理？<br>针对这两种典型的情况，下面给出我个人测试可行的办法：</p>
<h3 id="方式一：让需要链接的容器同属一个外部网络"><a href="#方式一：让需要链接的容器同属一个外部网络" class="headerlink" title="方式一：让需要链接的容器同属一个外部网络"></a>方式一：让需要链接的容器同属一个外部网络</h3><p>我们还是使用nginx镜像来模拟这样的一个情景：假设我们需要将两个使用Docker Compose管理的nignx容器（test1和test2）链接起来，使得test2能够访问test1中提供的服务，这里我们以能ping通为准。</p>
<p>首先，我们定义容器test1的docker-compose.yml文件内容为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">"3"</span></span><br><span class="line">services:</span><br><span class="line">  test2:</span><br><span class="line">    image: nginx</span><br><span class="line">    container_name: test1</span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br><span class="line">      - app_net</span><br><span class="line">networks:</span><br><span class="line">  app_net:</span><br><span class="line">    external: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>容器test2内容与test1基本一样，只是多了一个external_links,需要特别说明的是：最近发布的Docker版本已经不需要使用external_links来链接容器，容器的DNS服务可以正确的作出判断，因此如果你你需要兼容较老版本的Docker的话，那么容器test2的docker-compose.yml文件内容为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">"3"</span></span><br><span class="line">services:</span><br><span class="line">  test2:</span><br><span class="line">    image: nginx</span><br><span class="line">    networks:</span><br><span class="line">      - default</span><br><span class="line">      - app_net</span><br><span class="line">    external_links:</span><br><span class="line">      - test1</span><br><span class="line">    container_name: test2</span><br><span class="line">networks:</span><br><span class="line">  app_net:</span><br><span class="line">    external: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>否则的话，test2的docker-compose.yml和test1的定义完全一致，不需要额外多指定一个external_links。相关的问题请参见stackoverflow上的相关问题：docker-compose + external container</p>
<p>正如你看到的那样，这里两个容器的定义里都使用了同一个外部网络app_net,因此，我们需要在启动这两个容器之前通过以下命令再创建外部网络：</p>
<p>docker network create app_net<br>之后，通过docker-compose up -d命令启动这两个容器，然后执行docker exec -it test2 ping test1,你将会看到如下的输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it test2 ping test1</span><br><span class="line">PING test1 (172.18.0.2): 56 data bytes</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=0 ttl=64 time=0.091 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.146 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.150 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=3 ttl=64 time=0.145 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=4 ttl=64 time=0.126 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=5 ttl=64 time=0.147 ms</span><br></pre></td></tr></table></figure>
<p>证明这两个容器是成功链接了，反过来在test1中pingtest2也是能够正常ping通的。</p>
<p>如果我们通过docker run –rm –name test3 -d nginx这种方式来先启动了一个容器(test3)并且没有指定它所属的外部网络，而需要将其与test1或者test2链接的话，这个时候手动链接外部网络即可：</p>
<p>docker network connect app_net test3<br>这样，三个容器都可以相互访问了。</p>
<h3 id="方式二：更改需要链接的容器的网络模式"><a href="#方式二：更改需要链接的容器的网络模式" class="headerlink" title="方式二：更改需要链接的容器的网络模式"></a>方式二：更改需要链接的容器的网络模式</h3><p>通过更改你想要相互链接的容器的网络模式为bridge,并指定需要链接的外部容器（external_links)即可。与同属外部网络的容器可以相互访问的链接方式一不同，这种方式的访问是单向的。</p>
<p>还是以nginx容器镜像为例子，如果容器实例nginx1需要访问容器实例nginx2，那么nginx2的doker-compose.yml定义为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">"3"</span></span><br><span class="line">services:</span><br><span class="line">  nginx2:</span><br><span class="line">    image: nginx</span><br><span class="line">    container_name: nginx2</span><br><span class="line">    network_mode: bridge</span><br><span class="line">与其对应的，nginx1的docker-compose.yml定义为：</span><br><span class="line"></span><br><span class="line">version: <span class="string">"3"</span></span><br><span class="line">services:</span><br><span class="line">  nginx1:</span><br><span class="line">    image: nginx</span><br><span class="line">    external_links:</span><br><span class="line">      - nginx2</span><br><span class="line">    container_name: nginx1</span><br><span class="line">    network_mode: bridge</span><br></pre></td></tr></table></figure>
<p>需要特别说明的是，这里的external_links是不能省略的，而且nginx1的启动必须要在nginx2之后，否则可能会报找不到容器nginx2的错误。</p>
<p>接着我们使用ping来测试下连通性：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it nginx1 ping nginx2  <span class="comment"># nginx1 to nginx2</span></span><br><span class="line">PING nginx2 (172.17.0.4): 56 data bytes</span><br><span class="line">64 bytes from 172.17.0.4: icmp_seq=0 ttl=64 time=0.141 ms</span><br><span class="line">64 bytes from 172.17.0.4: icmp_seq=1 ttl=64 time=0.139 ms</span><br><span class="line">64 bytes from 172.17.0.4: icmp_seq=2 ttl=64 time=0.145 ms</span><br><span class="line"></span><br><span class="line">$ docker <span class="built_in">exec</span> -it nginx2 ping nginx1 <span class="comment">#nginx2 to nginx1</span></span><br><span class="line">ping: unknown host</span><br></pre></td></tr></table></figure></p>
<p>以上也能充分证明这种方式是属于单向联通的。</p>
<p>在实际应用中根据自己的需要灵活的选择这两种链接方式，如果想偷懒的话，大可选择第二种。不过我更推荐第一种，不难看出无论是联通性还是灵活性，较为更改网络模式的第二种都更为友好。</p>
]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker, docker-compose </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java核心技术面试问题]]></title>
      <url>/2020/01/14/core-java-interview-questions/</url>
      <content type="html"><![CDATA[<p>是否是一位新手或者具有丰富经验专业的程序员，java核心技术在任何java/JEE面试中都扮演重要的角色。<br><a id="more"></a></p>
<h2 id="java核心技术面试问题列表"><a href="#java核心技术面试问题列表" class="headerlink" title="java核心技术面试问题列表"></a>java核心技术面试问题列表</h2><p>在许多面试中，java核心技术是喜欢考察的知识点，并且在决定你的面试结果中扮演关键的角色。这篇文章关于java核心技术的问题，它直接来自于我10多年java编程和许多面试经历。</p>
<p>我已经写过许多java面试问题的具体文章，如字符串String，集合Collections和多线程Multithreading等主题。</p>
<p>这里我先给出一些重要的java核心技术面试问题，让你重新加快下你所知道的知识点。</p>
<ol>
<li>java 8发布了什么重要特性？</li>
<li>你对java的平台独立性的理解是什么？</li>
<li>JVM是什么？JVM是平台独立的吗？</li>
<li>JDK和JVM的区别是什么？</li>
<li>JVM和JRE的区别是什么？</li>
<li>所有类的的超类是哪个类？</li>
<li>为什么java不支持多继承？</li>
<li>为什么java不是纯面向对象的语言？</li>
<li>path和classpath变量的区别是什么？</li>
<li>java中main方法的重要性是什么？</li>
<li>java中的重载overloading和覆载overriding是什么？</li>
<li>能重载main方法吗？</li>
<li>在一个java源文件中能有多个公共类吗？</li>
<li>java包是什么？那个包默认被引入？</li>
<li>java的访问修饰符有哪些？</li>
<li>final关键字有什么作用？</li>
<li>static关键字有什么作用？</li>
<li>java中的finally和finalize有什么作用？</li>
<li>能声明一个类为静态static类吗？</li>
<li>静态static引入是什么？</li>
<li>java带资源的try语句是什么，有什么作用？</li>
<li>java的多catch语句块是什么，有什么作用？</li>
<li>静态static语句块是什么，有什么作用？</li>
<li>接口是什么，有什么作用?</li>
<li>抽象类是什么，有什么作用？</li>
<li>抽象类和接口有什么区别？</li>
<li>接口能否实现或扩展另一个接口？</li>
<li>标记接口Marker interface是什么，有什么作用？</li>
<li>包装类是什么？</li>
<li>java中的枚举是什么？</li>
<li>java注解是什么？</li>
<li>java反射API是什么？为什么它非常重要？</li>
<li>java中的组合是什么？</li>
<li>组合相对与继承有什么好处？</li>
<li>java中怎样对自定义对象集合进行排序？</li>
<li>java中的内部类是什么?</li>
<li>匿名内部类是什么？</li>
<li>java类加载器Classloader是什么？</li>
<li>类加载器的不同类型是什么？</li>
<li>java中的三元操作符是什么？</li>
<li>super关键字做什么用的？</li>
<li>break和continue语句是什么，怎么用？</li>
<li>this关键字是什么，怎么用？</li>
<li>默认构造器是什么？</li>
<li>try可以不带catch语句块吗？</li>
<li>垃圾收集器Garbage Collection是什么？</li>
<li>序列化Serialization和反序列化Deserialization是什么？</li>
<li>通过命令提示行怎样运行JAR文件</li>
<li>System类的用途是什么？</li>
<li>instanceof关键字用途是什么？</li>
<li>switch case语句中能使用String类型吗？</li>
<li>java是通过值传递还是通过引用传递？</li>
<li>堆Heap和栈Stack内存有什么区别？</li>
<li>java编译器是存储在JDK，JRE或JVM哪一个中？</li>
<li>如下程序将输出什么？</li>
</ol>
<h2 id="java核心技术面试问题及答案"><a href="#java核心技术面试问题及答案" class="headerlink" title="java核心技术面试问题及答案"></a>java核心技术面试问题及答案</h2><h3 id="1-java-8发布了什么重要特性？"><a href="#1-java-8发布了什么重要特性？" class="headerlink" title="1. java 8发布了什么重要特性？"></a>1. java 8发布了什么重要特性？</h3><p>java 8于2014年3月发布，因此是java面试中的热点问题。如果你清楚的回答这个问题，将展示出你对新技术的关注度。</p>
<p>在java 5引入注解和泛型后，java 8是最大（变化）的发布版之一。 java 8有如下重要新特性：</p>
<ol>
<li><a href="https://www.journaldev.com/2752/java-8-interface-changes-static-method-default-method" target="_blank" rel="noopener">接口可以带默认和静态方法。</a></li>
<li><a href="https://www.journaldev.com/2763/java-8-functional-interfaces" target="_blank" rel="noopener">函数式接口和Lambda表达式。</a></li>
<li><a href="https://www.journaldev.com/2774/java-8-stream" target="_blank" rel="noopener">为集合引入的java Stream API。</a></li>
<li><a href="https://www.journaldev.com/2800/java-8-date-localdate-localdatetime-instant" target="_blank" rel="noopener">java 新的日期时间API。</a></li>
</ol>
<p>强烈推荐打开链接了作深入理解，也可以看一下java 8的新特性。</p>
<h3 id="2-你对java的平台独立性Platform-independence的理解是什么？"><a href="#2-你对java的平台独立性Platform-independence的理解是什么？" class="headerlink" title="2. 你对java的平台独立性Platform independence的理解是什么？"></a>2. 你对java的平台独立性Platform independence的理解是什么？</h3><p>平台独立性意思是在任何操作系统中运行同样的java程序。例如你可以在Windows上写java程序运行在Mac OS上。</p>
<h3 id="3-JVM是什么？JVM是平台独立的吗？"><a href="#3-JVM是什么？JVM是平台独立的吗？" class="headerlink" title="3. JVM是什么？JVM是平台独立的吗？"></a>3. JVM是什么？JVM是平台独立的吗？</h3><p>JVM是java虚拟机（Java Virtual Machine）的缩写，它是java语言的核心。JVM的责任就是转换字节码到可读的机器码。JVM不是平台独立的，也是为什么我们在不同的操作系统需要不同的JVM的原因。我们用java可选项可以自定义分配内存最小和最大值。java虚拟机之所以被叫做虚拟，是因为他提了一个不依赖于底层操作系统的接口。</p>
<p>阅读更多知识，请访问 <a href="/2020/01/14/jvm-jre-jdk/" title="JVM、JRE和JDK">JVM、JRE和JDK</a> 一文。</p>
<h3 id="4-JDK和JVM的区别是什么？"><a href="#4-JDK和JVM的区别是什么？" class="headerlink" title="4. JDK和JVM的区别是什么？"></a>4. JDK和JVM的区别是什么？</h3><p>JDK是java开发工具包（java Development Kit）的缩写，它是用于开发目的工具集合。JVM是执行java程序的部分。  </p>
<p>JDK除了包含了一批用于Java开发的组件，还包含JRE,java运行时环境，也包括了用于产品环境的各种库类，如基础类库rt.jar，以及给开发人员使用的补充库，如国际化与本地化的类库、IDL库等等。JDK中还包括各种样例程序，用以展示Java API中的各部分。</p>
<p>JVM是java平台的可执行的部分。JVM屏蔽了与具体操作系统平台相关的信息，使得Java程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。由于JVM并不是专为Java所实现的运行时，实际上只要有其他编程语言的编译器能生成正确Java bytecode文件，则这个语言也能实现在JVM上运行。</p>
<h3 id="5-JVM和JRE的区别是什么？"><a href="#5-JVM和JRE的区别是什么？" class="headerlink" title="5. JVM和JRE的区别是什么？"></a>5. JVM和JRE的区别是什么？</h3><p>JRE是java运行时环境的缩写（Java Runtime Environment），它是JVM的一种实现。JRE由JVM,java二节文件和其他成功执行任何程序的其他类组成。JRE不包含任何像编译器、调试器等那样的开发工具。如果你想执行任何java程序，你应当安装JRE。</p>
<h3 id="6-所有类的的超类是哪个类？"><a href="#6-所有类的的超类是哪个类？" class="headerlink" title="6. 所有类的的超类是哪个类？"></a>6. 所有类的的超类是哪个类？</h3><p><code>java.lang.Object</code>是所有类的根类，不需要扩展它。</p>
<h3 id="7-为什么java不支持多继承？"><a href="#7-为什么java不支持多继承？" class="headerlink" title="7. 为什么java不支持多继承？"></a>7. 为什么java不支持多继承？</h3><p>因是“钻石问题（菱形继承问题）” 导致java类不支持多继承。想了解更多“钻石问题”，请阅读<a href="https://www.journaldev.com/1775/multiple-inheritance-in-java" target="_blank" rel="noopener">java中的多继承</a>。</p>
<p>然后多继承在接口中是支持的。一个接口可以扩展多个接口，因为仅仅是声明方法，实现类中将实现它接口的方法。因此在接口中就没有“<br>钻石问题（菱形继承问题）”了。</p>
<h3 id="8-为什么java不是纯面向对象的语言？"><a href="#8-为什么java不是纯面向对象的语言？" class="headerlink" title="8. 为什么java不是纯面向对象的语言？"></a>8. 为什么java不是纯面向对象的语言？</h3><p>说java不是纯面向对象语言，是因为它支持如int、byte、short、long等原始类型。我相信在写代码时它带来了简捷性。很显然地java有原始类型对应的包装类型表示，从所周知，包装类型除了添加了一些方法，它们没有带来任何好处。</p>
<h3 id="9-path和classpath变量的区别是什么？"><a href="#9-path和classpath变量的区别是什么？" class="headerlink" title="9. path和classpath变量的区别是什么？"></a>9. path和classpath变量的区别是什么？</h3><p>PATH是一个用在操作系统中定位可执行文件的环境变量（不仅java可执行文件，还有其他如C#,C++等可执行文件）。这就是为什么在安装java时或想任何可执行文件被找到时，我们需要配置目录路径到Path变量的原因。</p>
<p>Classpath是为java指定的用于java可执行文件定位class字节文件的路径变量。在运行java应用程序时将查找这个classpath路径，它可以是目录、ZIP文件、JAR文件等。</p>
<h3 id="10-java中main方法的重要性是什么？"><a href="#10-java中main方法的重要性是什么？" class="headerlink" title="10. java中main方法的重要性是什么？"></a>10. java中main方法的重要性是什么？</h3><p>main()方法是任何独立的java应用程序的入口点。main的语法是：<code>public static void main(String args[])</code>.</p>
<p>main方法是公用且静态的，输入参数是数组，可以转入运行时参数给它。</p>
<h3 id="11-java中的重载overloading和覆载overriding是什么？"><a href="#11-java中的重载overloading和覆载overriding是什么？" class="headerlink" title="11. java中的重载overloading和覆载overriding是什么？"></a>11. java中的重载overloading和覆载overriding是什么？</h3><p>有超过一个方法存在相同名称、不同参时，我们称它为重载。</p>
<p>覆载指的是父子类之间存在相同签名的方法。在子类中可以使用@Override注解覆盖父类的方法。</p>
<h3 id="12-能重载main方法吗？"><a href="#12-能重载main方法吗？" class="headerlink" title="12. 能重载main方法吗？"></a>12. 能重载main方法吗？</h3><p>可以，在类中可以有多个main名字的方法。然而运行时的入口仅查找这个方法<code>public static void main(String args[])</code>.</p>
<h3 id="13-在一个java源文件中能有多个公共类吗？"><a href="#13-在一个java源文件中能有多个公共类吗？" class="headerlink" title="13. 在一个java源文件中能有多个公共类吗？"></a>13. 在一个java源文件中能有多个公共类吗？</h3><p>在单个java源文件中，不能超过一个公共类。但单个源文件中可以有多个非公共的类。</p>
<h3 id="14-java包是什么？那个包默认被引入？"><a href="#14-java包是什么？那个包默认被引入？" class="headerlink" title="14. java包是什么？那个包默认被引入？"></a>14. java包是什么？那个包默认被引入？</h3><p>java包是组织java类文件的一种机制。这个组织逻辑可以基于功能或模块。一个类的完整类名应包含包及类名，例如，<code>java.lang.Object</code>是Object类的完整类名，它是java.lang包的一部分。</p>
<p><code>java.lang</code>包是被默认引入的，任何类中它不需要明确引入。</p>
<h3 id="15-java的访问修饰符有哪些？"><a href="#15-java的访问修饰符有哪些？" class="headerlink" title="15. java的访问修饰符有哪些？"></a>15. java的访问修饰符有哪些？</h3><p>java提供公有public, 私有private和保护protected访问修饰符。若未使用任何修饰符，则被叫做默认default访问修饰符。</p>
<p>java类仅有公有和默认访问修饰符。阅读更多关于<a href="https://www.journaldev.com/2345/java-access-modifiers" target="_blank" rel="noopener">java访问修饰符</a>的知识。</p>
<h3 id="16-final关键字有什么作用？"><a href="#16-final关键字有什么作用？" class="headerlink" title="16. final关键字有什么作用？"></a>16. final关键字有什么作用？</h3><p>final关键用于确保其他类不能扩展它。如String类就带有final，我们就不能扩展它。</p>
<p>方法前也可以使用final关键字用来确保子类不能覆盖它。</p>
<p>final关键字用在变量前确保只能分配一次值。然而变量的状态是可以改变的，例如可以分配到final变量一次，但是变量的值，在分配之后是可以改变的。</p>
<p>java接口的变量默认就是final且静态static的。</p>
<h3 id="17-static关键字有什么作用？"><a href="#17-static关键字有什么作用？" class="headerlink" title="17. static关键字有什么作用？"></a>17. static关键字有什么作用？</h3><p>static关键字用在类级别全局的变量，如所有对象将共享同一个变量。</p>
<p>static关键字也可以用在方法前。静态方法仅能访问类的静态变量和调用静态方法。</p>
<p>static关键字用作静态块。静态块是通过java类加载器一次性加载到内存的。常用来初始化静态变量，大多用来创建静态资源。</p>
<p>static关键字用作静态嵌套类。此时能访问变部静态类的静态方法或静态变量。</p>
<p>static关键字用作静态引入。如<code>import static java.lang.Math.PI;</code>，这样就可以直接在当前类中使用PI参数了。</p>
<h3 id="18-java中的finally和finalize有什么作用？"><a href="#18-java中的finally和finalize有什么作用？" class="headerlink" title="18. java中的finally和finalize有什么作用？"></a>18. java中的finally和finalize有什么作用？</h3><p>finally块用作在try-catch块之后你总想执行的东西。甚至在抛出异常时也会执行。它大多用来释放在try块中创建的资源。</p>
<p>finalize()是Object的protected方法，子类可以覆盖该方法以实现资源清理工作，GC在回收对象之前调用该方法。</p>
<p>finalize()与C++中的析构函数不是对应的。C++中的析构函数调用的时机是确定的（对象离开作用域或delete掉），但java中的finalize的调用具有不确定性。</p>
<p>不建议用finalize方法完成“非内存资源”的清理工作，但建议用于：<br> a.清理本地对象(通过JNI创建的对象)；<br> b.作为确保某些非内存资源(如Socket、文件等)释放的一个补充：在finalize方法中显式调用其他资源释放方法。</p>
<h3 id="19-能声明一个类为静态static类吗？"><a href="#19-能声明一个类为静态static类吗？" class="headerlink" title="19. 能声明一个类为静态static类吗？"></a>19. 能声明一个类为静态static类吗？</h3><p>不能声明一个类为顶级静态类，但可以声明为嵌套静态类。</p>
<h3 id="20-静态static引入是什么？"><a href="#20-静态static引入是什么？" class="headerlink" title="20. 静态static引入是什么？"></a>20. 静态static引入是什么？</h3><p>我们访问静态变量或方法一般是通过类访问的。但也可以通过静态引入的方式<code>import static java.lang.Math.PI;</code>使用它。</p>
<p>使用静态引入带来困惑，最好避免使用它，同时使用它还会使代码的可维护性和可读性变差。</p>
<h3 id="21-java带资源的try语句是什么，有什么作用？"><a href="#21-java带资源的try语句是什么，有什么作用？" class="headerlink" title="21. java带资源的try语句是什么，有什么作用？"></a>21. java带资源的try语句是什么，有什么作用？</h3><p>java 7的新特性,带资源的try语句，用于自动释放资源，相当于try-catch语句块执行了finnaly块。</p>
<h3 id="22-java的多个catch语句块是什么，有什么作用？"><a href="#22-java的多个catch语句块是什么，有什么作用？" class="headerlink" title="22. java的多个catch语句块是什么，有什么作用？"></a>22. java的多个catch语句块是什么，有什么作用？</h3><p>如果一个try块中有多个异常要被捕获，catch块中的代码会变丑陋的同时还要用多余的代码来记录异常。有鉴于此，java 7的一个新特征是：一个catch子句中可以捕获多个异常。使用管道符(|),如’catch(IOException | SQLException | Exception ex)’捕获异常。</p>
<h3 id="23-静态static语句块是什么，有什么作用？"><a href="#23-静态static语句块是什么，有什么作用？" class="headerlink" title="23. 静态static语句块是什么，有什么作用？"></a>23. 静态static语句块是什么，有什么作用？</h3><p>静态块是一组语句块，通过java类加载器一次性加载到内存的。常用来初始化静态变量，大多用来创建静态资源。</p>
<h3 id="24-接口是什么，有什么作用"><a href="#24-接口是什么，有什么作用" class="headerlink" title="24. 接口是什么，有什么作用?"></a>24. 接口是什么，有什么作用?</h3><p>接口是java语言的核心部分，不但用在许多JDK中而且也用在许多框架、工具和java设计模式中。在java中，接口提供了一用实现方式的抽象，用来定义子类需要实现的契约。</p>
<p>在代码中，接口有利于定义类型起始点和创建顶层结构。自从java接口能实现多个接口后，在许多场景下，使用接口更优于超类。</p>
<h3 id="25-抽象类是什么，有什么作用？"><a href="#25-抽象类是什么，有什么作用？" class="headerlink" title="25. 抽象类是什么，有什么作用？"></a>25. 抽象类是什么，有什么作用？</h3><p>抽象类为子类创建一些默认方法的实现。抽象类可以有未实现的抽象方法。</p>
<p>abstract关键字用来创建抽象类。抽象类不能被实例化，大多是用于子类的扩展。</p>
<h3 id="26-抽象类和接口有什么区别？"><a href="#26-抽象类和接口有什么区别？" class="headerlink" title="26. 抽象类和接口有什么区别？"></a>26. 抽象类和接口有什么区别？</h3><ul>
<li>abstract用于创建抽象类，而interface用来创建接口。</li>
<li>子类用extends扩展抽象类，而接口使用implements实现接口。</li>
<li>抽象类可以有实现方法，但接口没有。</li>
<li>抽象类有构造器，但接口没有。</li>
<li>抽象类的方法有public, private, protected, static修饰符，但接口的方法是隐式的public和abstract，不需要使用任何的修饰符。</li>
<li>一个类只能扩展最多一个抽象类，但接口可以扩展一个或多个接口。</li>
<li>抽象类可以扩展其他类和实现其他接口，但接口只能扩展其他接口。</li>
<li>抽象类有main入口方法，是可以运行的，但时接口不能。</li>
<li>接口常用来定义契约，但抽象定义契约的同时还可以有方法实现。</li>
</ul>
<h3 id="27-接口能否实现或扩展另一个接口？"><a href="#27-接口能否实现或扩展另一个接口？" class="headerlink" title="27. 接口能否实现或扩展另一个接口？"></a>27. 接口能否实现或扩展另一个接口？</h3><p>接口不能实现另一个接口，但可以扩展它。因为接口没有实现就没有“钻石问题”。</p>
<h3 id="28-标记接口Marker-interface是什么，有什么作用？"><a href="#28-标记接口Marker-interface是什么，有什么作用？" class="headerlink" title="28. 标记接口Marker interface是什么，有什么作用？"></a>28. 标记接口Marker interface是什么，有什么作用？</h3><p>标记接口是一个没有任何方法实现的空接口，用于标记实现类有某些功能。从所周知的Serializable和Cloneable就是标记接口。</p>
<h3 id="29-包装类是什么？"><a href="#29-包装类是什么？" class="headerlink" title="29. 包装类是什么？"></a>29. 包装类是什么？</h3><p>java包装类是8个原始类型对应的对象表示形式。所有的包装类都是不能被继承final和一成不变immutable的。</p>
<h3 id="30-java中的枚举是什么？"><a href="#30-java中的枚举是什么？" class="headerlink" title="30. java中的枚举是什么？"></a>30. java中的枚举是什么？</h3><p>枚举作为一个新类型，在java 1.5版本引入。它的域由一些固定的常量构成。如，在java中可以使用EAST, WEST, NORTH, SOUTH创建Direction方向的枚举。</p>
<p>与类相似，我们使用enum关键字用于创建一个枚举类型。枚举常量是隐式的静态不能继承的。</p>
<h3 id="31-java注解是什么？"><a href="#31-java注解是什么？" class="headerlink" title="31. java注解是什么？"></a>31. java注解是什么？</h3><p>java注解提供关于代码的描述信息。它不直接影响代码。注解在java5中被引入。注解是关于嵌套在程序自己中的元数据。可以用过注解解析工具或编译器解析。我们常指定注释在编译时或者在运行时可用。java盎的注解有@Override, @Deprecated and @SuppressWarnings。 </p>
<h3 id="32-java反射API是什么？为什么有它非常重要？"><a href="#32-java反射API是什么？为什么有它非常重要？" class="headerlink" title="32. java反射API是什么？为什么有它非常重要？"></a>32. java反射API是什么？为什么有它非常重要？</h3><p>java反射API提供查看和修改java应用程序的运行时行为的能力。我们可以查看java类，接口，枚举和它们的方法和域的详情。反射API是一个高级主题，一般的应用中应当避免它。反射API用于反设计模式的场景，如单例模式中调用私有构造器，建返访问修饰调用。</p>
<p>即然一般的应用中应当避免使用反射API，但有它的话还是非常重要。因为我们不能没有如Spring，Hibernate或者Tomcat服务，JBoss之类的框架。它们通过反射API调用适当的方法和实体，使用它做了许多处理。</p>
<h3 id="33-java中的组合（Composition）是什么？"><a href="#33-java中的组合（Composition）是什么？" class="headerlink" title="33. java中的组合（Composition）是什么？"></a>33. java中的组合（Composition）是什么？</h3><p>组合是在类中实现<code>有has-a</code>关系的一种设计技术。使用对象组合是为了代码重用。</p>
<p>java组合通过引用其他对象的实例变量实现的。使用组合的好处是，我们能够控制其他对象的可见性，在我们需要的时候重用。</p>
<h3 id="34-组合相对与继承有什么好处？"><a href="#34-组合相对与继承有什么好处？" class="headerlink" title="34. 组合相对与继承有什么好处？"></a>34. 组合相对与继承有什么好处？</h3><p>java编程的最佳实践之一是“组合（Composition）优于继承（Inheritance）”。有以下原因：</p>
<ul>
<li>尽管我们可以不使用超类的方法，但在超类中的任何改变也可能影响到子类。例如，假如我们在子类中有一个方法<code>test()</code>，突然某人在父类引入一个方法<code>test()</code>，那么我们在子类中出现编译错误。组合从没有这种问题，是因为我们仅在需要方法时才使用。</li>
<li>若我们在设计超类时没有掌控，继承会暴露了所有超类的方法和变量到客户端，这样也能导致安全漏洞。组合允许我们对方法提供限制的访问，因此更加安全。</li>
<li>在组合中我们可以运行时绑定，继承绑定是在编译时。因此组合的方法调用更加灵活。</li>
</ul>
<p>你可以在<a href="https://www.journaldev.com/1775/multiple-inheritance-in-java" target="_blank" rel="noopener">java组合vs继承</a>一文中，阅读更多关于组合优于继承的知识。</p>
<h3 id="35-java中怎样对自定义对象集合进行排序？"><a href="#35-java中怎样对自定义对象集合进行排序？" class="headerlink" title="35. java中怎样对自定义对象集合进行排序？"></a>35. java中怎样对自定义对象集合进行排序？</h3><p>自定义对象集合支持排序需要实现比较Comparable接口。比较接口有<code>compareTo(T obj)</code>方法，它被用于排序的实现，我们可以提供默认的排序方法。</p>
<p>然后，如果想基于不同条件，如员工集合中基于薪资或年龄的排序。我们可以创建多个匿名类的比较器实例实现。</p>
<h3 id="36-java中的内部类是什么"><a href="#36-java中的内部类是什么" class="headerlink" title="36. java中的内部类是什么?"></a>36. java中的内部类是什么?</h3><p>我们把定义在类的内部的类称为嵌套类。任何非静态的嵌套类被称之为内部类。内部类与类的对象实例相关。它能访问所有变量和外部类的方法。即然内部类是与实例相关，那么它就没有任何静态变量。</p>
<p>在类的内部，可以有本地内部类和匿名内部类。详情请阅读<a href="https://www.journaldev.com/996/java-inner-class" target="_blank" rel="noopener">java内部类</a>。</p>
<h3 id="37-匿名内部类是什么？"><a href="#37-匿名内部类是什么？" class="headerlink" title="37. 匿名内部类是什么？"></a>37. 匿名内部类是什么？</h3><p>一个本地不带名字的类被叫做匿名内部类。在单个语句中匿名类定义后并立即实例化。匿名内部类总是扩展自一个类或者实现一个接口。</p>
<p>既然匿名类没有名字，那么它也没有定义构造器。匿名内部类仅在定义的地方可以访问。</p>
<h3 id="38-java类加载器Classloader是什么？"><a href="#38-java类加载器Classloader是什么？" class="headerlink" title="38. java类加载器Classloader是什么？"></a>38. java类加载器Classloader是什么？</h3><p>java类加载器是在我们想访问任何类时，加载字节码程序到内存的一种程序。我们也可以扩散ClassLoader类和覆载loadClass(String name)方法定义自己的类加载器。了解更多关于<a href="https://www.journaldev.com/349/java-classloader" target="_blank" rel="noopener">java类加器</a>。</p>
<h3 id="39-类加载器的不同类型是什么？"><a href="#39-类加载器的不同类型是什么？" class="headerlink" title="39. 类加载器的不同类型是什么？"></a>39. 类加载器的不同类型是什么？</h3><p>在java中提供以下三个内建的类加载器：</p>
<ol>
<li>引导类加载器（Bootstrap Class Loader）：它用来加载JDK内存类，典型的加载rt.jar和其他核心类。它是用原生代码来实现的，并不继承自 java.lang.ClassLoader。</li>
<li>扩展类加载器（Extensions Class Loader）：它用来加载 JDK 的扩展库。常常加载$jAVA_HOME/lib/ext目录库。</li>
<li>系统类加载器（System Class Loader）：它根据 java 应用的类路径（CLASSPATH）来加载 java 类。一般来说，java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader()来获取它。</li>
</ol>
<h3 id="40-java中的三元操作符是什么？"><a href="#40-java中的三元操作符是什么？" class="headerlink" title="40. java中的三元操作符是什么？"></a>40. java中的三元操作符是什么？</h3><p>java三元操作符仅是一个带三个表达式的条件操作符。可以使用if-then-else语句替换。例如<code>a==b?a:b</code>。</p>
<h3 id="41-super关键字做什么用的？"><a href="#41-super关键字做什么用的？" class="headerlink" title="41. super关键字做什么用的？"></a>41. super关键字做什么用的？</h3><p>super用作子类中访问父类构造器或父类方法。访问类构造器是须放在第一条语句且只能在构造器中访问。</p>
<h3 id="42-break和continue语句是什么，怎么用？"><a href="#42-break和continue语句是什么，怎么用？" class="headerlink" title="42. break和continue语句是什么，怎么用？"></a>42. break和continue语句是什么，怎么用？</h3><p>放在循环语句中用来结束循环，break结束整个循环，continue结束本次循环。</p>
<h3 id="43-this关键字是什么，怎么用？"><a href="#43-this关键字是什么，怎么用？" class="headerlink" title="43. this关键字是什么，怎么用？"></a>43. this关键字是什么，怎么用？</h3><p>用于访问当前对象的引用。大多被用于确保是当前对象的变量（相对于入参变量来说），也可以用来调用当前对象的其他构造器。</p>
<h3 id="44-默认构造器是什么？"><a href="#44-默认构造器是什么？" class="headerlink" title="44. 默认构造器是什么？"></a>44. 默认构造器是什么？</h3><p>类的无参构造器被称为默认构造器。在我们没有定义任何类构造器时，java编译器会自动创建类的默认无参构造器。如果定义了有其他构造器，则编译器不会为我们创建默认构造器。</p>
<h3 id="45-try可以不带catch语句块吗？"><a href="#45-try可以不带catch语句块吗？" class="headerlink" title="45. try可以不带catch语句块吗？"></a>45. try可以不带catch语句块吗？</h3><p>可以。可以有try-finally语句块，于是就避免带catch语句块了。</p>
<h3 id="46-垃圾收集器Garbage-Collection是什么？"><a href="#46-垃圾收集器Garbage-Collection是什么？" class="headerlink" title="46. 垃圾收集器Garbage Collection是什么？"></a>46. 垃圾收集器Garbage Collection是什么？</h3><p>垃圾收集器查看堆内存的处理器，识别哪个对象在使用中和哪个不在使用中，然后删除不使用的对象。销毁内存是通过垃圾收集器自动进行处理的。</p>
<p>我们可以使用代码<code>Runtime.getRuntime().gc()</code>或者使用工具方法<code>System.gc()</code>运行垃圾收集器。更多堆内存和垃圾收集器详细分析，请阅读“<a href="https://www.journaldev.com/2856/java-jvm-memory-model-memory-management-in-java" target="_blank" rel="noopener">垃圾收集器</a>”。</p>
<h3 id="47-序列化Serialization和反序列化Deserialization是什么？"><a href="#47-序列化Serialization和反序列化Deserialization是什么？" class="headerlink" title="47. 序列化Serialization和反序列化Deserialization是什么？"></a>47. 序列化Serialization和反序列化Deserialization是什么？</h3><p>我们把java对象转换成二进制流的过程被称做为序列化。一旦一个对象被转换成二进制流，它就可以侦破到文件或通过网络发送或在套接字连接中使用。</p>
<p>对象应当实现序列化Serializable接口，这样我们就可以使用<code>java.io.ObjectOutputStream</code>写入对象到文件或者任何输出流OutputStream对象了。阅读更多<a href="https://www.journaldev.com/927/objectoutputstream-java-write-object-file" target="_blank" rel="noopener">java序列化</a>知识。</p>
<p>把二进制流数据转换成对象的过程被称做为反序列化。阅读更多<a href="https://www.journaldev.com/933/objectinputstream-java-read-object-file" target="_blank" rel="noopener">java反序列化</a>知识。</p>
<h3 id="48-通过命令提示行怎样运行JAR文件？"><a href="#48-通过命令提示行怎样运行JAR文件？" class="headerlink" title="48. 通过命令提示行怎样运行JAR文件？"></a>48. 通过命令提示行怎样运行JAR文件？</h3><p>能使用命令行运行jar包文件，但需要在jar清单文件中有Main入口类。含Main的类是jar包的入口点，用来通过java命令执行。</p>
<h3 id="49-System类的用途是什么？"><a href="#49-System类的用途是什么？" class="headerlink" title="49. System类的用途是什么？"></a>49. System类的用途是什么？</h3><p>java System类是核心类之一，<code>System.out.print()</code>是其中一个方法。在调试时，它是最简单的记录日志信息的方法。</p>
<p>System类被声明为final的。因此无法被子类继承和覆盖其行为。也不提供任何公共构造器，因此也不能实例这个类。也是为什么它的所有方法是静态static的原因。</p>
<p>System类提供了数组拷贝、获取当前时间、读环境变化等助手类方法。阅读更多<a href="https://www.journaldev.com/1847/java-system-java-lang-system-class" target="_blank" rel="noopener">java System类</a>知识。</p>
<h3 id="50-instanceof关键字的用途是什么？"><a href="#50-instanceof关键字的用途是什么？" class="headerlink" title="50. instanceof关键字的用途是什么？"></a>50. instanceof关键字的用途是什么？</h3><p>instanceof关键字用来检测是否属于某个类。我们应当尽可能的避免使用它。</p>
<h3 id="51-switch-case语句中能使用字符串类型吗？"><a href="#51-switch-case语句中能使用字符串类型吗？" class="headerlink" title="51. switch case语句中能使用字符串类型吗？"></a>51. switch case语句中能使用字符串类型吗？</h3><p>java 7引入的新特性之一，switch case语句中可以使用字符串类型。因此java 7或更高版本可以使用。</p>
<h3 id="52-java是通过值传递还是通过引用传递？"><a href="#52-java是通过值传递还是通过引用传递？" class="headerlink" title="52. java是通过值传递还是通过引用传递？"></a>52. java是通过值传递还是通过引用传递？</h3><p>这个问题非常具有迷惑性。我们知道对象变量在堆空间中包含引用的对象。在我们调用任何方法时，这个变量的拷贝被转递并存储在方法的栈内存中。我们能够检测到任何语言它是通过引用或通过值传递通过一个简单的交换方法，请阅读<a href="https://www.journaldev.com/3884/java-is-pass-by-value-and-not-pass-by-reference" target="_blank" rel="noopener">更多</a>。由此我们得出java是通过值传递而不是通过引用传递的。</p>
<h3 id="53-堆Heap和栈Stack内存有什么区别？"><a href="#53-堆Heap和栈Stack内存有什么区别？" class="headerlink" title="53. 堆Heap和栈Stack内存有什么区别？"></a>53. 堆Heap和栈Stack内存有什么区别？</h3><p>堆和栈主要的区别如下：</p>
<ul>
<li>所有应用的部分都使用堆内存，然而只有执行线程使用栈内存。</li>
<li>每当对象被创建时，它总是存在堆空间中，栈内存包含它的引用。栈内存仅包括本地的原始变量，在堆空间中的对象的引用变量。<br>*栈内存是通后进先出LIFO的方法管理的，然而在堆内存中因为它是全局使用，所以它的管理方式更加复杂。</li>
</ul>
<p>在同一程序中更加详细的解释，请阅读<a href="https://www.journaldev.com/4098/java-heap-space-vs-stack-memory" target="_blank" rel="noopener">java堆vs栈内存</a></p>
<h3 id="54-java编译器是存储在JDK，JRE或JVM哪一个中？"><a href="#54-java编译器是存储在JDK，JRE或JVM哪一个中？" class="headerlink" title="54. java编译器是存储在JDK，JRE或JVM哪一个中？"></a>54. java编译器是存储在JDK，JRE或JVM哪一个中？</h3><p>java编译器的任务是转换java程序到字节码，我们使用<code>javac</code>命令执行即可实现。因此它必须要存在JDK中。</p>
<h3 id="55-如下程序将输出什么？"><a href="#55-如下程序将输出什么？" class="headerlink" title="55. 如下程序将输出什么？"></a>55. 如下程序将输出什么？</h3><ol>
<li>在类中的静态方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tests;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Test toString called"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>答：以上代码不能编译。因为所有类对继承根对象类Object。以上会编译错误提示静态方法不能覆盖实例方法。</p>
<ol>
<li>静态方法调用</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tests;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Test foo called"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Test obj = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(obj.foo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>答：这是个奇怪的使用场景。NULL空对象调用方法是总会报<code>NullPointerException</code>异常，且该方法是属于类的静态方法，但该程序能工作并打印”Test foo called”。</p>
<p>原因是编译器做了编译优化。在java编译转换成字节码时，它指向的foo()是静态方法，而不是对象方法，因此编译从<code>obj.foo()</code>调整到<code>Test.foo()</code>，于是也没有了<code>NullPointerException</code>异常。</p>
<h2 id><a href="#" class="headerlink" title="======="></a>=======</h2><p>title: java核心技术面试问题<br>tags: java,core,interview,核心技术,编程,面试<br>categories: </p>
<ul>
<li>java</li>
</ul>
<h2 id="thumbnail-gallery-blue-water4-jpg"><a href="#thumbnail-gallery-blue-water4-jpg" class="headerlink" title="thumbnail: /gallery/blue-water4.jpg"></a>thumbnail: /gallery/blue-water4.jpg</h2><p>是否是一位新手或者具有丰富经验专业的程序员，java核心技术在任何java/JEE面试中都扮演重要的角色。<br><!-- more --></p>
<h2 id="java核心技术面试问题列表-1"><a href="#java核心技术面试问题列表-1" class="headerlink" title="java核心技术面试问题列表"></a>java核心技术面试问题列表</h2><p>在许多面试中，java核心技术是喜欢考察的知识点，并且在决定你的面试结果中扮演关键的角色。这篇文章关于java核心技术的问题，它直接来自于我10多年java编程和许多面试经历。</p>
<p>我已经写过许多java面试问题的具体文章，如字符串String，集合Collections和多线程Multithreading等主题。</p>
<p>这里我先给出一些重要的java核心技术面试问题，让你重新加快下你所知道的知识点。</p>
<ol>
<li>java 8发布了什么重要特性？</li>
<li>你对java的平台独立性的理解是什么？</li>
<li>JVM是什么？JVM是平台独立的吗？</li>
<li>JDK和JVM的区别是什么？</li>
<li>JVM和JRE的区别是什么？</li>
<li>所有类的的超类是哪个类？</li>
<li>为什么java不支持多继承？</li>
<li>为什么java不是纯面向对象的语言？</li>
<li>path和classpath变量的区别是什么？</li>
<li>java中main方法的重要性是什么？</li>
<li>java中的重载overloading和覆载overriding是什么？</li>
<li>能重载main方法吗？</li>
<li>在一个java源文件中能有多个公共类吗？</li>
<li>java包是什么？那个包默认被引入？</li>
<li>java的访问修饰符有哪些？</li>
<li>final关键字有什么作用？</li>
<li>static关键字有什么作用？</li>
<li>java中的finally和finalize有什么作用？</li>
<li>能声明一个类为静态static类吗？</li>
<li>静态static引入是什么？</li>
<li>java带资源的try语句是什么，有什么作用？</li>
<li>java的多catch语句块是什么，有什么作用？</li>
<li>静态static语句块是什么，有什么作用？</li>
<li>接口是什么，有什么作用?</li>
<li>抽象类是什么，有什么作用？</li>
<li>抽象类和接口有什么区别？</li>
<li>接口能否实现或扩展另一个接口？</li>
<li>标记接口Marker interface是什么，有什么作用？</li>
<li>包装类是什么？</li>
<li>java中的枚举是什么？</li>
<li>java注解是什么？</li>
<li>java反射API是什么？为什么它非常重要？</li>
<li>java中的组合是什么？</li>
<li>组合相对与继承有什么好处？</li>
<li>java中怎样对自定义对象集合进行排序？</li>
<li>java中的内部类是什么?</li>
<li>匿名内部类是什么？</li>
<li>java类加载器Classloader是什么？</li>
<li>类加载器的不同类型是什么？</li>
<li>java中的三元操作符是什么？</li>
<li>super关键字做什么用的？</li>
<li>break和continue语句是什么，怎么用？</li>
<li>this关键字是什么，怎么用？</li>
<li>默认构造器是什么？</li>
<li>try可以不带catch语句块吗？</li>
<li>垃圾收集器Garbage Collection是什么？</li>
<li>序列化Serialization和反序列化Deserialization是什么？</li>
<li>通过命令提示行怎样运行JAR文件</li>
<li>System类的用途是什么？</li>
<li>instanceof关键字用途是什么？</li>
<li>switch case语句中能使用String类型吗？</li>
<li>java是通过值传递还是通过引用传递？</li>
<li>堆Heap和栈Stack内存有什么区别？</li>
<li>java编译器是存储在JDK，JRE或JVM哪一个中？</li>
<li>如下程序将输出什么？</li>
</ol>
<h2 id="java核心技术面试问题及答案-1"><a href="#java核心技术面试问题及答案-1" class="headerlink" title="java核心技术面试问题及答案"></a>java核心技术面试问题及答案</h2><h3 id="1-java-8发布了什么重要特性？-1"><a href="#1-java-8发布了什么重要特性？-1" class="headerlink" title="1. java 8发布了什么重要特性？"></a>1. java 8发布了什么重要特性？</h3><p>java 8于2014年3月发布，因此是java面试中的热点问题。如果你清楚的回答这个问题，将展示出你对新技术的关注度。</p>
<p>在java 5引入注解和泛型后，java 8是最大（变化）的发布版之一。 java 8有如下重要新特性：</p>
<ol>
<li><a href="https://www.journaldev.com/2752/java-8-interface-changes-static-method-default-method" target="_blank" rel="noopener">接口可以带默认和静态方法。</a></li>
<li><a href="https://www.journaldev.com/2763/java-8-functional-interfaces" target="_blank" rel="noopener">函数式接口和Lambda表达式。</a></li>
<li><a href="https://www.journaldev.com/2774/java-8-stream" target="_blank" rel="noopener">为集合引入的java Stream API。</a></li>
<li><a href="https://www.journaldev.com/2800/java-8-date-localdate-localdatetime-instant" target="_blank" rel="noopener">java 新的日期时间API。</a></li>
</ol>
<p>强烈推荐打开链接了作深入理解，也可以看一下java 8的新特性。</p>
<h3 id="2-你对java的平台独立性Platform-independence的理解是什么？-1"><a href="#2-你对java的平台独立性Platform-independence的理解是什么？-1" class="headerlink" title="2. 你对java的平台独立性Platform independence的理解是什么？"></a>2. 你对java的平台独立性Platform independence的理解是什么？</h3><p>平台独立性意思是在任何操作系统中运行同样的java程序。例如你可以在Windows上写java程序运行在Mac OS上。</p>
<h3 id="3-JVM是什么？JVM是平台独立的吗？-1"><a href="#3-JVM是什么？JVM是平台独立的吗？-1" class="headerlink" title="3. JVM是什么？JVM是平台独立的吗？"></a>3. JVM是什么？JVM是平台独立的吗？</h3><p>JVM是java虚拟机（Java Virtual Machine）的缩写，它是java语言的核心。JVM的责任就是转换字节码到可读的机器码。JVM不是平台独立的，也是为什么我们在不同的操作系统需要不同的JVM的原因。我们用java可选项可以自定义分配内存最小和最大值。java虚拟机之所以被叫做虚拟，是因为他提了一个不依赖于底层操作系统的接口。</p>
<p>阅读更多知识，请访问 <a href="/2020/01/14/jvm-jre-jdk/" title="JVM、JRE和JDK">JVM、JRE和JDK</a> 一文。</p>
<h3 id="4-JDK和JVM的区别是什么？-1"><a href="#4-JDK和JVM的区别是什么？-1" class="headerlink" title="4. JDK和JVM的区别是什么？"></a>4. JDK和JVM的区别是什么？</h3><p>JDK是java开发工具包（java Development Kit）的缩写，它是用于开发目的工具集合。JVM是执行java程序的部分。  </p>
<p>JDK除了包含了一批用于Java开发的组件，还包含JRE,java运行时环境，也包括了用于产品环境的各种库类，如基础类库rt.jar，以及给开发人员使用的补充库，如国际化与本地化的类库、IDL库等等。JDK中还包括各种样例程序，用以展示Java API中的各部分。</p>
<p>JVM是java平台的可执行的部分。JVM屏蔽了与具体操作系统平台相关的信息，使得Java程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。由于JVM并不是专为Java所实现的运行时，实际上只要有其他编程语言的编译器能生成正确Java bytecode文件，则这个语言也能实现在JVM上运行。</p>
<h3 id="5-JVM和JRE的区别是什么？-1"><a href="#5-JVM和JRE的区别是什么？-1" class="headerlink" title="5. JVM和JRE的区别是什么？"></a>5. JVM和JRE的区别是什么？</h3><p>JRE是java运行时环境的缩写（Java Runtime Environment），它是JVM的一种实现。JRE由JVM,java二节文件和其他成功执行任何程序的其他类组成。JRE不包含任何像编译器、调试器等那样的开发工具。如果你想执行任何java程序，你应当安装JRE。</p>
<h3 id="6-所有类的的超类是哪个类？-1"><a href="#6-所有类的的超类是哪个类？-1" class="headerlink" title="6. 所有类的的超类是哪个类？"></a>6. 所有类的的超类是哪个类？</h3><p><code>java.lang.Object</code>是所有类的根类，不需要扩展它。</p>
<h3 id="7-为什么java不支持多继承？-1"><a href="#7-为什么java不支持多继承？-1" class="headerlink" title="7. 为什么java不支持多继承？"></a>7. 为什么java不支持多继承？</h3><p>因是“钻石问题（菱形继承问题）” 导致java类不支持多继承。想了解更多“钻石问题”，请阅读<a href="https://www.journaldev.com/1775/multiple-inheritance-in-java" target="_blank" rel="noopener">java中的多继承</a>。</p>
<p>然后多继承在接口中是支持的。一个接口可以扩展多个接口，因为仅仅是声明方法，实现类中将实现它接口的方法。因此在接口中就没有“<br>钻石问题（菱形继承问题）”了。</p>
<h3 id="8-为什么java不是纯面向对象的语言？-1"><a href="#8-为什么java不是纯面向对象的语言？-1" class="headerlink" title="8. 为什么java不是纯面向对象的语言？"></a>8. 为什么java不是纯面向对象的语言？</h3><p>说java不是纯面向对象语言，是因为它支持如int、byte、short、long等原始类型。我相信在写代码时它带来了简捷性。很显然地java有原始类型对应的包装类型表示，从所周知，包装类型除了添加了一些方法，它们没有带来任何好处。</p>
<h3 id="9-path和classpath变量的区别是什么？-1"><a href="#9-path和classpath变量的区别是什么？-1" class="headerlink" title="9. path和classpath变量的区别是什么？"></a>9. path和classpath变量的区别是什么？</h3><p>PATH是一个用在操作系统中定位可执行文件的环境变量（不仅java可执行文件，还有其他如C#,C++等可执行文件）。这就是为什么在安装java时或想任何可执行文件被找到时，我们需要配置目录路径到Path变量的原因。</p>
<p>Classpath是为java指定的用于java可执行文件定位class字节文件的路径变量。在运行java应用程序时将查找这个classpath路径，它可以是目录、ZIP文件、JAR文件等。</p>
<h3 id="10-java中main方法的重要性是什么？-1"><a href="#10-java中main方法的重要性是什么？-1" class="headerlink" title="10. java中main方法的重要性是什么？"></a>10. java中main方法的重要性是什么？</h3><p>main()方法是任何独立的java应用程序的入口点。main的语法是：<code>public static void main(String args[])</code>.</p>
<p>main方法是公用且静态的，输入参数是数组，可以转入运行时参数给它。</p>
<h3 id="11-java中的重载overloading和覆载overriding是什么？-1"><a href="#11-java中的重载overloading和覆载overriding是什么？-1" class="headerlink" title="11. java中的重载overloading和覆载overriding是什么？"></a>11. java中的重载overloading和覆载overriding是什么？</h3><p>有超过一个方法存在相同名称、不同参时，我们称它为重载。</p>
<p>覆载指的是父子类之间存在相同签名的方法。在子类中可以使用@Override注解覆盖父类的方法。</p>
<h3 id="12-能重载main方法吗？-1"><a href="#12-能重载main方法吗？-1" class="headerlink" title="12. 能重载main方法吗？"></a>12. 能重载main方法吗？</h3><p>可以，在类中可以有多个main名字的方法。然而运行时的入口仅查找这个方法<code>public static void main(String args[])</code>.</p>
<h3 id="13-在一个java源文件中能有多个公共类吗？-1"><a href="#13-在一个java源文件中能有多个公共类吗？-1" class="headerlink" title="13. 在一个java源文件中能有多个公共类吗？"></a>13. 在一个java源文件中能有多个公共类吗？</h3><p>在单个java源文件中，不能超过一个公共类。但单个源文件中可以有多个非公共的类。</p>
<h3 id="14-java包是什么？那个包默认被引入？-1"><a href="#14-java包是什么？那个包默认被引入？-1" class="headerlink" title="14. java包是什么？那个包默认被引入？"></a>14. java包是什么？那个包默认被引入？</h3><p>java包是组织java类文件的一种机制。这个组织逻辑可以基于功能或模块。一个类的完整类名应包含包及类名，例如，<code>java.lang.Object</code>是Object类的完整类名，它是java.lang包的一部分。</p>
<p><code>java.lang</code>包是被默认引入的，任何类中它不需要明确引入。</p>
<h3 id="15-java的访问修饰符有哪些？-1"><a href="#15-java的访问修饰符有哪些？-1" class="headerlink" title="15. java的访问修饰符有哪些？"></a>15. java的访问修饰符有哪些？</h3><p>java提供公有public, 私有private和保护protected访问修饰符。若未使用任何修饰符，则被叫做默认default访问修饰符。</p>
<p>java类仅有公有和默认访问修饰符。阅读更多关于<a href="https://www.journaldev.com/2345/java-access-modifiers" target="_blank" rel="noopener">java访问修饰符</a>的知识。</p>
<h3 id="16-final关键字有什么作用？-1"><a href="#16-final关键字有什么作用？-1" class="headerlink" title="16. final关键字有什么作用？"></a>16. final关键字有什么作用？</h3><p>final关键用于确保其他类不能扩展它。如String类就带有final，我们就不能扩展它。</p>
<p>方法前也可以使用final关键字用来确保子类不能覆盖它。</p>
<p>final关键字用在变量前确保只能分配一次值。然而变量的状态是可以改变的，例如可以分配到final变量一次，但是变量的值，在分配之后是可以改变的。</p>
<p>java接口的变量默认就是final且静态static的。</p>
<h3 id="17-static关键字有什么作用？-1"><a href="#17-static关键字有什么作用？-1" class="headerlink" title="17. static关键字有什么作用？"></a>17. static关键字有什么作用？</h3><p>static关键字用在类级别全局的变量，如所有对象将共享同一个变量。</p>
<p>static关键字也可以用在方法前。静态方法仅能访问类的静态变量和调用静态方法。</p>
<p>static关键字用作静态块。静态块是通过java类加载器一次性加载到内存的。常用来初始化静态变量，大多用来创建静态资源。</p>
<p>static关键字用作静态嵌套类。此时能访问变部静态类的静态方法或静态变量。</p>
<p>static关键字用作静态引入。如<code>import static java.lang.Math.PI;</code>，这样就可以直接在当前类中使用PI参数了。</p>
<h3 id="18-java中的finally和finalize有什么作用？-1"><a href="#18-java中的finally和finalize有什么作用？-1" class="headerlink" title="18. java中的finally和finalize有什么作用？"></a>18. java中的finally和finalize有什么作用？</h3><p>finally块用作在try-catch块之后你总想执行的东西。甚至在抛出异常时也会执行。它大多用来释放在try块中创建的资源。</p>
<p>finalize()是Object的protected方法，子类可以覆盖该方法以实现资源清理工作，GC在回收对象之前调用该方法。</p>
<p>finalize()与C++中的析构函数不是对应的。C++中的析构函数调用的时机是确定的（对象离开作用域或delete掉），但java中的finalize的调用具有不确定性。</p>
<p>不建议用finalize方法完成“非内存资源”的清理工作，但建议用于：<br> a.清理本地对象(通过JNI创建的对象)；<br> b.作为确保某些非内存资源(如Socket、文件等)释放的一个补充：在finalize方法中显式调用其他资源释放方法。</p>
<h3 id="19-能声明一个类为静态static类吗？-1"><a href="#19-能声明一个类为静态static类吗？-1" class="headerlink" title="19. 能声明一个类为静态static类吗？"></a>19. 能声明一个类为静态static类吗？</h3><p>不能声明一个类为顶级静态类，但可以声明为嵌套静态类。</p>
<h3 id="20-静态static引入是什么？-1"><a href="#20-静态static引入是什么？-1" class="headerlink" title="20. 静态static引入是什么？"></a>20. 静态static引入是什么？</h3><p>我们访问静态变量或方法一般是通过类访问的。但也可以通过静态引入的方式<code>import static java.lang.Math.PI;</code>使用它。</p>
<p>使用静态引入带来困惑，最好避免使用它，同时使用它还会使代码的可维护性和可读性变差。</p>
<h3 id="21-java带资源的try语句是什么，有什么作用？-1"><a href="#21-java带资源的try语句是什么，有什么作用？-1" class="headerlink" title="21. java带资源的try语句是什么，有什么作用？"></a>21. java带资源的try语句是什么，有什么作用？</h3><p>java 7的新特性,带资源的try语句，用于自动释放资源，相当于try-catch语句块执行了finnaly块。</p>
<h3 id="22-java的多个catch语句块是什么，有什么作用？-1"><a href="#22-java的多个catch语句块是什么，有什么作用？-1" class="headerlink" title="22. java的多个catch语句块是什么，有什么作用？"></a>22. java的多个catch语句块是什么，有什么作用？</h3><p>如果一个try块中有多个异常要被捕获，catch块中的代码会变丑陋的同时还要用多余的代码来记录异常。有鉴于此，java 7的一个新特征是：一个catch子句中可以捕获多个异常。使用管道符(|),如’catch(IOException | SQLException | Exception ex)’捕获异常。</p>
<h3 id="23-静态static语句块是什么，有什么作用？-1"><a href="#23-静态static语句块是什么，有什么作用？-1" class="headerlink" title="23. 静态static语句块是什么，有什么作用？"></a>23. 静态static语句块是什么，有什么作用？</h3><p>静态块是一组语句块，通过java类加载器一次性加载到内存的。常用来初始化静态变量，大多用来创建静态资源。</p>
<h3 id="24-接口是什么，有什么作用-1"><a href="#24-接口是什么，有什么作用-1" class="headerlink" title="24. 接口是什么，有什么作用?"></a>24. 接口是什么，有什么作用?</h3><p>接口是java语言的核心部分，不但用在许多JDK中而且也用在许多框架、工具和java设计模式中。在java中，接口提供了一用实现方式的抽象，用来定义子类需要实现的契约。</p>
<p>在代码中，接口有利于定义类型起始点和创建顶层结构。自从java接口能实现多个接口后，在许多场景下，使用接口更优于超类。</p>
<h3 id="25-抽象类是什么，有什么作用？-1"><a href="#25-抽象类是什么，有什么作用？-1" class="headerlink" title="25. 抽象类是什么，有什么作用？"></a>25. 抽象类是什么，有什么作用？</h3><p>抽象类为子类创建一些默认方法的实现。抽象类可以有未实现的抽象方法。</p>
<p>abstract关键字用来创建抽象类。抽象类不能被实例化，大多是用于子类的扩展。</p>
<h3 id="26-抽象类和接口有什么区别？-1"><a href="#26-抽象类和接口有什么区别？-1" class="headerlink" title="26. 抽象类和接口有什么区别？"></a>26. 抽象类和接口有什么区别？</h3><ul>
<li>abstract用于创建抽象类，而interface用来创建接口。</li>
<li>子类用extends扩展抽象类，而接口使用implements实现接口。</li>
<li>抽象类可以有实现方法，但接口没有。</li>
<li>抽象类有构造器，但接口没有。</li>
<li>抽象类的方法有public, private, protected, static修饰符，但接口的方法是隐式的public和abstract，不需要使用任何的修饰符。</li>
<li>一个类只能扩展最多一个抽象类，但接口可以扩展一个或多个接口。</li>
<li>抽象类可以扩展其他类和实现其他接口，但接口只能扩展其他接口。</li>
<li>抽象类有main入口方法，是可以运行的，但时接口不能。</li>
<li>接口常用来定义契约，但抽象定义契约的同时还可以有方法实现。</li>
</ul>
<h3 id="27-接口能否实现或扩展另一个接口？-1"><a href="#27-接口能否实现或扩展另一个接口？-1" class="headerlink" title="27. 接口能否实现或扩展另一个接口？"></a>27. 接口能否实现或扩展另一个接口？</h3><p>接口不能实现另一个接口，但可以扩展它。因为接口没有实现就没有“钻石问题”。</p>
<h3 id="28-标记接口Marker-interface是什么，有什么作用？-1"><a href="#28-标记接口Marker-interface是什么，有什么作用？-1" class="headerlink" title="28. 标记接口Marker interface是什么，有什么作用？"></a>28. 标记接口Marker interface是什么，有什么作用？</h3><p>标记接口是一个没有任何方法实现的空接口，用于标记实现类有某些功能。从所周知的Serializable和Cloneable就是标记接口。</p>
<h3 id="29-包装类是什么？-1"><a href="#29-包装类是什么？-1" class="headerlink" title="29. 包装类是什么？"></a>29. 包装类是什么？</h3><p>java包装类是8个原始类型对应的对象表示形式。所有的包装类都是不能被继承final和一成不变immutable的。</p>
<h3 id="30-java中的枚举是什么？-1"><a href="#30-java中的枚举是什么？-1" class="headerlink" title="30. java中的枚举是什么？"></a>30. java中的枚举是什么？</h3><p>枚举作为一个新类型，在java 1.5版本引入。它的域由一些固定的常量构成。如，在java中可以使用EAST, WEST, NORTH, SOUTH创建Direction方向的枚举。</p>
<p>与类相似，我们使用enum关键字用于创建一个枚举类型。枚举常量是隐式的静态不能继承的。</p>
<h3 id="31-java注解是什么？-1"><a href="#31-java注解是什么？-1" class="headerlink" title="31. java注解是什么？"></a>31. java注解是什么？</h3><p>java注解提供关于代码的描述信息。它不直接影响代码。注解在java5中被引入。注解是关于嵌套在程序自己中的元数据。可以用过注解解析工具或编译器解析。我们常指定注释在编译时或者在运行时可用。java盎的注解有@Override, @Deprecated and @SuppressWarnings。 </p>
<h3 id="32-java反射API是什么？为什么有它非常重要？-1"><a href="#32-java反射API是什么？为什么有它非常重要？-1" class="headerlink" title="32. java反射API是什么？为什么有它非常重要？"></a>32. java反射API是什么？为什么有它非常重要？</h3><p>java反射API提供查看和修改java应用程序的运行时行为的能力。我们可以查看java类，接口，枚举和它们的方法和域的详情。反射API是一个高级主题，一般的应用中应当避免它。反射API用于反设计模式的场景，如单例模式中调用私有构造器，建返访问修饰调用。</p>
<p>即然一般的应用中应当避免使用反射API，但有它的话还是非常重要。因为我们不能没有如Spring，Hibernate或者Tomcat服务，JBoss之类的框架。它们通过反射API调用适当的方法和实体，使用它做了许多处理。</p>
<h3 id="33-java中的组合（Composition）是什么？-1"><a href="#33-java中的组合（Composition）是什么？-1" class="headerlink" title="33. java中的组合（Composition）是什么？"></a>33. java中的组合（Composition）是什么？</h3><p>组合是在类中实现<code>有has-a</code>关系的一种设计技术。使用对象组合是为了代码重用。</p>
<p>java组合通过引用其他对象的实例变量实现的。使用组合的好处是，我们能够控制其他对象的可见性，在我们需要的时候重用。</p>
<h3 id="34-组合相对与继承有什么好处？-1"><a href="#34-组合相对与继承有什么好处？-1" class="headerlink" title="34. 组合相对与继承有什么好处？"></a>34. 组合相对与继承有什么好处？</h3><p>java编程的最佳实践之一是“组合（Composition）优于继承（Inheritance）”。有以下原因：</p>
<ul>
<li>尽管我们可以不使用超类的方法，但在超类中的任何改变也可能影响到子类。例如，假如我们在子类中有一个方法<code>test()</code>，突然某人在父类引入一个方法<code>test()</code>，那么我们在子类中出现编译错误。组合从没有这种问题，是因为我们仅在需要方法时才使用。</li>
<li>若我们在设计超类时没有掌控，继承会暴露了所有超类的方法和变量到客户端，这样也能导致安全漏洞。组合允许我们对方法提供限制的访问，因此更加安全。</li>
<li>在组合中我们可以运行时绑定，继承绑定是在编译时。因此组合的方法调用更加灵活。</li>
</ul>
<p>你可以在<a href="https://www.journaldev.com/1775/multiple-inheritance-in-java" target="_blank" rel="noopener">java组合vs继承</a>一文中，阅读更多关于组合优于继承的知识。</p>
<h3 id="35-java中怎样对自定义对象集合进行排序？-1"><a href="#35-java中怎样对自定义对象集合进行排序？-1" class="headerlink" title="35. java中怎样对自定义对象集合进行排序？"></a>35. java中怎样对自定义对象集合进行排序？</h3><p>自定义对象集合支持排序需要实现比较Comparable接口。比较接口有<code>compareTo(T obj)</code>方法，它被用于排序的实现，我们可以提供默认的排序方法。</p>
<p>然后，如果想基于不同条件，如员工集合中基于薪资或年龄的排序。我们可以创建多个匿名类的比较器实例实现。</p>
<h3 id="36-java中的内部类是什么-1"><a href="#36-java中的内部类是什么-1" class="headerlink" title="36. java中的内部类是什么?"></a>36. java中的内部类是什么?</h3><p>我们把定义在类的内部的类称为嵌套类。任何非静态的嵌套类被称之为内部类。内部类与类的对象实例相关。它能访问所有变量和外部类的方法。即然内部类是与实例相关，那么它就没有任何静态变量。</p>
<p>在类的内部，可以有本地内部类和匿名内部类。详情请阅读<a href="https://www.journaldev.com/996/java-inner-class" target="_blank" rel="noopener">java内部类</a>。</p>
<h3 id="37-匿名内部类是什么？-1"><a href="#37-匿名内部类是什么？-1" class="headerlink" title="37. 匿名内部类是什么？"></a>37. 匿名内部类是什么？</h3><p>一个本地不带名字的类被叫做匿名内部类。在单个语句中匿名类定义后并立即实例化。匿名内部类总是扩展自一个类或者实现一个接口。</p>
<p>既然匿名类没有名字，那么它也没有定义构造器。匿名内部类仅在定义的地方可以访问。</p>
<h3 id="38-java类加载器Classloader是什么？-1"><a href="#38-java类加载器Classloader是什么？-1" class="headerlink" title="38. java类加载器Classloader是什么？"></a>38. java类加载器Classloader是什么？</h3><p>java类加载器是在我们想访问任何类时，加载字节码程序到内存的一种程序。我们也可以扩散ClassLoader类和覆载loadClass(String name)方法定义自己的类加载器。了解更多关于<a href="https://www.journaldev.com/349/java-classloader" target="_blank" rel="noopener">java类加器</a>。</p>
<h3 id="39-类加载器的不同类型是什么？-1"><a href="#39-类加载器的不同类型是什么？-1" class="headerlink" title="39. 类加载器的不同类型是什么？"></a>39. 类加载器的不同类型是什么？</h3><p>在java中提供以下三个内建的类加载器：</p>
<ol>
<li>引导类加载器（Bootstrap Class Loader）：它用来加载JDK内存类，典型的加载rt.jar和其他核心类。它是用原生代码来实现的，并不继承自 java.lang.ClassLoader。</li>
<li>扩展类加载器（Extensions Class Loader）：它用来加载 JDK 的扩展库。常常加载$jAVA_HOME/lib/ext目录库。</li>
<li>系统类加载器（System Class Loader）：它根据 java 应用的类路径（CLASSPATH）来加载 java 类。一般来说，java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader()来获取它。</li>
</ol>
<h3 id="40-java中的三元操作符是什么？-1"><a href="#40-java中的三元操作符是什么？-1" class="headerlink" title="40. java中的三元操作符是什么？"></a>40. java中的三元操作符是什么？</h3><p>java三元操作符仅是一个带三个表达式的条件操作符。可以使用if-then-else语句替换。例如<code>a==b?a:b</code>。</p>
<h3 id="41-super关键字做什么用的？-1"><a href="#41-super关键字做什么用的？-1" class="headerlink" title="41. super关键字做什么用的？"></a>41. super关键字做什么用的？</h3><p>super用作子类中访问父类构造器或父类方法。访问类构造器是须放在第一条语句且只能在构造器中访问。</p>
<h3 id="42-break和continue语句是什么，怎么用？-1"><a href="#42-break和continue语句是什么，怎么用？-1" class="headerlink" title="42. break和continue语句是什么，怎么用？"></a>42. break和continue语句是什么，怎么用？</h3><p>放在循环语句中用来结束循环，break结束整个循环，continue结束本次循环。</p>
<h3 id="43-this关键字是什么，怎么用？-1"><a href="#43-this关键字是什么，怎么用？-1" class="headerlink" title="43. this关键字是什么，怎么用？"></a>43. this关键字是什么，怎么用？</h3><p>用于访问当前对象的引用。大多被用于确保是当前对象的变量（相对于入参变量来说），也可以用来调用当前对象的其他构造器。</p>
<h3 id="44-默认构造器是什么？-1"><a href="#44-默认构造器是什么？-1" class="headerlink" title="44. 默认构造器是什么？"></a>44. 默认构造器是什么？</h3><p>类的无参构造器被称为默认构造器。在我们没有定义任何类构造器时，java编译器会自动创建类的默认无参构造器。如果定义了有其他构造器，则编译器不会为我们创建默认构造器。</p>
<h3 id="45-try可以不带catch语句块吗？-1"><a href="#45-try可以不带catch语句块吗？-1" class="headerlink" title="45. try可以不带catch语句块吗？"></a>45. try可以不带catch语句块吗？</h3><p>可以。可以有try-finally语句块，于是就避免带catch语句块了。</p>
<h3 id="46-垃圾收集器Garbage-Collection是什么？-1"><a href="#46-垃圾收集器Garbage-Collection是什么？-1" class="headerlink" title="46. 垃圾收集器Garbage Collection是什么？"></a>46. 垃圾收集器Garbage Collection是什么？</h3><p>垃圾收集器查看堆内存的处理器，识别哪个对象在使用中和哪个不在使用中，然后删除不使用的对象。销毁内存是通过垃圾收集器自动进行处理的。</p>
<p>我们可以使用代码<code>Runtime.getRuntime().gc()</code>或者使用工具方法<code>System.gc()</code>运行垃圾收集器。更多堆内存和垃圾收集器详细分析，请阅读“<a href="https://www.journaldev.com/2856/java-jvm-memory-model-memory-management-in-java" target="_blank" rel="noopener">垃圾收集器</a>”。</p>
<h3 id="47-序列化Serialization和反序列化Deserialization是什么？-1"><a href="#47-序列化Serialization和反序列化Deserialization是什么？-1" class="headerlink" title="47. 序列化Serialization和反序列化Deserialization是什么？"></a>47. 序列化Serialization和反序列化Deserialization是什么？</h3><p>我们把java对象转换成二进制流的过程被称做为序列化。一旦一个对象被转换成二进制流，它就可以侦破到文件或通过网络发送或在套接字连接中使用。</p>
<p>对象应当实现序列化Serializable接口，这样我们就可以使用<code>java.io.ObjectOutputStream</code>写入对象到文件或者任何输出流OutputStream对象了。阅读更多<a href="https://www.journaldev.com/927/objectoutputstream-java-write-object-file" target="_blank" rel="noopener">java序列化</a>知识。</p>
<p>把二进制流数据转换成对象的过程被称做为反序列化。阅读更多<a href="https://www.journaldev.com/933/objectinputstream-java-read-object-file" target="_blank" rel="noopener">java反序列化</a>知识。</p>
<h3 id="48-通过命令提示行怎样运行JAR文件？-1"><a href="#48-通过命令提示行怎样运行JAR文件？-1" class="headerlink" title="48. 通过命令提示行怎样运行JAR文件？"></a>48. 通过命令提示行怎样运行JAR文件？</h3><p>能使用命令行运行jar包文件，但需要在jar清单文件中有Main入口类。含Main的类是jar包的入口点，用来通过java命令执行。</p>
<h3 id="49-System类的用途是什么？-1"><a href="#49-System类的用途是什么？-1" class="headerlink" title="49. System类的用途是什么？"></a>49. System类的用途是什么？</h3><p>java System类是核心类之一，<code>System.out.print()</code>是其中一个方法。在调试时，它是最简单的记录日志信息的方法。</p>
<p>System类被声明为final的。因此无法被子类继承和覆盖其行为。也不提供任何公共构造器，因此也不能实例这个类。也是为什么它的所有方法是静态static的原因。</p>
<p>System类提供了数组拷贝、获取当前时间、读环境变化等助手类方法。阅读更多<a href="https://www.journaldev.com/1847/java-system-java-lang-system-class" target="_blank" rel="noopener">java System类</a>知识。</p>
<h3 id="50-instanceof关键字的用途是什么？-1"><a href="#50-instanceof关键字的用途是什么？-1" class="headerlink" title="50. instanceof关键字的用途是什么？"></a>50. instanceof关键字的用途是什么？</h3><p>instanceof关键字用来检测是否属于某个类。我们应当尽可能的避免使用它。</p>
<h3 id="51-switch-case语句中能使用字符串类型吗？-1"><a href="#51-switch-case语句中能使用字符串类型吗？-1" class="headerlink" title="51. switch case语句中能使用字符串类型吗？"></a>51. switch case语句中能使用字符串类型吗？</h3><p>java 7引入的新特性之一，switch case语句中可以使用字符串类型。因此java 7或更高版本可以使用。</p>
<h3 id="52-java是通过值传递还是通过引用传递？-1"><a href="#52-java是通过值传递还是通过引用传递？-1" class="headerlink" title="52. java是通过值传递还是通过引用传递？"></a>52. java是通过值传递还是通过引用传递？</h3><p>这个问题非常具有迷惑性。我们知道对象变量在堆空间中包含引用的对象。在我们调用任何方法时，这个变量的拷贝被转递并存储在方法的栈内存中。我们能够检测到任何语言它是通过引用或通过值传递通过一个简单的交换方法，请阅读<a href="https://www.journaldev.com/3884/java-is-pass-by-value-and-not-pass-by-reference" target="_blank" rel="noopener">更多</a>。由此我们得出java是通过值传递而不是通过引用传递的。</p>
<h3 id="53-堆Heap和栈Stack内存有什么区别？-1"><a href="#53-堆Heap和栈Stack内存有什么区别？-1" class="headerlink" title="53. 堆Heap和栈Stack内存有什么区别？"></a>53. 堆Heap和栈Stack内存有什么区别？</h3><p>堆和栈主要的区别如下：</p>
<ul>
<li>所有应用的部分都使用堆内存，然而只有执行线程使用栈内存。</li>
<li>每当对象被创建时，它总是存在堆空间中，栈内存包含它的引用。栈内存仅包括本地的原始变量，在堆空间中的对象的引用变量。<br>*栈内存是通后进先出LIFO的方法管理的，然而在堆内存中因为它是全局使用，所以它的管理方式更加复杂。</li>
</ul>
<p>在同一程序中更加详细的解释，请阅读<a href="https://www.journaldev.com/4098/java-heap-space-vs-stack-memory" target="_blank" rel="noopener">java堆vs栈内存</a></p>
<h3 id="54-java编译器是存储在JDK，JRE或JVM哪一个中？-1"><a href="#54-java编译器是存储在JDK，JRE或JVM哪一个中？-1" class="headerlink" title="54. java编译器是存储在JDK，JRE或JVM哪一个中？"></a>54. java编译器是存储在JDK，JRE或JVM哪一个中？</h3><p>java编译器的任务是转换java程序到字节码，我们使用<code>javac</code>命令执行即可实现。因此它必须要存在JDK中。</p>
<h3 id="55-如下程序将输出什么？-1"><a href="#55-如下程序将输出什么？-1" class="headerlink" title="55. 如下程序将输出什么？"></a>55. 如下程序将输出什么？</h3><ol>
<li>在类中的静态方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tests;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Test toString called"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>答：以上代码不能编译。因为所有类对继承根对象类Object。以上会编译错误提示静态方法不能覆盖实例方法。</p>
<ol>
<li>静态方法调用</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tests;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Test foo called"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Test obj = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(obj.foo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>答：这是个奇怪的使用场景。NULL空对象调用方法是总会报<code>NullPointerException</code>异常，且该方法是属于类的静态方法，但该程序能工作并打印”Test foo called”。</p>
<p>原因是编译器做了编译优化。在java编译转换成字节码时，它指向的foo()是静态方法，而不是对象方法，因此编译从<code>obj.foo()</code>调整到<code>Test.foo()</code>，于是也没有了<code>NullPointerException</code>异常。</p>
<p><a href="https://www.journaldev.com/2366/core-java-interview-questions-and-answers#public-class" target="_blank" rel="noopener">原文</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java,core,interview,核心技术,编程,面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[model]]></title>
      <url>/2020/01/14/model/</url>
      <content type="html"><![CDATA[<p>model</p>
<a id="more"></a>
<h2 id="后台架构"><a href="#后台架构" class="headerlink" title="后台架构"></a>后台架构</h2><h3 id="数据概述"><a href="#数据概述" class="headerlink" title="数据概述"></a>数据概述</h3><p>今日订单数总数</p>
<p>今日营业额</p>
<p>今日ip访问量</p>
<p>今日新增会员</p>
<p>今日新增代言人</p>
<p>今日新增合伙人</p>
<p>今日新增董事</p>
<p>今日已发货</p>
<p>累计营业额</p>
<p>累计订单数</p>
<p>累计用户人数</p>
<p>累计分公司数</p>
<p>累计董事数</p>
<p>累计合伙人数</p>
<p>累计代言人数</p>
<p>累计用户数</p>
<p>实时订单地图显示</p>
<h3 id="订单管理"><a href="#订单管理" class="headerlink" title="订单管理"></a>订单管理</h3><h4 id="待发货"><a href="#待发货" class="headerlink" title="待发货"></a>待发货</h4><p>订单编号</p>
<p>姓名</p>
<p>时间</p>
<p>收货人</p>
<p>收货电话</p>
<p>收货地址</p>
<p>产品名称</p>
<p>产品数量</p>
<p>产品型号</p>
<p>订单留言</p>
<p>支付方式</p>
<ul>
<li><p>支付宝</p>
</li>
<li><p>微信支付</p>
</li>
<li><p>银联支付</p>
</li>
<li><p>预付款支付</p>
<ul>
<li>预付款支付不计算业绩</li>
</ul>
</li>
</ul>
<p>订单处理代理</p>
<ul>
<li><p>规则</p>
<ol>
<li><p>下级提交上级</p>
</li>
<li><p>同级提交上级</p>
</li>
<li><p>董事提交公司</p>
</li>
<li><p>订单提交第一个预存款级别扣除, 然后订单到仓库</p>
</li>
</ol>
</li>
</ul>
<p>预存款扣除金额</p>
<p>上级处理</p>
<ul>
<li><p>未处理</p>
</li>
<li><p>已处理</p>
</li>
</ul>
<p>发货状态</p>
<ul>
<li>未发货</li>
</ul>
<p>物流公司</p>
<ul>
<li>无</li>
</ul>
<p>快递单号</p>
<ul>
<li>无</li>
</ul>
<p>操作</p>
<ul>
<li><p>修改</p>
</li>
<li><p>删除</p>
</li>
</ul>
<h4 id="仓库发货订单"><a href="#仓库发货订单" class="headerlink" title="仓库发货订单"></a>仓库发货订单</h4><h4 id="已发货"><a href="#已发货" class="headerlink" title="已发货"></a>已发货</h4><h4 id="已完成订单"><a href="#已完成订单" class="headerlink" title="已完成订单"></a>已完成订单</h4><h4 id="作废订单"><a href="#作废订单" class="headerlink" title="作废订单"></a>作废订单</h4><h4 id="学习订单"><a href="#学习订单" class="headerlink" title="学习订单"></a>学习订单</h4><p>会务费</p>
<ul>
<li><p>订单编号</p>
</li>
<li><p>姓名</p>
</li>
<li><p>时间</p>
</li>
<li><p>联系电话</p>
</li>
<li><p>产品数量</p>
</li>
<li><p>产品型号</p>
</li>
<li><p>订单留言</p>
</li>
<li><p>支付方式</p>
<ul>
<li><p>支付宝</p>
</li>
<li><p>微信支付</p>
</li>
<li><p>银联支付</p>
</li>
</ul>
</li>
<li><p>上级名字</p>
</li>
<li><p>订单详情</p>
</li>
<li><p>会务费</p>
</li>
<li><p>课程付费</p>
</li>
<li><p>操作</p>
<ul>
<li><p>修改</p>
</li>
<li><p>删除</p>
</li>
</ul>
</li>
</ul>
<p>课程费</p>
<ul>
<li><p>订单编号</p>
</li>
<li><p>姓名</p>
</li>
<li><p>时间</p>
</li>
<li><p>联系电话</p>
</li>
<li><p>产品数量</p>
</li>
<li><p>产品型号</p>
</li>
<li><p>订单留言</p>
</li>
<li><p>支付方式</p>
<ul>
<li><p>支付宝</p>
</li>
<li><p>微信支付</p>
</li>
<li><p>银联支付</p>
</li>
</ul>
</li>
<li><p>上级名字</p>
</li>
<li><p>订单详情</p>
</li>
<li><p>会务费</p>
</li>
<li><p>课程付费</p>
</li>
<li><p>操作</p>
<ul>
<li><p>修改</p>
</li>
<li><p>删除</p>
</li>
</ul>
</li>
</ul>
<h3 id="预存款管理"><a href="#预存款管理" class="headerlink" title="预存款管理"></a>预存款管理</h3><h4 id="预存款审核"><a href="#预存款审核" class="headerlink" title="预存款审核"></a>预存款审核</h4><p>ID</p>
<p>名字</p>
<p>级别</p>
<p>上级董事或分公司</p>
<p>预存款金额</p>
<p>预存款时间</p>
<p>公司处理</p>
<ul>
<li><p>已处理</p>
<ul>
<li>通过审核则计算业绩</li>
</ul>
</li>
<li><p>未处理</p>
</li>
</ul>
<p>公司处理人</p>
<h4 id="添加预存款"><a href="#添加预存款" class="headerlink" title="添加预存款"></a>添加预存款</h4><p>ID</p>
<p>名字</p>
<p>级别</p>
<p>上级董事或分公司</p>
<p>预存款金额</p>
<ul>
<li>添加预存款则计算业绩</li>
</ul>
<p>预存款时间</p>
<p>公司添加人</p>
<h4 id="预存款消费记录"><a href="#预存款消费记录" class="headerlink" title="预存款消费记录"></a>预存款消费记录</h4><p>ID</p>
<p>名字</p>
<p>级别</p>
<p>上级董事或分公司</p>
<p>预存款金额剩余</p>
<p>预存款消费记录</p>
<h3 id="代理管理"><a href="#代理管理" class="headerlink" title="代理管理"></a>代理管理</h3><h4 id="代理管理-1"><a href="#代理管理-1" class="headerlink" title="代理管理"></a>代理管理</h4><h5 id="添加代理"><a href="#添加代理" class="headerlink" title="添加代理"></a>添加代理</h5><h5 id="备份代理"><a href="#备份代理" class="headerlink" title="备份代理"></a>备份代理</h5><h5 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h5><p>代理级别</p>
<ul>
<li><p>代言人</p>
</li>
<li><p>合伙人</p>
</li>
<li><p>董事</p>
</li>
</ul>
<p>名字/id/电话号码</p>
<h5 id="代理信息"><a href="#代理信息" class="headerlink" title="代理信息"></a>代理信息</h5><p>ID号</p>
<p>姓名</p>
<p>电话</p>
<p>微信号</p>
<p>注册时间</p>
<p>级别</p>
<p>钱包</p>
<ul>
<li><p>预存款</p>
<ul>
<li>购买记录</li>
</ul>
</li>
<li><p>可提现金额</p>
<ul>
<li><p>预存款变现</p>
</li>
<li><p>营销收入</p>
</li>
<li><p>计算方法</p>
<ol>
<li><p>有预存款</p>
<ol>
<li><p>预存款减去进货金额</p>
</li>
<li><p>可提现金额出现支付金额</p>
</li>
</ol>
</li>
<li><p>没有预存款</p>
<p> 可提现金额出现支付金额    </p>
</li>
</ol>
</li>
</ul>
</li>
<li><p>营销收入明细</p>
<ul>
<li><p>个人销售收入</p>
<p>  零售价减去进货价</p>
</li>
<li><p>代理销售</p>
<p>  当前级别进货金额减去下级代理进货金额</p>
</li>
<li><p>公司返点</p>
<ul>
<li><p>返点规则</p>
<ul>
<li><p>董事级别</p>
<ol>
<li><p>下级董事每销售一盒奖励6元</p>
</li>
<li><p>下级董事的下级董事销售一盒奖励6元</p>
</li>
<li><p>最多两级董事</p>
</li>
<li><p>成为董事业绩断开</p>
</li>
</ol>
</li>
<li><p>合伙人级别</p>
<ol>
<li><p>下级合伙人每销售一盒奖励6元</p>
</li>
<li><p>下级合伙人的下级合伙人销售一盒奖励6元</p>
</li>
<li><p>最多两级合伙人</p>
</li>
<li><p>成为董事业绩断开</p>
</li>
<li><p>每位合伙人返点一笔金额则上级董事返点金额里减去相等金额</p>
</li>
</ol>
</li>
<li><p>代言人没有公司返点</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>月份收入记录</p>
</li>
</ul>
</li>
<li><p>提现记录</p>
</li>
</ul>
<p>上级董事</p>
<p>上级合伙人</p>
<p>邀请人数</p>
<p>下级代理树</p>
<ul>
<li><p>下级代理/会员列表</p>
</li>
<li><p>画出关系树</p>
</li>
</ul>
<p>状态</p>
<ul>
<li><p>正常</p>
</li>
<li><p>冻结</p>
<ul>
<li>不可以提现</li>
</ul>
</li>
<li><p>待审核</p>
</li>
</ul>
<p>会员主页</p>
<ul>
<li><p>时间</p>
<ul>
<li>历史时间</li>
</ul>
</li>
<li><p>BMI</p>
<ul>
<li>历史记录</li>
</ul>
</li>
<li><p>体脂率</p>
<ul>
<li>历史记录</li>
</ul>
</li>
<li><p>体水分</p>
<ul>
<li>历史记录</li>
</ul>
</li>
<li><p>固含量</p>
<ul>
<li>历史记录</li>
</ul>
</li>
<li><p>基础代谢</p>
<ul>
<li>历史记录</li>
</ul>
</li>
<li><p>内脏脂肪</p>
<ul>
<li>历史记录</li>
</ul>
</li>
<li><p>身体年龄</p>
<ul>
<li>历史记录</li>
</ul>
</li>
<li><p>蛋白率</p>
<ul>
<li>历史记录</li>
</ul>
</li>
<li><p>标准体重</p>
<ul>
<li>历史记录</li>
</ul>
</li>
<li><p>脂肪量</p>
<ul>
<li>历史记录</li>
</ul>
</li>
<li><p>肌肉量</p>
<ul>
<li>历史记录</li>
</ul>
</li>
<li><p>蛋白量</p>
<ul>
<li>历史记录</li>
</ul>
</li>
<li><p>肥胖等级</p>
<ul>
<li>历史记录</li>
</ul>
</li>
</ul>
<p>积分</p>
<p>操作</p>
<ul>
<li><p>通过</p>
</li>
<li><p>修改</p>
</li>
<li><p>删除</p>
</li>
</ul>
<h4 id="代理审核（同上代理信息）"><a href="#代理审核（同上代理信息）" class="headerlink" title="代理审核（同上代理信息）"></a>代理审核（同上代理信息）</h4><h4 id="代理关系"><a href="#代理关系" class="headerlink" title="代理关系"></a>代理关系</h4><p>代理树图</p>
<h4 id="新晋代理"><a href="#新晋代理" class="headerlink" title="新晋代理"></a>新晋代理</h4><p>新晋统计表格</p>
<h4 id="代理发展统计"><a href="#代理发展统计" class="headerlink" title="代理发展统计"></a>代理发展统计</h4><p>每月新增代理发展统计曲线图</p>
<h3 id="分公司管理"><a href="#分公司管理" class="headerlink" title="分公司管理"></a>分公司管理</h3><h4 id="分公司管理-1"><a href="#分公司管理-1" class="headerlink" title="分公司管理"></a>分公司管理</h4><h5 id="添加分公司"><a href="#添加分公司" class="headerlink" title="添加分公司"></a>添加分公司</h5><h5 id="备份分公司"><a href="#备份分公司" class="headerlink" title="备份分公司"></a>备份分公司</h5><h5 id="搜索-1"><a href="#搜索-1" class="headerlink" title="搜索"></a>搜索</h5><p>代理级别</p>
<ul>
<li><p>代言人</p>
</li>
<li><p>合伙人</p>
</li>
<li><p>董事</p>
</li>
</ul>
<p>名字/id/电话号码</p>
<h5 id="分公司信息"><a href="#分公司信息" class="headerlink" title="分公司信息"></a>分公司信息</h5><p>ID号</p>
<p>姓名</p>
<p>电话</p>
<p>微信号</p>
<p>注册时间</p>
<p>级别</p>
<p>钱包</p>
<ul>
<li>同前所述</li>
</ul>
<p>上级董事</p>
<p>上级合伙人</p>
<p>邀请人数</p>
<p>下级代理树</p>
<ul>
<li><p>下级代理/会员列表</p>
</li>
<li><p>画出关系树</p>
</li>
</ul>
<p>状态</p>
<ul>
<li><p>正常</p>
</li>
<li><p>冻结</p>
<ul>
<li>不可以提现</li>
</ul>
</li>
<li><p>待审核</p>
</li>
</ul>
<p>健康数据</p>
<ul>
<li>同前所述</li>
</ul>
<h4 id="分公司审核（同上代理信息）"><a href="#分公司审核（同上代理信息）" class="headerlink" title="分公司审核（同上代理信息）"></a>分公司审核（同上代理信息）</h4><h3 id="会员管理"><a href="#会员管理" class="headerlink" title="会员管理"></a>会员管理</h3><p>同前所述 （分公司管理）</p>
<h3 id="业绩查询"><a href="#业绩查询" class="headerlink" title="业绩查询"></a>业绩查询</h3><h4 id="搜索查找"><a href="#搜索查找" class="headerlink" title="搜索查找"></a>搜索查找</h4><p>时间</p>
<p>id号</p>
<p>名字</p>
<p>电话</p>
<h4 id="分公司"><a href="#分公司" class="headerlink" title="分公司"></a>分公司</h4><p>ID</p>
<p>名字</p>
<p>级别</p>
<p>上级董事或分公司</p>
<p>个人销售业绩合计</p>
<ul>
<li>订单列表</li>
</ul>
<p>下级所有个人销售业绩合计</p>
<ul>
<li>名字列表</li>
</ul>
<p>预存款月总计</p>
<h4 id="董事"><a href="#董事" class="headerlink" title="董事"></a>董事</h4><p>ID</p>
<p>名字</p>
<p>级别</p>
<p>上级董事或分公司</p>
<p>个人销售业绩合计</p>
<ul>
<li>订单列表</li>
</ul>
<p>下级所有个人销售业绩合计</p>
<ul>
<li>名字列表</li>
</ul>
<p>预存款月总计</p>
<h4 id="合伙人"><a href="#合伙人" class="headerlink" title="合伙人"></a>合伙人</h4><p>ID</p>
<p>名字</p>
<p>级别</p>
<p>上级董事或分公司</p>
<p>个人销售业绩合计</p>
<ul>
<li>订单列表</li>
</ul>
<p>下级所有个人销售业绩合计</p>
<ul>
<li>名字列表</li>
</ul>
<p>预存款月总计</p>
<h4 id="代言人"><a href="#代言人" class="headerlink" title="代言人"></a>代言人</h4><p>ID</p>
<p>名字</p>
<p>级别</p>
<p>上级合伙人</p>
<p>个人销售业绩合计</p>
<ul>
<li>订单列表</li>
</ul>
<p>下级所有个人销售业绩合计</p>
<ul>
<li>名字列表</li>
</ul>
<p>预存款月总计</p>
<h3 id="商品管理"><a href="#商品管理" class="headerlink" title="商品管理"></a>商品管理</h3><h4 id="商品管理-1"><a href="#商品管理-1" class="headerlink" title="商品管理"></a>商品管理</h4><h5 id="添加商品"><a href="#添加商品" class="headerlink" title="添加商品"></a>添加商品</h5><p>商品名称</p>
<p>商品规格</p>
<p>商品型号</p>
<p>商品图片</p>
<p>商品详情</p>
<p>商品属性</p>
<ul>
<li><p>正品销售</p>
</li>
<li><p>积分兑换</p>
</li>
</ul>
<p>商品价格</p>
<ul>
<li><p>统一零售价</p>
</li>
<li><p>代言人价格</p>
</li>
<li><p>合伙人价格</p>
</li>
<li><p>董事价格</p>
</li>
</ul>
<p>是否计算业绩</p>
<p>是否扫码发货</p>
<p>是否上架下架</p>
<h5 id="商品列表"><a href="#商品列表" class="headerlink" title="商品列表"></a>商品列表</h5><p>商品名称</p>
<p>商品规格</p>
<p>商品型号</p>
<p>商品属性</p>
<ul>
<li><p>正品销售</p>
</li>
<li><p>积分兑换</p>
</li>
</ul>
<p>商品价格</p>
<ul>
<li><p>统一零售价</p>
</li>
<li><p>代言人价格</p>
</li>
<li><p>合伙人价格</p>
</li>
<li><p>董事价格</p>
</li>
</ul>
<p>是否计算业绩</p>
<p>是否扫码发货</p>
<p>是否上架下架</p>
<p>库存数量</p>
<ul>
<li>不可修改</li>
</ul>
<p>操作</p>
<ul>
<li><p>删除</p>
</li>
<li><p>修改</p>
</li>
</ul>
<h4 id="库存管理"><a href="#库存管理" class="headerlink" title="库存管理"></a>库存管理</h4><h5 id="商品列表-1"><a href="#商品列表-1" class="headerlink" title="商品列表"></a>商品列表</h5><p>商品名称</p>
<p>商品规格</p>
<p>商品型号</p>
<p>商品价格</p>
<ul>
<li><p>统一零售价</p>
</li>
<li><p>代言人价格</p>
</li>
<li><p>合伙人价格</p>
</li>
<li><p>董事价格</p>
</li>
</ul>
<p>是否计算业绩</p>
<p>是否扫码发货</p>
<p>是否上架下架</p>
<p>库存数量</p>
<p>入库</p>
<h5 id="出库发货记录"><a href="#出库发货记录" class="headerlink" title="出库发货记录"></a>出库发货记录</h5><p>每日订单发货详情</p>
<h3 id="素材管理"><a href="#素材管理" class="headerlink" title="素材管理"></a>素材管理</h3><h4 id="商学院"><a href="#商学院" class="headerlink" title="商学院"></a>商学院</h4><h5 id="添加素材"><a href="#添加素材" class="headerlink" title="添加素材"></a>添加素材</h5><ul>
<li><p>添加素材</p>
<ul>
<li><p>音频</p>
<ul>
<li><p>图文标题</p>
</li>
<li><p>作者</p>
</li>
<li><p>图文封面</p>
<ul>
<li>上传图片</li>
</ul>
</li>
<li><p>简介</p>
</li>
<li><p>销售模式</p>
<ul>
<li><p>作为单篇销售</p>
<ul>
<li>价格：</li>
</ul>
</li>
<li><p>作为专栏内内容</p>
<ul>
<li>选择专栏</li>
</ul>
</li>
<li><p>代理专项</p>
<ul>
<li><p>董事</p>
</li>
<li><p>合伙人</p>
</li>
<li><p>代言人</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>是否上架</p>
</li>
<li><p>完整音频</p>
</li>
<li><p>图文详情</p>
</li>
</ul>
</li>
<li><p>视频</p>
<ul>
<li><p>图文标题</p>
</li>
<li><p>作者</p>
</li>
<li><p>图文封面</p>
<ul>
<li>上传图片</li>
</ul>
</li>
<li><p>简介</p>
</li>
<li><p>销售模式</p>
<ul>
<li><p>作为单篇销售</p>
<ul>
<li>价格：</li>
</ul>
</li>
<li><p>作为专栏内内容</p>
<ul>
<li>选择专栏</li>
</ul>
</li>
<li><p>代理专项</p>
<ul>
<li><p>董事</p>
</li>
<li><p>合伙人</p>
</li>
<li><p>代言人</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>是否上架</p>
</li>
<li><p>完整视频</p>
</li>
<li><p>图文详情</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>添加专栏</p>
<ul>
<li><p>专栏名称</p>
</li>
<li><p>作者</p>
</li>
<li><p>专栏封面</p>
</li>
<li><p>专栏介绍</p>
</li>
<li><p>价格</p>
</li>
<li><p>专栏详情介绍</p>
</li>
</ul>
</li>
</ul>
<h5 id="素材列表"><a href="#素材列表" class="headerlink" title="素材列表"></a>素材列表</h5><ul>
<li><p>内容列表</p>
<ul>
<li><p>内容名称</p>
</li>
<li><p>销售数量</p>
</li>
<li><p>状态</p>
<ul>
<li><p>已上架</p>
</li>
<li><p>未上架</p>
</li>
</ul>
</li>
<li><p>上架时间</p>
</li>
<li><p>操作</p>
<ul>
<li><p>编辑</p>
</li>
<li><p>删除</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>专栏列表</p>
<ul>
<li><p>专栏名称</p>
</li>
<li><p>已更新篇数</p>
</li>
<li><p>销售数量</p>
</li>
<li><p>状态</p>
<ul>
<li><p>已上架</p>
</li>
<li><p>未上架</p>
</li>
</ul>
</li>
<li><p>上架时间</p>
</li>
<li><p>操作</p>
<ul>
<li><p>编辑</p>
</li>
<li><p>删除</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="一键转发朋友圈素材"><a href="#一键转发朋友圈素材" class="headerlink" title="一键转发朋友圈素材"></a>一键转发朋友圈素材</h4><h5 id="添加素材-1"><a href="#添加素材-1" class="headerlink" title="添加素材"></a>添加素材</h5><p>日期</p>
<p>文字</p>
<p>图片或视频</p>
<h5 id="历史素材列表"><a href="#历史素材列表" class="headerlink" title="历史素材列表"></a>历史素材列表</h5><p>搜索</p>
<ul>
<li>按日期</li>
</ul>
<p>日期</p>
<p>文字</p>
<p>图片或视频</p>
<p>操作</p>
<ul>
<li><p>删除</p>
</li>
<li><p>修改</p>
</li>
</ul>
<h5 id="晒场"><a href="#晒场" class="headerlink" title="晒场"></a>晒场</h5><p>搜索</p>
<ul>
<li><p>id</p>
</li>
<li><p>姓名</p>
</li>
<li><p>电话</p>
</li>
</ul>
<p>列表</p>
<ul>
<li><p>id</p>
</li>
<li><p>姓名</p>
</li>
<li><p>电话</p>
</li>
<li><p>粉丝</p>
</li>
<li><p>关注</p>
</li>
<li><p>评论</p>
</li>
<li><p>帖子内容</p>
</li>
<li><p>会员主页</p>
<ul>
<li>同前所述</li>
</ul>
</li>
<li><p>推荐精选</p>
<ul>
<li><p>推荐</p>
</li>
<li><p>正常</p>
</li>
</ul>
</li>
<li><p>状态</p>
<ul>
<li><p>正常</p>
</li>
<li><p>举报</p>
</li>
</ul>
</li>
<li><p>操作</p>
<ul>
<li><p>删除</p>
</li>
<li><p>操作</p>
<ul>
<li>是否推荐精选</li>
</ul>
</li>
<li><p>正常</p>
</li>
</ul>
</li>
</ul>
<p>精选</p>
<ul>
<li><p>精选列表</p>
<ul>
<li>同前列表所述</li>
</ul>
</li>
</ul>
<p>口碑</p>
<ul>
<li><p>口碑列表</p>
<ul>
<li>同前列表所述</li>
</ul>
</li>
</ul>
<p>举报</p>
<ul>
<li><p>精选列表</p>
<ul>
<li>同前列表所述</li>
</ul>
</li>
</ul>
<h3 id="积分管理"><a href="#积分管理" class="headerlink" title="积分管理"></a>积分管理</h3><h4 id="积分获得记录"><a href="#积分获得记录" class="headerlink" title="积分获得记录"></a>积分获得记录</h4><p>ID号</p>
<p>姓名</p>
<p>电话</p>
<p>微信号</p>
<p>注册时间</p>
<p>级别</p>
<p>上级董事</p>
<p>上级合伙人</p>
<p>状态</p>
<ul>
<li><p>正常</p>
</li>
<li><p>冻结</p>
<ul>
<li>不可以提现</li>
</ul>
</li>
<li><p>待审核</p>
</li>
</ul>
<p>邀请人数积分</p>
<p>上称次数积分</p>
<p>购买商品获积分</p>
<p>获积分赏</p>
<p>积分</p>
<ul>
<li><p>获积分规则</p>
<ul>
<li><p>上称获积分</p>
</li>
<li><p>分享链接推荐新人注册获积分</p>
</li>
<li><p>积分打赏获积分</p>
</li>
</ul>
</li>
</ul>
<p>操作</p>
<ul>
<li><p>修改</p>
</li>
<li><p>删除</p>
</li>
</ul>
<h4 id="积分兑换记录"><a href="#积分兑换记录" class="headerlink" title="积分兑换记录"></a>积分兑换记录</h4><p>ID号</p>
<p>姓名</p>
<p>电话</p>
<p>微信号</p>
<p>注册时间</p>
<p>级别</p>
<p>上级董事</p>
<p>上级合伙人</p>
<p>状态</p>
<ul>
<li><p>正常</p>
</li>
<li><p>冻结</p>
<ul>
<li>不可以提现</li>
</ul>
</li>
<li><p>待审核</p>
</li>
</ul>
<p>打赏积分使用记录</p>
<p>兑换商品记录</p>
<p>积分结余</p>
<ul>
<li><p>获积分规则</p>
<ul>
<li><p>上称获积分</p>
</li>
<li><p>分享链接推荐新人注册获积分</p>
</li>
<li><p>积分打赏获积分</p>
</li>
</ul>
</li>
</ul>
<p>操作</p>
<ul>
<li><p>修改</p>
</li>
<li><p>删除</p>
</li>
</ul>
<h3 id="财务管理"><a href="#财务管理" class="headerlink" title="财务管理"></a>财务管理</h3><h4 id="总计"><a href="#总计" class="headerlink" title="总计"></a>总计</h4><p>月度营业额</p>
<ul>
<li>详情</li>
</ul>
<p>月度订单数</p>
<ul>
<li>详情</li>
</ul>
<p>月度可提现</p>
<ul>
<li>详情</li>
</ul>
<p>月度已打款</p>
<ul>
<li>详情</li>
</ul>
<p>月度盈利</p>
<ul>
<li>详情</li>
</ul>
<h4 id="搜索查找-1"><a href="#搜索查找-1" class="headerlink" title="搜索查找"></a>搜索查找</h4><p>时间</p>
<p>id号</p>
<p>名字</p>
<p>电话</p>
<h4 id="分公司-1"><a href="#分公司-1" class="headerlink" title="分公司"></a>分公司</h4><p>ID</p>
<p>名字</p>
<p>级别</p>
<p>上级董事或分公司</p>
<p>个人销售业绩合计</p>
<ul>
<li>订单列表</li>
</ul>
<p>下级所有个人销售业绩合计</p>
<ul>
<li>名字列表</li>
</ul>
<p>预存款月总计</p>
<p>钱包</p>
<ul>
<li>同前所述</li>
</ul>
<p>可提现金额</p>
<p>申请提现金额</p>
<p>已经打款金额</p>
<p>打款记录</p>
<p>打款凭证</p>
<p>操作</p>
<ul>
<li>修改</li>
</ul>
<h4 id="董事-1"><a href="#董事-1" class="headerlink" title="董事"></a>董事</h4><p>ID</p>
<p>名字</p>
<p>级别</p>
<p>上级董事或分公司</p>
<p>个人销售业绩合计</p>
<ul>
<li>订单列表</li>
</ul>
<p>下级所有个人销售业绩合计</p>
<ul>
<li>名字列表</li>
</ul>
<p>预存款月总计</p>
<p>钱包</p>
<ul>
<li>同前所述</li>
</ul>
<p>可提现金额</p>
<p>申请提现金额</p>
<p>已经打款金额</p>
<p>打款记录</p>
<p>打款凭证</p>
<p>操作</p>
<ul>
<li>修改</li>
</ul>
<h4 id="合伙人-1"><a href="#合伙人-1" class="headerlink" title="合伙人"></a>合伙人</h4><p>ID</p>
<p>名字</p>
<p>级别</p>
<p>上级董事或分公司</p>
<p>个人销售业绩合计</p>
<ul>
<li>订单列表</li>
</ul>
<p>下级所有个人销售业绩合计</p>
<ul>
<li>名字列表</li>
</ul>
<p>预存款月总计</p>
<p>钱包</p>
<ul>
<li>同前所述</li>
</ul>
<p>可提现金额</p>
<p>申请提现金额</p>
<p>已经打款金额</p>
<p>打款记录</p>
<p>打款凭证</p>
<p>操作</p>
<ul>
<li>修改修改</li>
</ul>
<h4 id="代言人-1"><a href="#代言人-1" class="headerlink" title="代言人"></a>代言人</h4><p>ID</p>
<p>名字</p>
<p>级别</p>
<p>上级董事或分公司</p>
<p>个人销售业绩合计</p>
<ul>
<li>订单列表</li>
</ul>
<p>下级所有个人销售业绩合计</p>
<ul>
<li>名字列表</li>
</ul>
<p>预存款月总计</p>
<p>钱包</p>
<ul>
<li>同前所述</li>
</ul>
<p>可提现金额</p>
<p>申请提现金额</p>
<p>已经打款金额</p>
<p>打款记录</p>
<p>打款凭证</p>
<p>操作</p>
<ul>
<li>修改</li>
</ul>
<h3 id="管理员管理"><a href="#管理员管理" class="headerlink" title="管理员管理"></a>管理员管理</h3><h4 id="添加管理员"><a href="#添加管理员" class="headerlink" title="添加管理员"></a>添加管理员</h4><p>姓名</p>
<p>电话</p>
<p>身份证号码</p>
<p>职位</p>
<p>登陆账号</p>
<p>登陆密码</p>
<p>使用权限</p>
<h4 id="管理员列表"><a href="#管理员列表" class="headerlink" title="管理员列表"></a>管理员列表</h4><p>姓名</p>
<p>电话</p>
<p>职位</p>
<p>操作</p>
<ul>
<li><p>修改</p>
</li>
<li><p>删除</p>
</li>
</ul>
<h3 id="商品防伪"><a href="#商品防伪" class="headerlink" title="商品防伪"></a>商品防伪</h3><h4 id="防伪码生成"><a href="#防伪码生成" class="headerlink" title="防伪码生成"></a>防伪码生成</h4><h5 id="导出唯一防伪码"><a href="#导出唯一防伪码" class="headerlink" title="导出唯一防伪码"></a>导出唯一防伪码</h5><p>一大箱一个大码</p>
<ul>
<li>大编码下面N个小编码</li>
</ul>
<h4 id="已经入库编码"><a href="#已经入库编码" class="headerlink" title="已经入库编码"></a>已经入库编码</h4><p>扫码入库</p>
<h4 id="未出库编码"><a href="#未出库编码" class="headerlink" title="未出库编码"></a>未出库编码</h4><p>扫码出库</p>
<h3 id="投诉建议"><a href="#投诉建议" class="headerlink" title="投诉建议"></a>投诉建议</h3><p>会员投诉</p>
<p>代理投诉</p>
<h3 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h3><h4 id="积分设置"><a href="#积分设置" class="headerlink" title="积分设置"></a>积分设置</h4><p>上称一次获积分</p>
<p>消费1元获积分</p>
<p>打赏获积分</p>
<p>分享链接获积分</p>
<h4 id="代理返利设置"><a href="#代理返利设置" class="headerlink" title="代理返利设置"></a>代理返利设置</h4><p>分公司奖励</p>
<p>董事平级奖励</p>
<h4 id="升级门槛设置（千元）"><a href="#升级门槛设置（千元）" class="headerlink" title="升级门槛设置（千元）"></a>升级门槛设置（千元）</h4><p>分公司</p>
<ul>
<li>400k</li>
</ul>
<p>董事</p>
<ul>
<li>54k</li>
</ul>
<p>合伙人</p>
<ul>
<li>9k</li>
</ul>
<p>代言人</p>
<ul>
<li>1.28k</li>
</ul>
<h4 id="代理证书设置"><a href="#代理证书设置" class="headerlink" title="代理证书设置"></a>代理证书设置</h4>]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> model </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为Spring设置restful基础路径]]></title>
      <url>/2018/11/26/spring-restcontrooler-specific-basepath/</url>
      <content type="html"><![CDATA[<p>由于某些原因，我们会把前端和后端的放在一个站点上，但如果前后端不做分离的话，随着时间推移代码会难以维护。因此就想把静态内容放和后端的接口分开放置，来达到分离的效果。<br><a id="more"></a></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>希望spring有如下URL结构  </p>
<p>/index.html – 静态页<br>/api/user – rest控制器的所有api放在api下</p>
<p>因为是针对所有的RestControllers增加api，而静态页不变，所以有以下两种思路：</p>
<ul>
<li>基于RestController类增加Spring配置</li>
<li>重写RestController注解</li>
</ul>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="基于RestController类增加Spring配置"><a href="#基于RestController类增加Spring配置" class="headerlink" title="基于RestController类增加Spring配置"></a>基于RestController类增加Spring配置</h3><p>目录结构</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcRegistrationsAdapter <span class="title">webMvcRegistrationsHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcRegistrationsAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> RequestMappingHandlerMapping <span class="title">getRequestMappingHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> RequestMappingHandlerMapping() &#123;</span><br><span class="line">                    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String API_BASE_PATH = <span class="string">"api"</span>;</span><br><span class="line"> </span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerHandlerMethod</span><span class="params">(Object handler, Method method, RequestMappingInfo mapping)</span> </span>&#123;</span><br><span class="line">                        Class&lt;?&gt; beanType = method.getDeclaringClass();</span><br><span class="line">                        <span class="keyword">if</span> (AnnotationUtils.findAnnotation(beanType, RestController.class) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            PatternsRequestCondition apiPattern = <span class="keyword">new</span> PatternsRequestCondition(API_BASE_PATH)</span><br><span class="line">                                    .combine(mapping.getPatternsCondition());</span><br><span class="line"> </span><br><span class="line">                            mapping = <span class="keyword">new</span> RequestMappingInfo(mapping.getName(), apiPattern,</span><br><span class="line">                                    mapping.getMethodsCondition(), mapping.getParamsCondition(),</span><br><span class="line">                                    mapping.getHeadersCondition(), mapping.getConsumesCondition(),</span><br><span class="line">                                    mapping.getProducesCondition(), mapping.getCustomCondition());</span><br><span class="line">                        &#125;</span><br><span class="line"> </span><br><span class="line">                        <span class="keyword">super</span>.registerHandlerMethod(handler, method, mapping);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="重写RestController注解"><a href="#重写RestController注解" class="headerlink" title="重写RestController注解"></a>重写RestController注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestApiController &#123;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@AliasFor</span>(annotation = RequestMapping.class, attribute = <span class="string">"value"</span>)</span><br><span class="line"> String[] value();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestApiController</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">all</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        User.setText(<span class="string">"User api"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java,spring,restful,base path,基础路径 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring中如何穿透多层共享公用信息]]></title>
      <url>/2018/11/26/spring-penetrate-layers/</url>
      <content type="html"><![CDATA[<p>在实际应用中较多使用的还是是三层架构，主要是因为在程序员圈中，易理解，通用性高。不过各人理解不同使用起来存在差异，就比方说公用信息共享的问题，展示层共享较好理解，那业务层和数据层怎共享呢？<br><a id="more"></a></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如何在各层之间共享公用信息？即要兼顾性能，还要考虑效率和易维护性。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>先来说说疑虑，很长一段时间，因为三层都是以子项目来划分，共享公用信息就不自觉的使用方法传参的方式实现，随得需求和时间的增长，各个方法都会带上公用信息参数。如此一来，<strong>自上而下的公用信息从展示一直传递到数据层</strong>。问题解决了，但带来了一个新的重复的问题：即所有用到公用信息的地方都得增加该参数。</p>
<p>传参的方式还可以用继承基类的方式实现，即所有的<strong>参数继承某个基类，基类中有共享信息的引用</strong>，但此方案还是换汤不换药，仅是传参数少了，重复的问题依然存在。</p>
<p>以上两种方案都未能较好的解决共享公用信息的问题，以致于觉得问题出在架构层，把三层换成微内核心架构或者域驱动模型架构。但是无论架构怎么变，层之间的共享信息问题似乎总是存在，只是重复率高低问题。</p>
<p>最近从更高的层面来了看待这个问题，就迎刃而解了。一个程序启动于一个主进程，进程中可以启动多个线程。也就是主进程就是一直存在的，若<strong>主进程中共享公用信息</strong>，那么就可以达到穿透多层共享公用信息的问题。</p>
<p>spring中则是通过公用子项目，初始化一个对象到应用上下文（理解为主进程），在需要的任何层注入该对象即达到了共享公用信息的目的。</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java,spring,share,base path,基础路径 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Linux中后台运行进程的几种方法]]></title>
      <url>/2018/11/26/run-backgroud-process-sereral-ways/</url>
      <content type="html"><![CDATA[<p>第二次碰到需要在后台运行进程，主要解决用telnet/ssh登录Linux服务器后，让一些程序一直运行，不受关闭终端/网络断开连接影响而不能使用。以下给出了多种方法，分别适用于不同场景。</p>
<a id="more"></a>
<h2 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h2><p>nohup 的用途就是让提交的命令忽略 hangup 信号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nohup ping lexiangmiao.com &amp; </span><br><span class="line"></span><br><span class="line">nohup ping lexiangmiao.com &gt;log.txt&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">ps -ef |grep lexiangmiao.com</span><br></pre></td></tr></table></figure></p>
<h2 id="setsid"><a href="#setsid" class="headerlink" title="setsid"></a>setsid</h2><p>用一新的会话运行程序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setsid ping lexiangmiao.com</span><br><span class="line"></span><br><span class="line">ps -ef |grep lexiangmiao.com</span><br></pre></td></tr></table></figure></p>
<h2 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h2><p>使用()和&amp;小技巧可以实现后台稳定运行</p>
<p>()可以运行多个命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 终端关闭（收到 HUP即hangup信号）后就其子进程也关闭了</span></span><br><span class="line">ping lexiangmiao.com &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新提交的进程的父 ID（PPID）为1（init 进程的 PID），并不是当前终端的进程 ID。因此并不属于当前终端的子进程，从而也就不会受到当前终端的 HUP 信号的影响了</span></span><br><span class="line">(ping lexiangmiao.com &amp;)</span><br><span class="line">ps -ef |grep lexiangmiao.com</span><br></pre></td></tr></table></figure>
<h2 id="disown"><a href="#disown" class="headerlink" title="disown"></a>disown</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp -r testLargeFile largeFile &amp;</span><br><span class="line"><span class="built_in">jobs</span></span><br><span class="line"><span class="comment"># 指jobs查出的编号</span></span><br><span class="line"><span class="built_in">disown</span> -h %1</span><br></pre></td></tr></table></figure>
<h2 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h2><p>已经知道了如何让进程免受 HUP 信号的影响，但是如果有大量这种命令需要在稳定的后台里运行，如何避免对每条命令都做这样的操作呢？</p>
<p>用screen -dmS session name来建立一个处于断开模式下的会话（并指定其会话名）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">screen -r Urumchi</span><br><span class="line">ping www.ibm.com &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看依赖关系树</span></span><br><span class="line">pstree -H 9488</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上所述，nohup/setsid 无疑是临时需要时最方便的方法，disown 能帮助我们来事后补救当前已经在运行了的作业，而 screen 则是在大批量操作时不二的选择了。</p>
<p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-nohup/" target="_blank" rel="noopener">ref</a></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux,process,后台运行 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[研发人员的绩效考核]]></title>
      <url>/2018/11/26/research-and-development-personnel-performance-appraisal/</url>
      <content type="html"><![CDATA[<p>很多企业的绩效考核工作常常会面临这样的问题：相对其他部门，研发部门的考核指标提取、考核方式确定都有一定的难度。这也是人力资源专业人员和研发部门管理者困惑的难题。<br><a id="more"></a></p>
<p>曾经有企业试图对研发人员实行完全的定量考核，甚至提出以编写软件代码的行数作为一个重要考核指标，结果员工开始将一个命令可以解决的问题，拆分为几个命令，于是 “大家都很忙，疲于写程序，工作结果完全超过了预期目标，但是软件的功能却没有实现”，完全背离了绩效考核设计的初衷，考核不得不紧急叫停。虽然这种方式停止了，但如何公正客观地评价研发人员工作业绩的问题却依然摆在管理者面前。</p>
<h2 id="研发人员考核难在哪里"><a href="#研发人员考核难在哪里" class="headerlink" title="研发人员考核难在哪里"></a>研发人员考核难在哪里</h2><p>研发人员考核的困难主要集中于以下几点：</p>
<ul>
<li>绩效指标提取困难，由于研发人员工作本身的独特性以及工作成果不易衡量，因此难以提炼直观量化的数字性指标；</li>
<li>工作内容界定困难，特别是预研人员，一些成果仅仅是证明某种试试验或测试方法可行与否，证实与证伪具有同样的价值，难以在任务下达之前予以明确；</li>
<li>定性内容较多，影响考核的公正性；</li>
<li>考核方式的选取问题，很多企业的研发管理者为了回避考核的难题，而采取背后打分、不沟通的方式。</li>
</ul>
<p>面临如此多的问题，如何对研发人员进行业绩评价呢？其实，考核中最为关键的是指标和评价方式，这两者是员工工作的向导和公司的价值取向，出不得偏差，否则就可能事倍功半，甚至劳而无功了。这里，我们也从这两点出发，分析研发人员的指标提炼和评价方式。</p>
<h2 id="怎样提炼绩效指标"><a href="#怎样提炼绩效指标" class="headerlink" title="怎样提炼绩效指标"></a>怎样提炼绩效指标</h2><p>任何一项工作的展开必然是这样的思路：”正确的行为，沿着正确的道路，达成正确的结果”，提炼绩效指标也需要沿着这样的逻辑关系，从研发成果向前推出成功的路径以及正确的行为要求，具体见下图。</p>
<p><img src="/gallery/rd1.jpg" alt="绩效考核指标" title="绩效考核指标"></p>
<p>研发人员的考核指标可以界定为两个方面：一个是效益指标，一个是效率指标。效益指标是研发的成果在市场中产生的价值反映，如产品销售额、市场占有率等。效率指标则是指公司内部的研发效率和阶段成果完成情况，包括路径指标和行为指标，具体如产品开发周期、研发费用、产品规划符合度、批次整改率、单板/整机直通率、产品数据准确率等等。绩效指标提炼的过程实际上就是管理程序和工作流程的分析过程：</p>
<h2 id="路径指标"><a href="#路径指标" class="headerlink" title="路径指标"></a>路径指标</h2><p>路径指标是衡量研发过程是否符合总体研发规划的过程检测指标。 从研发的整体流程环节看，虽然研发的成果不同，但是他们所遵循的程序是一致的，明确每一环节的关键监控点，也就可以形成考核的路径指标。这些路径指标的达成保证了最终结果的实现。</p>
<p>产品开发周期、研发费用等指标比较易于理解，产品规划符合度指标虽然不多见，却非常重要，下面是某公司对此的界定（见表一）。</p>
<p><img src="/gallery/rd1.jpg" alt="绩效路径指标" title="绩效路径指标"></p>
<h2 id="统计方法"><a href="#统计方法" class="headerlink" title="统计方法:"></a>统计方法:</h2><p>1.路标和0级计划、1级计划基本数据和经过更改认可后的数据。</p>
<p>2.在进行决策点评审（主要是概念决策评审）时，对照路标和0级计划、1级计划，检查是否在规划范围内以及时间偏差，在会议纪要中说明：<br>(1) 本版本是否计入非正常增删版本数；<br>(2) 本版本是否计入未按路标执行的版本数；<br>(3) 本版本启动时间与规划的时间偏差（天）；<br>(4) 本版本与路标偏差的情况分析（包括情况说明、反映出的问题、改进措施等）。</p>
<h2 id="行为指标"><a href="#行为指标" class="headerlink" title="行为指标"></a>行为指标</h2><p>行为指标是研发过程中对正确职业行为的评价指标。</p>
<p>正确的路径还需要有正确的行为方式，许多公司重视研发过程性内容的积累和知识共享平台的搭建，这些内容就要求员工在研发的过程中关注文档的积累、数据的准确、程序的明晰记录等等。因此，可以设置文档完整率、项目报告完整性、数据差错分析等指标，以提出对研发人员具体行为的要求，这些也是许多职业化通道方案设计时需要分析的内容。如果公司已经建立了研发人员的职业发展路径标准，许多行为指标是可以从中提炼的。</p>
<h2 id="效益指标"><a href="#效益指标" class="headerlink" title="效益指标"></a>效益指标</h2><p>作为经济性的组织，任何一个研发成果都必须在市场上实现价值，效益指标就是用来评价产品对公司带来的价值和客户对其的认同度，例如产品销售额、市场占有率、客户满意度、产品故障率等等。由于这些指标具有明显的滞后性，不能即期反映研发的成果，因此，这种指标的使用更多要和公司的中期激励方案相结合，具有明显的项目制考核指标的特点。</p>
<p>同时，效益指标不适用于研发部门的个人考核，因为研发成果往往是团队合作的产物，作为部门、事业部、项目开发团队的考核更为合适。</p>
<h2 id="如何选择考核方式"><a href="#如何选择考核方式" class="headerlink" title="如何选择考核方式"></a>如何选择考核方式</h2><p>研发工作由于贡献特点和侧重点不同，在考核方式上可重点区分部门团队考核与员工个人考核两种。</p>
<h3 id="部门团队考核"><a href="#部门团队考核" class="headerlink" title="部门团队考核"></a>部门团队考核</h3><p>在研发工作中，部门、团队为基本的业务单元，对直接产品和最终产品的市场价值负有责任。因此，对部门、团队考核侧重的要素为效益指标和路径指标。但因为效益指标的滞后性问题，在整体的考核周期的设计上需要认真考虑以下两点：</p>
<ul>
<li>对于效益指标，采取按项目周期进行考核的方式。许多研发成果的好坏是在项目结束之后一段时间体现出来，这部分指标的考核要在这个周期之后进行。</li>
<li>对于路径指标，采取按固定时间段进行考核的方式，多数为季度，以保证产品的研发过程符合公司预定的目标。</li>
</ul>
<p>其中，路径指标占整体考核成绩的50％～70％，甚至更高，以体现公司的业绩导向和市场导向。为此，公司在奖金分配制度上也需要做相应的考虑，以配合这样的考核方式。</p>
<h3 id="员工个人"><a href="#员工个人" class="headerlink" title="员工个人"></a>员工个人</h3><p>由于研发成果更多属于团队合作的结果，每位研发人员只是负责最终成果的某个功能模块或某个环节，甚至有的研发人员不清楚自己的工作输出在最终产品中所起到的作用。他们的考核主要侧重点在于行为指标和路径指标。因此，结合这种工作特点和考核侧重点，可以采用PBC（Personal Business Commitment个人业绩承诺）评价方式。PBC的程序是：设定清晰的目标，并承诺为实现目标采取的具体策略和措施，以及对团队建设的贡献，并通过对这些承诺进行评价来考核研发人员。</p>
<p>PBC的重要特点就是将目标与实现的行为要素紧密结合起来，更像是一种计划考核，强调了行为和团队合作的重要性。其具体操作方式如下：</p>
<h2 id="建立PBC目标"><a href="#建立PBC目标" class="headerlink" title="建立PBC目标"></a>建立PBC目标</h2><p>考核周期（一般为季度）之初，直接主管或是项目组组长交流部门或是项目组的工作目标，然后员工根据团队目标制定个人的工作目标。这些目标应该是简洁、易于考核、基于结果的，一般通过WIN、EXECUTE、TEAM三个层次来表达:</p>
<ul>
<li>赢的承诺：为了支持部门或是项目组工作目标的完成，你必须做些什么。指标主要是行为指标和路径指标的结合。</li>
<li>执行的承诺：通过什么方法完成你赢的承诺呢？必须分析为了达成目标，需要采取的策略、方法以及对工具的需求，形成清晰的执行方案，并且有明确的时间限制和规定，若承诺按照计划按时执行，就能保证实现赢的承诺。</li>
<li>团队的承诺：为了同团队成员更好地合作，更加高效地完成赢和执行的承诺，员工应该做些什么。高效的团队工作需要有好的交流、参与、理解和相互支持，以一个整体去完成工作，保证团队成果的实现。PBC的举例见表二。</li>
</ul>
<p><img src="/gallery/rd1.jpg" alt="绩效PBC目标" title="绩效PBC目标"></p>
<h2 id="过程辅导"><a href="#过程辅导" class="headerlink" title="过程辅导"></a>过程辅导</h2><p>任何绩效考核工作都不是秋后算帐的评判，在工作的执行过程中，主管要即时给予员工支持和辅导，帮助员工解决问题和提升能力，这一点在一般的考核评价方式中都有介绍，在此不再赘述。</p>
<h2 id="考核评价"><a href="#考核评价" class="headerlink" title="考核评价"></a>考核评价</h2><p>依据考核周期之初确定的业绩承诺，主管对员工的整个工作情况进行评价，员工的绩效考核以目标完成结果为依据，考核的等级将影响员工的价值回报。</p>
<h2 id="部门团队与个人考核的关系"><a href="#部门团队与个人考核的关系" class="headerlink" title="部门团队与个人考核的关系"></a>部门团队与个人考核的关系</h2><p>部门团队的考核与员工个人的考核虽然在考核周期和侧重点上不同，但两者不是孤立的，只有员工个人的业绩达成了，才能保证整个组织绩效的实现。为此，针对部门团队绩效考核的中期激励方案必须体现出员工个人的价值回报，保证两者成为有机的整体。</p>
<p><a href="https://www.toutiao.com/a6511671010184397325/?iid=20677887087&amp;app=news_article&amp;wxshare_count=1&amp;tt_from=weixin&amp;utm_source=weixin&amp;utm_medium=toutiao_android&amp;utm_campaign=client_share" target="_blank" rel="noopener">原文</a></p>
]]></content>
      
        <categories>
            
            <category> management </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java,class loader,类加载器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何快速搭建linux运行环境]]></title>
      <url>/2018/11/26/quickly-set-up-linux-in-virtualbox/</url>
      <content type="html"><![CDATA[<p>对于程序员来说，很可能用linux作为服务器运行环境，为了提前发现问题不可避免的需要搭建一套linux运行环境，此文给出一个可行、快速且经济的解决方案。</p>
<a id="more"></a>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul>
<li>在VirtualBox中安装好CentOS 7 </li>
<li>可实现主机到虚机的双向复制和文件共享</li>
</ul>
<h1 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>win7</li>
<li>VirtualBox 5.2.6</li>
<li>CentOS 7 32位镜像</li>
</ul>
<h2 id="实施步骤"><a href="#实施步骤" class="headerlink" title="实施步骤"></a>实施步骤</h2><h3 id="1-下载VirtualBox"><a href="#1-下载VirtualBox" class="headerlink" title="1 下载VirtualBox"></a>1 下载VirtualBox</h3><p>打开<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">virtualbox官网</a> ，选择windows hosts下载到本地，安装完成进行到下一步。</p>
<h3 id="2-下载Linux镜像"><a href="#2-下载Linux镜像" class="headerlink" title="2 下载Linux镜像"></a>2 下载Linux镜像</h3><p>打开<a href="https://www.osboxes.org/virtualbox-images/" target="_blank" rel="noopener">osboxes官网</a> ,打开CentOS链接，找到linux 32bit下载。也可以下载64bit据自身机器情况而定。</p>
<h3 id="3-创建虚拟电脑"><a href="#3-创建虚拟电脑" class="headerlink" title="3 创建虚拟电脑"></a>3 创建虚拟电脑</h3><p>打开VirtualBox-&gt;新建-&gt;CentOS-&gt;…-&gt;使用已有虚拟硬盘-&gt;选择已下载的Linux镜像*.vdi文件-&gt;..-&gt;直至完成。</p>
<h3 id="4-系统初始化设置"><a href="#4-系统初始化设置" class="headerlink" title="4 系统初始化设置"></a>4 系统初始化设置</h3><p>按提示进行系统设置，最后输入osboxes.org作为用户密码，登入Linux系统即完成搭建。</p>
<h3 id="5-安装增强功能"><a href="#5-安装增强功能" class="headerlink" title="5 安装增强功能"></a>5 安装增强功能</h3><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>设备-&gt;安装增强功能-&gt;直至完成。</p>
<h5 id="设置共享剪切板"><a href="#设置共享剪切板" class="headerlink" title="设置共享剪切板"></a>设置共享剪切板</h5><p>设备-&gt;共享剪切板-&gt;双向</p>
<h5 id="设置共享目录"><a href="#设置共享目录" class="headerlink" title="设置共享目录"></a>设置共享目录</h5><p>设备-&gt;共享文件夹-&gt;设置共享目录。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--挂载</span><br><span class="line">mount -t vboxsf hostDirectoryName virtualDirectoryPath</span><br><span class="line">--解挂</span><br><span class="line">umount virtualDirectoryPath</span><br></pre></td></tr></table></figure>
<h5 id="挂载解决办法"><a href="#挂载解决办法" class="headerlink" title="挂载解决办法"></a>挂载解决办法</h5><p>问题：/sbin/mount.vboxsf: mounting failed with the error: No such device</p>
<p>执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum update</span><br><span class="line">yum install kernel</span><br><span class="line">yum install kernel-devel</span><br><span class="line">yum install kernel-headers</span><br><span class="line">yum install gcc</span><br><span class="line">yum install make  </span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p><a href="http://blog.csdn.net/daiyudong2020/article/details/58073520" target="_blank" rel="noopener">参考</a></p>
<h2 id="3-延伸阅读"><a href="#3-延伸阅读" class="headerlink" title="3  延伸阅读"></a>3  延伸阅读</h2><h3 id="设置系统启动后进入文本界面："><a href="#设置系统启动后进入文本界面：" class="headerlink" title="设置系统启动后进入文本界面："></a>设置系统启动后进入文本界面：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">set</span>-default multi-user.target</span><br></pre></td></tr></table></figure>
<h3 id="设置系统启动后进入图形界面："><a href="#设置系统启动后进入图形界面：" class="headerlink" title="设置系统启动后进入图形界面："></a>设置系统启动后进入图形界面：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">set</span>-default graphical.target</span><br></pre></td></tr></table></figure>
<h3 id="重启系统："><a href="#重启系统：" class="headerlink" title="重启系统："></a>重启系统：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl reboot</span><br></pre></td></tr></table></figure>
<h3 id="以文本界面启动后，执行以下命令启动图形界面："><a href="#以文本界面启动后，执行以下命令启动图形界面：" class="headerlink" title="以文本界面启动后，执行以下命令启动图形界面："></a>以文本界面启动后，执行以下命令启动图形界面：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startx</span><br></pre></td></tr></table></figure>
<h3 id="快捷方式"><a href="#快捷方式" class="headerlink" title="快捷方式"></a>快捷方式</h3><p>Ctrl + Alt + F2  切换到文本界面<br>Ctrl + Alt + F1  切换到图形界面<br>Ctrl + Alt + backspace 重启当前图形界面</p>
<p><a href="https://www.ifshow.com/centos-7-switching-graphical-and-text-interface/" target="_blank" rel="noopener">参考</a></p>
<h3 id="进入setting设置termial终端打开快捷键为alt-F12"><a href="#进入setting设置termial终端打开快捷键为alt-F12" class="headerlink" title="进入setting设置termial终端打开快捷键为alt+F12"></a>进入setting设置termial终端打开快捷键为alt+F12</h3><p>Setthings-&gt;Keyboard-&gt;add command-&gt;Name “Terminal” Command “/usr/bin/gnome-terminal”-&gt;Shortcuts-&gt;输入alt+F12。</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux,VirtualBox,VirtualBox image,CentOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ORM常用的设计模式]]></title>
      <url>/2018/11/26/orm-common-pattern/</url>
      <content type="html"><![CDATA[<p>ORM(Object Relational Mapping)即对象关系映射，一种用于实现对象语言与不同类型的关系型数据之间的转换。</p>
<a id="more"></a>
<p>我们讨论该问题目的在于如何让我们系统中的对象与数据库进行交互。由于数据库与对象之间存在着结构上的差异，Mapping是相当困难的。不推荐开发人员自己进行Mapping Layer的开发，这是危险的也是及其可能失败的。更加推荐购买专业的工具，虽然这些工具通常很昂贵。到目前为止，我所接触的项目确实有Mapping layer，但它并不是典型的Mapping layer between Relational Database and Object，它是处于JSP页面与Database之间的Mapping，用于自动地将用户在页面上填写的数据更新到数据库中。这在Web项目中是很好用的，但目前这个Mapping Layer还不能做到general，它只能适用与特定的Web Application架构。</p>
<p>下面开始与大家聊聊三种Database Mapping层的常用的系统架构。 </p>
<h2 id="1-网关模式（Gateway）"><a href="#1-网关模式（Gateway）" class="headerlink" title="1. 网关模式（Gateway）"></a>1. 网关模式（Gateway）</h2><p>之所以称之“网关”，顾名思义，Mapping层扮演着一个代理的角色，应用逻辑层无需知道具体Mapping的细节，而只需通过网关的公共接口，提交数据更新或者数据加载请求，由网关去执行具体的Object到Record或者Record到Object的转换。从而实现了数据层的透明。应用逻辑层所要了解的只有网关的信息和其公共接口。使用公共接口同时有助应用逻辑代码在不同的数据层的复用：无需改变应用逻辑层的任何代码，只需为特定的数据层实现特定的网关。网关模式具体分为两种：Row Data Gateway &amp; Table Data Gateway </p>
<p>共同的特点： </p>
<p>对应于数据库中的每个Table，有一个Mapping Class，并且在这个class中每个column有其对应的字段；所有的数据库mapping代码都存在于在Mapping Class之中，使数据库访问代码与应用逻辑完全分离； </p>
<h3 id="Row-Data-Gateway"><a href="#Row-Data-Gateway" class="headerlink" title="Row Data Gateway"></a>Row Data Gateway</h3><p>Mapping Class是一个对应于数据库中某张表格的一条记录。记录的每个字段对应于Class中的一个Field。所有访问数据的细节都被封装在这个接口中。Row Data Gateway与Transaction Script配合使用，效果很好 </p>
<p>典型案例: Java中的SessionBean（Transaction Script）和EntityBean（Row Data Gateway） </p>
<p>适用情况：应用逻辑相对复杂，对象与对象之间交互繁多的大规模系统； </p>
<h3 id="Table-Data-Gateway："><a href="#Table-Data-Gateway：" class="headerlink" title="Table Data Gateway："></a>Table Data Gateway：</h3><p>这个接口定义了关于某个Table的所有查询（find），更新，插入和删除代码。Table Data Gateway将输入的参数mapping成对应的SQL，并执行SQL，最后返回适当的数据结构。如何返回Query的信息是一个具有欺骗性的决策问题。当需要返回多个记录并且函数只允许返回一个结果时，你将面临着多种选择：Map &amp; Data Transfer Object &amp; Record Set。 </p>
<p>Map：不是一个好方法，map中的Key常常是一种HardCode； </p>
<p>Data Transfer Object：是避免map的一个方法，并且可以被重用； </p>
<p>Record Set：虽然会使Business Logic Layer不能完全与数据库访问层相分离，但是如果我们的开发平台有很多基于Record Set的工具，采用它不失为一个好方法（.NET）。 </p>
<p>典型案例：Window DNA架构； </p>
<p>适用情况：以显示信息，修改信息为功能的MIS（信息管理系统）； </p>
<h2 id="2-活动记录模式（Active-Record）"><a href="#2-活动记录模式（Active-Record）" class="headerlink" title="2. 活动记录模式（Active Record）"></a>2. 活动记录模式（Active Record）</h2><p>将Business Logic与数据库访问放置于同一个Business Object中。这种模式出现的原因是业务逻辑与数据库模型非常相似。Active Record同时负责数据库存取和基于这些数据的应用逻辑的执行。应用程序的所有逻辑可以都在Active Record中，也可以是部分。有一点是默认前提，Active Record的数据结构和数据库Schema必须保持一致（在我看来这是个缺点！） </p>
<p>Active Record中通常有以下方法： </p>
<p>从SQL数据集创建Active Record的构建方法； </p>
<p>静态的finder方法用于封装SQL查询并且返回Active Record记录； </p>
<p>用Active Record中的数据更新数据库的方法； </p>
<p>所有字段getting和settting方法； </p>
<p>实现应用逻辑的方法； </p>
<p>活动记录模式的优点在于简单，其缺点在于没有隐藏数据库层，从而导致很难应用其他OR Mapping模式在活动记录模式之上。另外一方面，活动记录模式与Row Data Gateway的区别在于数据库存取代码是在Business Object中（Active Record）还是在一个单独的Mapping Class中（Row Data Gateway），当然也有同时存在于两者的情况；如果应用逻辑的复杂程度迫使你适用面向对象的一些机制（Direct relationships，collections and Inheritance），这时直接将数据库存取代码置于Business Object中，由于有大量的转换，会使事情变得混乱，这时应该适用Data Mapper。</p>
<p>但这并不是个好方法，因为它将面向对象设计和数据库设计紧密耦合在一起，这随着项目进展会使对设计的重构工作变得及其困难。通常我们会将数据库访问代码分离到一个Gateway中。有一种情况例外，当你对Transaction Script &amp; Row Data Gateway的架构进行重构的时候，为了去除Transaction Script中的重复代码，将其放进Row Data Gateway中，这是就转变成Active Record了。 </p>
<p>适用情况：当应用逻辑不复杂，主要是创建，更新，插入，删除操作，而且操作主要是针对单条记录时； </p>
<h2 id="3-数据映射模式（Data-Mapper）"><a href="#3-数据映射模式（Data-Mapper）" class="headerlink" title="3. 数据映射模式（Data Mapper）"></a>3. 数据映射模式（Data Mapper）</h2><p>这是最复杂，但最灵活的一种架构模式。使用Data Mapper，Business Objects可以与数据库结构完全的分离，他们无需知道数据库的结构和数据更新的细节。Data Mapper对于那些无法在关系型数据库表示的对象系统特性非常有效，例如Collection成员结构和继承关系。Data Mapper是内存中对象与数据库之间的媒介。它负责双方之间的数据传输。数据映射模式（Data Mapper）与网关模式最大的（Gateway）最大的区别在于依赖和控制的位置相反。在网关模式中，应用逻辑层需要了解数据库中的数据结构，二在数据映射模式中，应用逻辑无需了解数据库设计，提高了应用层（business logic）和数据层（data source）的分离，便于两者的开发和测试。</p>
<p>面向对象的对象系统与面向关系的关系型数据库是两种异构的结构，因此在对象系统中的很多机制（collections, inheritance等）都无法在关系型数据库中得到直接的表示，这就是数据映射模式产生的原因。在这种情况下，在两种模式下的数据转换变得相当复杂，因此我们有必要将它分层，否则任何一方（对象系统和数据库）的改变都将波及对方。 </p>
<p>数据映射层的最大目标就是将业务逻辑（domain）和数据层（data source）分离。整个数据映射层（Data Mapper）完全独立于系统其他部分，可以被完全替换或者允许一个逻辑层重用于不同的数据层上。但要实现它有很多重要的问题必须解决，而且不同人可以采用不同的方法实现这个数据映射模式（Data Mapper）。因此这里只介绍几个重要的实现问题。 </p>
<h3 id="①-Finder方法的处理"><a href="#①-Finder方法的处理" class="headerlink" title="① Finder方法的处理"></a>① Finder方法的处理</h3><p>处理方法： </p>
<p>在一个独立的Package中，为Finder方法定义一个接口，然后在数据映射层实现这个接口。逻辑层通过接口调用Finder方法，后者通过数据映射层加载数据。 </p>
<p>原因：之所以使用接口的原因，在于使Finder方法标准化，这样应用逻辑层虽然可能在任何地方都会调用Finder方法取得带有数据的Business Object，但却不依赖于数据映射层。 </p>
<p>Finder方法：将方法调用转换成SQL查询； </p>
<p>数据映射层：从数据集中获得数据并创建Business Object； </p>
<p>遗留问题： </p>
<p>数据映射层如何知道那些Object被更新了，哪些被创建，哪些被删除了？ </p>
<p>如何控制每次查询获得的记录数，以尽量减少查询的数目？ </p>
<p>其他模式如何用在数据映射层（Lazy Load, Registry, Identity Map）? </p>
<h3 id="②-如何将数据映射到Business-Object的字段中"><a href="#②-如何将数据映射到Business-Object的字段中" class="headerlink" title="② 如何将数据映射到Business Object的字段中"></a>② 如何将数据映射到Business Object的字段中</h3><p>数据映射层需要访问Business Object的所有字段，因此这些方法必须被设置为public，但这不不是我们所预想的。这个问题没有明确的答案，几种可选的方法都有两面性。 </p>
<ul>
<li>将数据映射层于逻辑层放置于同一个包下 </li>
</ul>
<p>缺点：有可能使事情变得更混乱； </p>
<ul>
<li>使用Reflection方法来访问Object的字段 </li>
</ul>
<p>缺点：速度慢； </p>
<p>增加状态标志来保证在数据库加载环境下访问这些字段 </p>
<p>针对这个问题，在创建Business Object的时候，你有两个选择，使用胖构造函数（这个名词是我自己取的:^)）空构造函数。 </p>
<ul>
<li>胖构造函数（Rich Constructor） </li>
</ul>
<p>优点：保证Object至少包含必须的数据；对于常量字段，无需setting方法； </p>
<p>缺点：必须考虑循环引用问题（cyclic reference）； </p>
<ul>
<li>空构造函数（Empty Constructor） </li>
</ul>
<p>优点：不会出现循环引用问题（cyclic reference）； </p>
<p>缺点：对于常量字段，仍然需要setting方法，可能引入潜在错误； </p>
<h3 id="③-基于元数据的映射（Metadata-based-Mapping）"><a href="#③-基于元数据的映射（Metadata-based-Mapping）" class="headerlink" title="③ 基于元数据的映射（Metadata based Mapping）"></a>③ 基于元数据的映射（Metadata based Mapping）</h3><ul>
<li>显式代码：这要求每个Business Object有一个Mapping class； </li>
<li>Metadata Mapping：元数据被存储在单独的class和文件中，我倾向于文件，随着xml的广泛使用，以XML形式存储元数据会增强移植性； </li>
</ul>
<h2 id="3种OR-Mapping架构模式的取舍和选用"><a href="#3种OR-Mapping架构模式的取舍和选用" class="headerlink" title="3种OR Mapping架构模式的取舍和选用"></a>3种OR Mapping架构模式的取舍和选用</h2><p>OR Mapping架构取决于应用逻辑层的架构。如果使用表模式（Table Module）来组织应用逻辑，那么Table Data Gateway是你的最佳选择；如果使用Transaction Script模式来组织应用逻辑，那么如果开发平台提供了使用数据集的方便就采用Table Data Gateway，否则采用Row Data Gateway；如果是使用Domain Model来建立应用逻辑模型，那么对于复杂的大系统，颖毫不犹豫地选择数据映射模式，对于逻辑简单的小系统，Active Record也是一个可选方案。</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> orm,gateway pattern, active record pattern, data mapper pattern,对象关系映射， 网关模式, 活动记录模式 , 数据映射模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nodejs常用命令]]></title>
      <url>/2018/11/26/nodejs-usefully-command/</url>
      <content type="html"><![CDATA[<p>收集平时常用的一些nodejs命令。<br><a id="more"></a></p>
<h2 id="怎样升级node版本"><a href="#怎样升级node版本" class="headerlink" title="怎样升级node版本"></a>怎样升级node版本</h2><h3 id="Linux-Mac"><a href="#Linux-Mac" class="headerlink" title="Linux/Mac"></a><a href="https://stackoverflow.com/questions/10075990/upgrading-node-js-to-latest-version" target="_blank" rel="noopener">Linux/Mac</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install n -g</span><br><span class="line">sudo n 0.12.2</span><br></pre></td></tr></table></figure>
<p>升级到稳定版本:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo n stable</span><br></pre></td></tr></table></figure></p>
<p>升级到最近版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo n latest</span><br></pre></td></tr></table></figure></p>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>从node官网下载.msi重新安装即可</p>
]]></content>
      
        <categories>
            
            <category> nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs,nodejs命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mybatis列映射的几种方式]]></title>
      <url>/2018/11/26/mybatis-columns-mapping/</url>
      <content type="html"><![CDATA[<p>不同于hibernate实现活动记录模式，mybatis实现了数据映射模式，其中列的映射有多种实现方式，有简单的也有复杂的，分别适用不同的业务场景</p>
<a id="more"></a>
<h2 id="1-使用注解-Results和-Result"><a href="#1-使用注解-Results和-Result" class="headerlink" title="1. 使用注解@Results和@Result"></a>1. 使用注解@Results和@Result</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM users"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"firstName"</span>, column = <span class="string">"first_name"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"lastName"</span>, column = <span class="string">"last_name"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM users"</span>)</span><br><span class="line">    <span class="meta">@ResultMap</span>(<span class="string">"BaseResultMap"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUsers1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>XML配置如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"package.for.User"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> = <span class="string">"firstName"</span>, <span class="attr">column</span> = <span class="string">"first_name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> = <span class="string">"lastName"</span>, <span class="attr">column</span> = <span class="string">"last_name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>优点</li>
</ul>
<p>映射关系简单明了</p>
<ul>
<li>缺点</li>
</ul>
<p>相同实体类型的返回变多之后，注解的工作量加大，容易不同步和出错</p>
<p>避免重复的话，需要与XML配置结合，如此一来，由于使用两种方式感觉麻烦了</p>
<h2 id="2-使用别名"><a href="#2-使用别名" class="headerlink" title="2. 使用别名"></a>2. 使用别名</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT first_name as firstName, last_name as lastName FROM users"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(&#123;</span><br><span class="line">            <span class="string">"SELECT"</span>,</span><br><span class="line">            <span class="string">"  first_name as firstName,"</span>,</span><br><span class="line">            <span class="string">"  last_name as lastName"</span>,</span><br><span class="line">            <span class="string">"FROM users"</span>&#125;)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUsers1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>优点</li>
</ul>
<p>最直接，简单明了</p>
<ul>
<li>缺点</li>
</ul>
<p>多人开发，可能带来db命名的不规范</p>
<h2 id="3-使用全局配置"><a href="#3-使用全局配置" class="headerlink" title="3. 使用全局配置"></a>3. 使用全局配置</h2><p>在application.properties中，增加以下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis.configuration.mapUnderscoreToCamelCase=true</span><br></pre></td></tr></table></figure></p>
<p>或者使用自定义配置Bean<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">ConfigurationCustomizer <span class="title">mybatisConfigurationCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line">            configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>优点</li>
</ul>
<p>全局设置之后，只要遵守下划线映射到驼峰命名规范，就省出了大量的手动映射工作</p>
<ul>
<li>缺点</li>
</ul>
<p>对已有老系统无按此规则的db，无法映射</p>
<h2 id="4-使用XML映射"><a href="#4-使用XML映射" class="headerlink" title="4. 使用XML映射"></a>4. 使用XML映射</h2><p>XML配置如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"package.for.User"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> = <span class="string">"firstName"</span>, <span class="attr">column</span> = <span class="string">"first_name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> = <span class="string">"lastName"</span>, <span class="attr">column</span> = <span class="string">"last_name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUsers"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">  SELECT * FROM users WHERE ID = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUsers1"</span> <span class="attr">resultType</span>=<span class="string">"package.for.User"</span>&gt;</span></span><br><span class="line">  SELECT * FROM users WHERE ID = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>java就不需要再一一配置了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUsers</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUsers1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>优点</li>
</ul>
<p>字段映射关系和对象完全分离</p>
<ul>
<li>缺点</li>
</ul>
<p>XML硬编码，维护内容多时容易出错</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上各种方法各有优劣，完全注解方式硬编码少，维护不容易出错。完全XML方式更加灵活，可以发布之后变动。具体使用单个或者混合方式取决于具体业务场景。</p>
<p>参考:<br><a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" target="_blank" rel="noopener">MyBatis-Spring-Boot-Starter介绍</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java,mybatis,columns mapping,列映射 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[maven常用命令]]></title>
      <url>/2018/11/26/maven-usefully-command/</url>
      <content type="html"><![CDATA[<p>收集平时常用的一些maven命令。<br><a id="more"></a></p>
<h2 id="清除现有jar包"><a href="#清除现有jar包" class="headerlink" title="清除现有jar包"></a>清除现有jar包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clear</span><br></pre></td></tr></table></figure>
<h2 id="查看依赖关系"><a href="#查看依赖关系" class="headerlink" title="查看依赖关系"></a>查看依赖关系</h2><p>maven存在a-&gt;b-&gt;c和e-&gt;f-&gt;c，但此时c的版本不一致时，就需要查看依赖关系。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:tree -Dverbose -Dincludes=DESIRED-groupId:DESIRED-artifactId</span><br><span class="line"></span><br><span class="line">mvn dependency:tree -Dverbose -Dincludes=javax.servlet:javax.servlet-api</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven,mvn,maven命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[maven中重复类冲突解决办法]]></title>
      <url>/2018/11/26/maven-duplicate-classes/</url>
      <content type="html"><![CDATA[<p>maven引入其他jar的时候常会碰到重得类冲突，一般解决思路是查看依赖关系，排出不需要的jar或类。<br><a id="more"></a></p>
<h2 id="解决步骤如下"><a href="#解决步骤如下" class="headerlink" title="解决步骤如下"></a>解决步骤如下</h2><ol>
<li>哪两个jar包出现重复类了。</li>
<li>两个jar是依赖哪个组件引入的。</li>
<li>通过mvn命令查找依赖关系。 </li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:tree -Dverbose -Dincludes=DESIRED-groupId:DESIRED-artifactId</span><br><span class="line"></span><br><span class="line">mvn dependency:tree -Dverbose -Dincludes=javax.servlet:javax.servlet-api</span><br></pre></td></tr></table></figure>
<h2 id="解决办法有以下3种："><a href="#解决办法有以下3种：" class="headerlink" title="解决办法有以下3种："></a>解决办法有以下3种：</h2><ul>
<li>两个jar包报重复类，如果其中有个jar包是不需要的，则可以通过<exclusions>的方式把它从依赖树中排除，这样重复类问题就被解决了。</exclusions></li>
<li>如果两个jar包都是需要的，此时需要改造其中一个jar包，消除重复类问题（比如改变类名或者改变package）。如果是第三方组件测修改版本号。</li>
<li>还有一类，是不得以而为之的（不推荐），就是重复类的问题很难解决&amp;&amp;评估下来没必要解决，可通过添加白名单的方式略过重复类问题。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven,mvn,maven命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[liquibase实现自动升级数据的步骤]]></title>
      <url>/2018/11/26/liquibase-upgrade-db-step/</url>
      <content type="html"><![CDATA[<p>数据库变化常常发生，怎样协调自动完成增量升级是个不少的挑战，以下方案可行</p>
<a id="more"></a>
<h2 id="1-配置好mvn对比数据库"><a href="#1-配置好mvn对比数据库" class="headerlink" title="1 配置好mvn对比数据库"></a>1 配置好mvn对比数据库</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.liquibase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>liquibase-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;liquibase.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">changeLogFile</span>&gt;</span>src/main/resources/config/liquibase/master.xml<span class="tag">&lt;/<span class="name">changeLogFile</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">diffChangeLogFile</span>&gt;</span>src/main/resources/config/liquibase/changelog/$&#123;maven.build.timestamp&#125;_changelog.xml<span class="tag">&lt;/<span class="name">diffChangeLogFile</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">driver</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">driver</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">url</span>&gt;</span>jdbc:mysql://localhost:3306/lexiangmiaoSite<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">defaultSchemaName</span>&gt;</span>lexiangmiaoSite<span class="tag">&lt;/<span class="name">defaultSchemaName</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">password</span>&gt;</span>xxxxx<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">referenceUrl</span>&gt;</span>hibernate:spring:com.lexiangmiao.site.domain?dialect=org.hibernate.dialect.MySQL5InnoDBDialect&amp;amp;hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&amp;amp;hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy<span class="tag">&lt;/<span class="name">referenceUrl</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">logging</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">logging</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>创建支持emoji表情的MySQL数据库 utf8mb4</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE `lexiangmiao` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>
<h2 id="2-使用liquibase比较于当前文件与目标对象的差异"><a href="#2-使用liquibase比较于当前文件与目标对象的差异" class="headerlink" title="2 使用liquibase比较于当前文件与目标对象的差异"></a>2 使用liquibase比较于当前文件与目标对象的差异</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn liquibase:diff</span><br></pre></td></tr></table></figure>
<p>生成的差异文档与实际需求存在差异，删除不需要的升级，并把升级文档用作升级即可</p>
<h2 id="3-嵌入升级文档并运行升级"><a href="#3-嵌入升级文档并运行升级" class="headerlink" title="3 嵌入升级文档并运行升级"></a>3 嵌入升级文档并运行升级</h2><p>运行应用即可升级</p>
<p><a href="http://www.liquibase.org/documentation/diff.html" target="_blank" rel="noopener">liquibase diff</a></p>
<p><a href="http://www.jhipster.tech/development/" target="_blank" rel="noopener">jhipster db upgrade</a></p>
]]></content>
      
        <categories>
            
            <category> db </category>
            
        </categories>
        
        
        <tags>
            
            <tag> liquibase,db upgrade,数据库升级 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js对象创建：模式和最佳实践]]></title>
      <url>/2018/11/26/js-object-creation-patterns-best-practises/</url>
      <content type="html"><![CDATA[<p>js对象的创建是一个棘手的主题。 这种语言有很多创建对象的风格，新手和老手都会感到不知所措，不知道应该使用哪一种。 但是，尽管每种语法都有不同的语法，但是它们可能比您实现的更类似。 在这篇文章中，我将带您了解各种不同风格的对象创建，以及如何逐步建立对象。<br><a id="more"></a></p>
<h2 id="对象字面量（Object-Literals）"><a href="#对象字面量（Object-Literals）" class="headerlink" title="对象字面量（Object Literals）"></a>对象字面量（Object Literals）</h2><p>我们游览的第一站是创建对象的绝对最简单的方法，即对象字面量。 js宣称对象可以创建“ex nilo”，无中生有 - 没有类，没有模板，没有原型 - 只是poof，一个包含方法和数据的对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  x: <span class="number">42</span>,</span><br><span class="line">  y: <span class="number">3.14</span>,</span><br><span class="line">  f: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  g: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>但是缺点是：如果我们需要在其他地方创建相同类型的对象，那么我们最终会复制粘贴对象的方法，数据和初始化。 我们需要一种方法来创建不仅仅是一个对象，而是一个对象的家族。</p>
<h2 id="工厂函数（Factory-Functions）"><a href="#工厂函数（Factory-Functions）" class="headerlink" title="工厂函数（Factory Functions）"></a>工厂函数（Factory Functions）</h2><p>我们巡演的下一站是工厂函数。这是创建共享相同结构，接口和实现的对象族的绝对最简单的方法。 而不是直接创建对象字面量，而是从函数返回对象字面量。这样，如果我们需要多次或在多个地方创建相同类型的对象，我们只需要调用一个函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    x: <span class="number">42</span>,</span><br><span class="line">    y: <span class="number">3.14</span>,</span><br><span class="line">    f: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    g: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = thing();</span><br></pre></td></tr></table></figure></p>
<p>但是缺点是：这种方法会导致内存膨胀，因为每个对象都包含每个函数的唯一副本。 理想情况下，我们希望每个对象只能共享一个函数副本。</p>
<h2 id="原型链（Prototype-Chains）"><a href="#原型链（Prototype-Chains）" class="headerlink" title="原型链（Prototype Chains）"></a>原型链（Prototype Chains）</h2><p>js为我们提供了一个内置的机制来共享跨对象的数据，称为原型链。当我们访问一个对象的属性时，它可以通过委托给其他对象来满足这个请求。我们可以使用它并更改我们的工厂函数，以便它创建的每个对象只包含该特定对象唯一的数据，并将所有其他属性请求委托给一个共享对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> thingPrototype = &#123;</span><br><span class="line">  f: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  g: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="built_in">Object</span>.create(thingPrototype);</span><br><span class="line"></span><br><span class="line">  o.x = <span class="number">42</span>;</span><br><span class="line">  o.y = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = thing();</span><br></pre></td></tr></table></figure></p>
<p>事实上，这是一种常见的模式，语言已经内置了对它的支持。我们不需要创建自己的共享对象（原型对象）。相反，我们会自动为每个函数创建一个原型对象，我们可以将共享数据放在那里。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">thing.prototype.f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">thing.prototype.g = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="built_in">Object</span>.create(thing.prototype);</span><br><span class="line"></span><br><span class="line">  o.x = <span class="number">42</span>;</span><br><span class="line">  o.y = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = thing();</span><br></pre></td></tr></table></figure></p>
<p>但是有一个缺点。 这将导致一些重复。“thing”函数的第一行和最后一行将在每个这样的委托原型工厂函数中几乎逐字地重复。</p>
<h2 id="ES5类"><a href="#ES5类" class="headerlink" title="ES5类"></a>ES5类</h2><p>我们可以通过将重复行移动到自己的功能来隔离重复行。这个函数会创建一个委托给其他任意函数原型的对象，然后用新创建的对象作为参数来调用该函数，最后返回该对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="built_in">Object</span>.create(fn.prototype);</span><br><span class="line"></span><br><span class="line">  fn.call(o);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">Thing.prototype.f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">Thing.prototype.g = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = <span class="number">42</span>;</span><br><span class="line">  <span class="keyword">this</span>.y = <span class="number">3.14</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = create(Thing);</span><br></pre></td></tr></table></figure></p>
<p>实际上，这也是一种常见的模式，语言对它有一些内置的支持。我们定义的“create”函数实际上是“new”关键字的基本版本，我们可以用“new”代替“create”。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Thing.prototype.f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">Thing.prototype.g = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = <span class="number">42</span>;</span><br><span class="line">  <span class="keyword">this</span>.y = <span class="number">3.14</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> Thing();</span><br></pre></td></tr></table></figure></p>
<p>现在我们已经到达了我们通常所说的ES5类。 它们是将共享数据委托给原型对象并依靠“新”关键字来处理重复性逻辑的对象创建函数。</p>
<p>但是有一个缺点。 它是冗长而丑陋的，实现继承更加冗长和丑陋。</p>
<h2 id="ES6类"><a href="#ES6类" class="headerlink" title="ES6类"></a>ES6类</h2><p>相对而言，js最新增加的是ES6类 ，它为执行相同的操作提供了非常简洁的语法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thing</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="number">42</span>;</span><br><span class="line">    <span class="keyword">this</span>.y = <span class="number">3.14</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  f() &#123;&#125;</span><br><span class="line">  g() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> Thing();</span><br></pre></td></tr></table></figure></p>
<p>对照多年来，我们的js开发人与原型链有着一种关系，现在你可能遇到的<strong>两种最常见的风格是类语法（即：ES5类和ES6类）</strong>，它严重依赖原型链，工厂函数语法，后者通常不依赖于原型链。 这两种风格在性能和功能上有所不同，但只是略有不同。</p>
<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>今天，js引擎已经非常优化，几乎不可能查看我们的代码和更快速的原因。 衡量至关重要。 但有时甚至测量可能会使我们失败。 通常情况下，每六个星期就会发布一次更新的js引擎，有时候性能会发生重大变化，我们之前采取的任何测量以及我们基于这些测量所做出的任何决定都会直接跳出窗口。所以，我的经验法则是支持最官方和最广泛使用的语法，假设它会受到最严格的审查，并且是大部分时间内性能最高的语法。 现在是类的语法，当我写这个时，类语法比返回文字的工厂函数大约快3倍。</p>
<h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><p>在ES6中，类和工厂函数之间的功能差异很少。 今天，工厂函数和类都可以通过闭包和类地图来实现真正的私有数据工厂函数。 两者都可以通过将其他属性混合到其自己的对象中来实现多个继承工厂功能，并且还可以通过将其他属性混合到其原型，类工厂或代理中来实现多个继承工厂功能。 如果需要的话，工厂函数和类都可以返回任意的对象。 而且都提供了一个简单的语法。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>综合考虑来看，我的首选是类语法。 这是标准的，它简单，干净，速度快，它提供了以前只有工厂才能提供的每一个功能。</p>
<p><a href="https://www.sitepoint.com/js-object-creation-patterns-best-practises/" target="_blank" rel="noopener">原文</a></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js,object create,js对象创建,js类,最佳实践 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js日期格式化]]></title>
      <url>/2018/11/26/js-date-format/</url>
      <content type="html"><![CDATA[<p>js原生提供了不少的格式化，但因业务需要不能满足需求。因此下面给出一些新的格式化方法，作为原生日期格式化的补充。<br><a id="more"></a></p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>使用以下占位符自定义格式化</p>
<p>月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字) 。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.format = <span class="function"><span class="keyword">function</span> (<span class="params">fmt</span>) </span>&#123; <span class="comment">//author: meizz </span></span><br><span class="line">    <span class="keyword">var</span> o = &#123;</span><br><span class="line">        <span class="string">"M+"</span>: <span class="keyword">this</span>.getMonth() + <span class="number">1</span>, <span class="comment">//月份 </span></span><br><span class="line">        <span class="string">"d+"</span>: <span class="keyword">this</span>.getDate(), <span class="comment">//日 </span></span><br><span class="line">        <span class="string">"h+"</span>: <span class="keyword">this</span>.getHours(), <span class="comment">//小时 </span></span><br><span class="line">        <span class="string">"m+"</span>: <span class="keyword">this</span>.getMinutes(), <span class="comment">//分 </span></span><br><span class="line">        <span class="string">"s+"</span>: <span class="keyword">this</span>.getSeconds(), <span class="comment">//秒 </span></span><br><span class="line">        <span class="string">"q+"</span>: <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">//季度 </span></span><br><span class="line">        <span class="string">"S"</span>: <span class="keyword">this</span>.getMilliseconds() <span class="comment">//毫秒 </span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(fmt)) fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="keyword">this</span>.getFullYear() + <span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + k + <span class="string">")"</span>).test(fmt)) fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length == <span class="number">1</span>) ? (o[k]) : ((<span class="string">"00"</span> + o[k]).substr((<span class="string">""</span> + o[k]).length)));</span><br><span class="line">    <span class="keyword">return</span> fmt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// e.g.</span></span><br><span class="line"><span class="keyword">var</span> now=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(now.format(<span class="string">"yyyy年MM-dd"</span>));</span><br><span class="line"><span class="comment">//print 2017年01-03</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(now.format(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)); </span><br><span class="line"><span class="comment">//print 2017-01-03 23:02:03</span></span><br></pre></td></tr></table></figure>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>使用以下占位符自定义格式化</p>
<p>月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q)可以用 1-2 个占位符 * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.pattern=<span class="function"><span class="keyword">function</span>(<span class="params">fmt</span>) </span>&#123;         </span><br><span class="line">    <span class="keyword">var</span> o = &#123;         </span><br><span class="line">    <span class="string">"M+"</span> : <span class="keyword">this</span>.getMonth()+<span class="number">1</span>, <span class="comment">//月份         </span></span><br><span class="line">    <span class="string">"d+"</span> : <span class="keyword">this</span>.getDate(), <span class="comment">//日         </span></span><br><span class="line">    <span class="string">"h+"</span> : <span class="keyword">this</span>.getHours()%<span class="number">12</span> == <span class="number">0</span> ? <span class="number">12</span> : <span class="keyword">this</span>.getHours()%<span class="number">12</span>, <span class="comment">//小时         </span></span><br><span class="line">    <span class="string">"H+"</span> : <span class="keyword">this</span>.getHours(), <span class="comment">//小时         </span></span><br><span class="line">    <span class="string">"m+"</span> : <span class="keyword">this</span>.getMinutes(), <span class="comment">//分         </span></span><br><span class="line">    <span class="string">"s+"</span> : <span class="keyword">this</span>.getSeconds(), <span class="comment">//秒         </span></span><br><span class="line">    <span class="string">"q+"</span> : <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth()+<span class="number">3</span>)/<span class="number">3</span>), <span class="comment">//季度         </span></span><br><span class="line">    <span class="string">"S"</span> : <span class="keyword">this</span>.getMilliseconds() <span class="comment">//毫秒         </span></span><br><span class="line">    &#125;;         </span><br><span class="line">    <span class="keyword">var</span> week = &#123;         </span><br><span class="line">    <span class="string">"0"</span> : <span class="string">"/u65e5"</span>,         </span><br><span class="line">    <span class="string">"1"</span> : <span class="string">"/u4e00"</span>,         </span><br><span class="line">    <span class="string">"2"</span> : <span class="string">"/u4e8c"</span>,         </span><br><span class="line">    <span class="string">"3"</span> : <span class="string">"/u4e09"</span>,         </span><br><span class="line">    <span class="string">"4"</span> : <span class="string">"/u56db"</span>,         </span><br><span class="line">    <span class="string">"5"</span> : <span class="string">"/u4e94"</span>,         </span><br><span class="line">    <span class="string">"6"</span> : <span class="string">"/u516d"</span>        </span><br><span class="line">    &#125;;         </span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/(y+)/</span>.test(fmt))&#123;         </span><br><span class="line">        fmt=fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="keyword">this</span>.getFullYear()+<span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));         </span><br><span class="line">    &#125;         </span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/(E+)/</span>.test(fmt))&#123;         </span><br><span class="line">        fmt=fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, ((<span class="built_in">RegExp</span>.$<span class="number">1.</span>length&gt;<span class="number">1</span>) ? (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length&gt;<span class="number">2</span> ? <span class="string">"/u661f/u671f"</span> : <span class="string">"/u5468"</span>) : <span class="string">""</span>)+week[<span class="keyword">this</span>.getDay()+<span class="string">""</span>]);         </span><br><span class="line">    &#125;         </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> o)&#123;         </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span>+ k +<span class="string">")"</span>).test(fmt))&#123;         </span><br><span class="line">            fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length==<span class="number">1</span>) ? (o[k]) : ((<span class="string">"00"</span>+ o[k]).substr((<span class="string">""</span>+ o[k]).length)));         </span><br><span class="line">        &#125;         </span><br><span class="line">    &#125;         </span><br><span class="line">    <span class="keyword">return</span> fmt;         </span><br><span class="line">&#125;       </span><br><span class="line">     </span><br><span class="line"><span class="comment">// e.g.</span></span><br><span class="line"><span class="keyword">var</span> now=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(now.format(<span class="string">"yyyy年MM-dd"</span>));</span><br><span class="line"><span class="comment">//print 2017年01-03</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(now.format(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)); </span><br><span class="line"><span class="comment">//print 2017-01-03 23:02:03</span></span><br></pre></td></tr></table></figure>
<h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>使用以下占位符自定义格式化</p>
<p>月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q)可以用 1-2 个占位符 * 年(y)可以用 1-4 个占位符，毫秒(l)只能用 1 个占位符(是 1-3 位的数字)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.format = <span class="function"><span class="keyword">function</span> (<span class="params">mask</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> d = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> zeroize = <span class="function"><span class="keyword">function</span> (<span class="params">value, length</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!length) length = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            value = <span class="built_in">String</span>(value);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, zeros = <span class="string">''</span>; i &lt; (length - value.length); i++) &#123;</span><br><span class="line"></span><br><span class="line">                zeros += <span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> zeros + value;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mask.replace(<span class="regexp">/"[^"]*"|'[^']*'|/</span>b ( ? : d &#123;</span><br><span class="line">        <span class="number">1</span>, <span class="number">4</span></span><br><span class="line">    &#125; | m &#123;</span><br><span class="line">        <span class="number">1</span>, <span class="number">4</span></span><br><span class="line">    &#125; | yy( ? : yy) ? | ([hHMstT]) / <span class="number">1</span> ? | [lLZ]) / b / g, <span class="function"><span class="keyword">function</span> (<span class="params">$<span class="number">0</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> ($<span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">            <span class="keyword">return</span> d.getDate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'dd'</span>:</span><br><span class="line">            <span class="keyword">return</span> zeroize(d.getDate());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'ddd'</span>:</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">'Sun'</span>, <span class="string">'Mon'</span>, <span class="string">'Tue'</span>, <span class="string">'Wed'</span>, <span class="string">'Thr'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>][d.getDay()];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'dddd'</span>:</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">'Sunday'</span>, <span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>, <span class="string">'Saturday'</span>][d.getDay()];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'M'</span>:</span><br><span class="line">            <span class="keyword">return</span> d.getMonth() + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'MM'</span>:</span><br><span class="line">            <span class="keyword">return</span> zeroize(d.getMonth() + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'MMM'</span>:</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">'Jan'</span>, <span class="string">'Feb'</span>, <span class="string">'Mar'</span>, <span class="string">'Apr'</span>, <span class="string">'May'</span>, <span class="string">'Jun'</span>, <span class="string">'Jul'</span>, <span class="string">'Aug'</span>, <span class="string">'Sep'</span>, <span class="string">'Oct'</span>, <span class="string">'Nov'</span>, <span class="string">'Dec'</span>][d.getMonth()];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'MMMM'</span>:</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">'January'</span>, <span class="string">'February'</span>, <span class="string">'March'</span>, <span class="string">'April'</span>, <span class="string">'May'</span>, <span class="string">'June'</span>, <span class="string">'July'</span>, <span class="string">'August'</span>, <span class="string">'September'</span>, <span class="string">'October'</span>, <span class="string">'November'</span>, <span class="string">'December'</span>][d.getMonth()];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'yy'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">String</span>(d.getFullYear()).substr(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'yyyy'</span>:</span><br><span class="line">            <span class="keyword">return</span> d.getFullYear();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line">            <span class="keyword">return</span> d.getHours() % <span class="number">12</span> || <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'hh'</span>:</span><br><span class="line">            <span class="keyword">return</span> zeroize(d.getHours() % <span class="number">12</span> || <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'H'</span>:</span><br><span class="line">            <span class="keyword">return</span> d.getHours();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'HH'</span>:</span><br><span class="line">            <span class="keyword">return</span> zeroize(d.getHours());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'m'</span>:</span><br><span class="line">            <span class="keyword">return</span> d.getMinutes();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'mm'</span>:</span><br><span class="line">            <span class="keyword">return</span> zeroize(d.getMinutes());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">            <span class="keyword">return</span> d.getSeconds();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'ss'</span>:</span><br><span class="line">            <span class="keyword">return</span> zeroize(d.getSeconds());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'l'</span>:</span><br><span class="line">            <span class="keyword">return</span> zeroize(d.getMilliseconds(), <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'L'</span>:</span><br><span class="line">            <span class="keyword">var</span> m = d.getMilliseconds();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (m &gt; <span class="number">99</span>) m = <span class="built_in">Math</span>.round(m / <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> zeroize(m);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'tt'</span>:</span><br><span class="line">            <span class="keyword">return</span> d.getHours() &lt; <span class="number">12</span> ? <span class="string">'am'</span> : <span class="string">'pm'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'TT'</span>:</span><br><span class="line">            <span class="keyword">return</span> d.getHours() &lt; <span class="number">12</span> ? <span class="string">'AM'</span> : <span class="string">'PM'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'Z'</span>:</span><br><span class="line">            <span class="keyword">return</span> d.toUTCString().match(<span class="regexp">/[A-Z]+$/</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Return quoted strings with the surrounding quotes removed      </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> $<span class="number">0.</span>substr(<span class="number">1</span>, $<span class="number">0.</span>length - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">     </span><br><span class="line"><span class="comment">// e.g.</span></span><br><span class="line"><span class="keyword">var</span> now=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(now.format(<span class="string">"yyyy年MM-dd"</span>));</span><br><span class="line"><span class="comment">//print 2017年01-03</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(now.format(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)); </span><br><span class="line"><span class="comment">//print 2017-01-03 23:02:03</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js,date,日期，格式化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java Thread wait, notify and notifyAll 示例]]></title>
      <url>/2018/11/26/java-thread-wait-notify-and-notifyall-example/</url>
      <content type="html"><![CDATA[<p>java中的Object类包含三个允许线程就资源的锁定状态进行通信的最终（final）方法，。他们是<code>wait()</code>，<code>notify()</code>，和<code>notifyAll()</code> 。 今天我们将通过java程序来研究wait，notify和notifyAll。</p>
<a id="more"></a>
<h2 id="Java多线程面试问题"><a href="#Java多线程面试问题" class="headerlink" title="Java多线程面试问题"></a>Java多线程面试问题</h2><p><a name="menu"></a></p>
<ol>
<li><a href="#1">Java中的wait，notify和notifyAll</a><br>1.1 <a href="#1.1">wait</a><br>1.2 <a href="#1.2">notify</a><br>1.3 <a href="#1.3">notifyAll</a><br>1.4 <a href="#1.4">消息</a><br>1.5 <a href="#1.5">等待者</a><br>1.6 <a href="#1.6">通知者</a><br>1.7 <a href="#1.7">等待通知测试</a></li>
</ol>
<h2 id="1-Java中的wait，notify和notifyAll"><a href="#1-Java中的wait，notify和notifyAll" class="headerlink" title="1. Java中的wait，notify和notifyAll"></a><a name="1"></a><a href="#menu">1. Java中的wait，notify和notifyAll</a></h2><p>任何对象调用这些方法的当前线程应具有对象监视器，否则会抛出java.lang.IllegalMonitorStateException异常。</p>
<h3 id="1-1-wait"><a href="#1-1-wait" class="headerlink" title="1.1 wait"></a><a name="1.1"></a><a href="#menu">1.1 wait</a></h3><p>对象wait方法有三种实现，其中一种实现是等待任何其他线程无限期地调用对象的notify或notifyAll方法来唤醒当前线程。 其他两种实现会使当前线程在唤醒之前等待特定的时间。</p>
<h3 id="1-2-notify"><a href="#1-2-notify" class="headerlink" title="1.2 notify"></a><a name="1.2"></a><a href="#menu">1.2 notify</a></h3><p>notify方法只唤醒等待对象的一个​​线程，并且该线程开始执行。所以如果有多个线程在等待一个对象，这个方法只会唤醒其中的一个。线程的选择取决于线程管理的OS实现。</p>
<h3 id="1-3-notifyAll"><a href="#1-3-notifyAll" class="headerlink" title="1.3 notifyAll"></a><a name="1.3"></a><a href="#menu">1.3 notifyAll</a></h3><p>notifyAll方法唤醒等待对象的所有线程，但哪一个将首先处理取决于OS实现。</p>
<p>这些方法可用于实现<strong>生产者消费者问题</strong>，其中消费者线程正在等待队列中的对象，生产者线程将对象放入队列中并通知等待的线程。</p>
<p>让我们来看一个例子，其中多个线程在同一个对象上工作，我们使用wait，notify和notifyAll方法。</p>
<h3 id="1-4-消息"><a href="#1-4-消息" class="headerlink" title="1.4 消息"></a><a name="1.4"></a><a href="#menu">1.4 消息</a></h3><p>Java bean将在线程上工作，并调用wait和notify方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg=str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg=str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="1-5-等待者"><a href="#1-5-等待者" class="headerlink" title="1.5 等待者"></a><a name="1.5"></a><a href="#menu">1.5 等待者</a></h3><p>将等待其他线程调用notify方法来完成处理的类。 请注意，等待者线程使用同步块方式在Message对象上拥有监视器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Waiter</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Message msg;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Waiter</span><span class="params">(Message m)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg=m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String name = Thread.currentThread().getName();</span><br><span class="line">        <span class="keyword">synchronized</span> (msg) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                System.out.println(name+<span class="string">" waiting to get notified at time:"</span>+System.currentTimeMillis());</span><br><span class="line">                msg.wait();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(name+<span class="string">" waiter thread got notified at time:"</span>+System.currentTimeMillis());</span><br><span class="line">            <span class="comment">//process the message now</span></span><br><span class="line">            System.out.println(name+<span class="string">" processed: "</span>+msg.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="1-6-通知者"><a href="#1-6-通知者" class="headerlink" title="1.6 通知者"></a><a name="1.6"></a><a href="#menu">1.6 通知者</a></h3><p>一个将要处理消息对象的类，然后调用notify方法来唤醒等待消息对象的线程。请注意，同步块用于拥有Message对象的监视器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Notifier</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Message msg;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Notifier</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String name = Thread.currentThread().getName();</span><br><span class="line">        System.out.println(name+<span class="string">" started"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (msg) &#123;</span><br><span class="line">                msg.setMsg(name+<span class="string">" Notifier work done"</span>);</span><br><span class="line">                msg.notify();</span><br><span class="line">                <span class="comment">// msg.notifyAll();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="1-7-等待通知测试"><a href="#1-7-等待通知测试" class="headerlink" title="1.7 等待通知测试"></a><a name="1.7"></a><a href="#menu">1.7 等待通知测试</a></h3><p>测试类将创建Waiter和Notifier的多个线程并启动它们。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitNotifyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Message msg = <span class="keyword">new</span> Message(<span class="string">"process it"</span>);</span><br><span class="line">        Waiter waiter = <span class="keyword">new</span> Waiter(msg);</span><br><span class="line">        <span class="keyword">new</span> Thread(waiter,<span class="string">"waiter"</span>).start();</span><br><span class="line">        </span><br><span class="line">        Waiter waiter1 = <span class="keyword">new</span> Waiter(msg);</span><br><span class="line">        <span class="keyword">new</span> Thread(waiter1, <span class="string">"waiter1"</span>).start();</span><br><span class="line">        </span><br><span class="line">        Notifier notifier = <span class="keyword">new</span> Notifier(msg);</span><br><span class="line">        <span class="keyword">new</span> Thread(notifier, <span class="string">"notifier"</span>).start();</span><br><span class="line">        System.out.println(<span class="string">"All the threads are started"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当我们调用上面的程序的时候，我们会看到下面的输出，但是程序不会完成，因为有两个线程在等待Message对象，而notify（）方法只唤醒其中的一个，另一个线程还在等待通知。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">waiter waiting to get notified at time:<span class="number">1356318734009</span></span><br><span class="line">waiter1 waiting to get notified at time:<span class="number">1356318734010</span></span><br><span class="line">All the threads are started</span><br><span class="line">notifier started</span><br><span class="line">waiter waiter thread got notified at time:<span class="number">1356318735011</span></span><br><span class="line">waiter processed: notifier Notifier work done</span><br></pre></td></tr></table></figure>
<p>如果我们注释notify（）调用并不注释Notifier类中的notifyAll（）调用，则下面将生成输出。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">waiter waiting to get notified at time:<span class="number">1356318917118</span></span><br><span class="line">waiter1 waiting to get notified at time:<span class="number">1356318917118</span></span><br><span class="line">All the threads are started</span><br><span class="line">notifier started</span><br><span class="line">waiter1 waiter thread got notified at time:<span class="number">1356318918120</span></span><br><span class="line">waiter1 processed: notifier Notifier work done</span><br><span class="line">waiter waiter thread got notified at time:<span class="number">1356318918120</span></span><br><span class="line">waiter processed: notifier Notifier work done</span><br></pre></td></tr></table></figure></p>
<p>由于notifyAll（）方法唤醒所有Waiter线程和程序完成，并在执行后终止。 这就是所有在Java的wait，notify和notifyAll方法。</p>
<p><a href="https://www.journaldev.com/1037/java-thread-wait-notify-and-notifyall-example" target="_blank" rel="noopener">原文</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java, Thread, wait, notify, notifyAll, 等待, 通知, 通知所有 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java字符串面试问题]]></title>
      <url>/2018/11/26/java-string-interview-questions/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>字符串是广泛使用的Java类之一。这里我列出了一些重要的Java字符串面试问题及答案。</p>
<p>这将极大的帮助我们获取字符串相关的全面知识，在面试中回答有关字符串的任何问题。</p>
<h2 id="Java字符串面试问题列表"><a href="#Java字符串面试问题列表" class="headerlink" title="Java字符串面试问题列表"></a>Java字符串面试问题列表</h2><ol>
<li>Java中的字符串是什么？它是数据类型的吗？</li>
<li>创建字符串对象有哪些不同的方式？</li>
<li>写一个方法检查输入的字符串是否是回文？</li>
<li>写一个方法从字符串中移出给定的字符？</li>
<li>怎以确保字符串是大写或者小写？</li>
<li>字符串的subSequence方法是什么？</li>
<li>Java编程时怎样比较两个字符串？</li>
<li>怎样转换字符串到字符？反过来呢？</li>
<li>怎样转换字符串到字节数据？反过来呢？</li>
<li>swicth case语句中能使用字符串类型吗？</li>
<li>写一个程序打印所有字符串排列？</li>
<li>写一个方法找出给出字符串中最长的回文？</li>
<li>String, StringBuffer and StringBuilder有什么区别？</li>
<li>Java中为什么字符串是永恒不变和拒绝继承的？</li>
<li>Java中怎样分隔字符串？</li>
<li>为什么存储密码字符数组比字符串更合适？</li>
<li>Java中怎样检测两个字符串是否相等？</li>
<li>字符串常量池是什么？</li>
<li>字符串的<code>intern()</code>方法做了什么？</li>
<li>Java中的字符串是线程安全的吗？</li>
<li>Java中为什么字符串是受欢迎的Hasmap key？</li>
<li>字符串编程？</li>
</ol>
<h2 id="Java字符串面试问题及答案"><a href="#Java字符串面试问题及答案" class="headerlink" title="Java字符串面试问题及答案"></a>Java字符串面试问题及答案</h2><h3 id="1-Java中的String是什么？它是数据类型的吗？"><a href="#1-Java中的String是什么？它是数据类型的吗？" class="headerlink" title="1. Java中的String是什么？它是数据类型的吗？"></a>1. Java中的String是什么？它是数据类型的吗？</h3><p>String是一个定义在<code>java.lang</code>包中的Java类。它不是像int或long类似的原始数据类型。字符串(String)类表示了一个字符串。字符串被使用在几乎所有的Java就应用中，这里有一个我们应当知道的有趣的特性。<strong>Java中的字符串是不可变的且无法扩展的。JVM使用字符串常量池存储所有字符串对象。其他有趣的是关于使用双引号初始化字符串的方式和“+”操作符重载</strong>。</p>
<h3 id="2-创建字符串对象有哪些不同的方式？"><a href="#2-创建字符串对象有哪些不同的方式？" class="headerlink" title="2. 创建字符串对象有哪些不同的方式？"></a>2. 创建字符串对象有哪些不同的方式？</h3><p>可以使用<code>new</code>操作符或者双引号初始化一个字符串对象。也可以使用char数组, byte数组, StringBuffer或StringBuilder构造器初始化后，获取字符串对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">"abc"</span>;</span><br><span class="line">String str = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure>
<p>在我们使用双引号创建字符串时，JVM将从字符串常量池中查找，若找到相同的字符串，将直接返回引用，并直接指向它，否则重新创建一个字符串对象，存储在字符串常量池中，并指向它。</p>
<p>在使用new操作符时，JVM创建了字符串对象，但不存储在字符串常量池中。我们可以使用<code>intern()</code>方法存储它到字符串常量池，若池中存在相等的字符串，将直接返回引用。</p>
<h3 id="3-写一个方法检查输入的字符串是否是回文？"><a href="#3-写一个方法检查输入的字符串是否是回文？" class="headerlink" title="3. 写一个方法检查输入的字符串是否是回文？"></a>3. 写一个方法检查输入的字符串是否是回文？</h3><p>如果字符串反向后与反向前的值相等，则字符串是回文。如“aba”就是回文。</p>
<p>字符串类没有提供任何反向字符串的方法，但是StringBuffer和StringBuilder类提供，可以用于检测是否是回文。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    StringBuilder strBuilder = <span class="keyword">new</span> StringBuilder(str);</span><br><span class="line">    strBuilder.reverse();</span><br><span class="line">    <span class="keyword">return</span> strBuilder.toString().equals(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有时面试官会问还有其他方式吗？这时你可以比较字符串中的字符方式来检测是否是回文。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (str == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span> length = str.length();</span><br><span class="line">    System.out.println(length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length / <span class="number">2</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (str.charAt(i) != str.charAt(length - i - <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-写一个方法从字符串中移出给定的字符？"><a href="#4-写一个方法从字符串中移出给定的字符？" class="headerlink" title="4. 写一个方法从字符串中移出给定的字符？"></a>4. 写一个方法从字符串中移出给定的字符？</h3><p>可以使用<code>replaceAll</code>方法把字符串多次替换成其他字符串。重点要提出的是接受的参数是字符串类型的，因此我们要使用Character类创建一个字符串类，然后替换成空字符串。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">removeChar</span><span class="params">(String str, <span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> str.replaceAll(Character.toString(c), <span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-怎以确保字符串是大写或者小写？"><a href="#5-怎以确保字符串是大写或者小写？" class="headerlink" title="5. 怎以确保字符串是大写或者小写？"></a>5. 怎以确保字符串是大写或者小写？</h3><p>使用<code>toUpperCase</code>和<code>toLowerCase</code>方法就可以得到大写和小写字符串。这两个方法还有带本地参数的变种方法。</p>
<h3 id="6-字符串的subSequence方法是什么？"><a href="#6-字符串的subSequence方法是什么？" class="headerlink" title="6. 字符串的subSequence方法是什么？"></a>6. 字符串的subSequence方法是什么？</h3><p>Java 1.4 引入了CharSequence接口，字符串类实现了该接口。内部它是调用字符串类的substring方法。</p>
<h3 id="7-Java编程时怎样比较两个字符串？"><a href="#7-Java编程时怎样比较两个字符串？" class="headerlink" title="7. Java编程时怎样比较两个字符串？"></a>7. Java编程时怎样比较两个字符串？</h3><p>Java字符串实现了Comparable接口，它有两个变种的<code>compareTo()</code>方法。</p>
<p><code>compareTo(String anotherString)</code>方法是按字典顺序比较字符串和入参字符串的。如果字符串先于输入参，则返回负整数，若字符串在入参之后。则返回正整数，若相等值则返回0，在这种情形时<code>equals(String str)</code>返回true。</p>
<p><code>compareToIgnoreCase(String str)</code>方法与第一个相似，但忽略了大小写。</p>
<h3 id="8-怎样转换字符串到字符？反过来呢？"><a href="#8-怎样转换字符串到字符？反过来呢？" class="headerlink" title="8. 怎样转换字符串到字符？反过来呢？"></a>8. 怎样转换字符串到字符？反过来呢？</h3><p>这是一个狡猾的问题，因为字符串是一亿字符序列，我们不能转换它到单个字符串。可以给出索引使用<code>charAt</code>方法得到指定位置的字符，也可以使用<code>toCharArray()</code>转换成字符数组。</p>
<p>使用new关键字就可以把字符数组转换成字符串。使用<code>Character.toString(char c)</code>转换字符到字符串。</p>
<h3 id="9-怎样转换字符串到字节数据？反过来呢？"><a href="#9-怎样转换字符串到字节数据？反过来呢？" class="headerlink" title="9. 怎样转换字符串到字节数据？反过来呢？"></a>9. 怎样转换字符串到字节数据？反过来呢？</h3><p>使用字符串的<code>getBytes()</code>方法转换字符串到字节数组，使用字符串构造器<code>new String(byte[] arr)</code>转换字节数组到字符串。</p>
<h3 id="10-swicth-case语句中能使用字符串类型吗？"><a href="#10-swicth-case语句中能使用字符串类型吗？" class="headerlink" title="10. swicth case语句中能使用字符串类型吗？"></a>10. swicth case语句中能使用字符串类型吗？</h3><p>java 7引入的新特性之一，switch case语句中可以使用字符串类型。因此java 7或更高版本可以使用。</p>
<h3 id="11-写一个程序打印给出字符串的所有的排列方式？"><a href="#11-写一个程序打印给出字符串的所有的排列方式？" class="headerlink" title="11. 写一个程序打印给出字符串的所有的排列方式？"></a>11. 写一个程序打印给出字符串的所有的排列方式？</h3><p>这是一个狡猾的问题，我们需要递归找出所有的排列，如“AAB”的所有排列是“AAB”，“ABA”和“BAA”。我们需要<code>Set</code>来确保不重复的值。</p>
<p>首先要获取首个字符与剩下的字符排列做交集。如“ABC”，首字符是A，剩下字符排列是“BC”和“CB”。我们可以把剩下不同的排例插入到首字符。<br>BC -&gt; ABC, BAC, BCA<br>CB -&gt; ACB, CAB, CBA<br>依此类推，递归就实现了以上算法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java Program to find all permutations of a String</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xxx</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringHelper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;String&gt; <span class="title">permutationFinder</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; perm = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        <span class="comment">//Handling error scenarios</span></span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            perm.add(<span class="string">""</span>);</span><br><span class="line">            <span class="keyword">return</span> perm;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> initial = str.charAt(<span class="number">0</span>); <span class="comment">// first character</span></span><br><span class="line">        String rem = str.substring(<span class="number">1</span>); <span class="comment">// Full string without first character</span></span><br><span class="line">        Set&lt;String&gt; words = permutationFinder(rem);</span><br><span class="line">        <span class="keyword">for</span> (String strNew : words) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;=strNew.length();i++)&#123;</span><br><span class="line">                perm.add(charInsert(strNew, initial, i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> perm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">charInsert</span><span class="params">(String str, <span class="keyword">char</span> c, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        String begin = str.substring(<span class="number">0</span>, j);</span><br><span class="line">        String end = str.substring(j);</span><br><span class="line">        <span class="keyword">return</span> begin + c + end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">"AAC"</span>;</span><br><span class="line">        String s1 = <span class="string">"ABC"</span>;</span><br><span class="line">        String s2 = <span class="string">"ABCD"</span>;</span><br><span class="line">        System.out.println(<span class="string">"\nPermutations for "</span> + s + <span class="string">" are: \n"</span> + permutationFinder(s));</span><br><span class="line">        System.out.println(<span class="string">"\nPermutations for "</span> + s1 + <span class="string">" are: \n"</span> + permutationFinder(s1));</span><br><span class="line">        System.out.println(<span class="string">"\nPermutations for "</span> + s2 + <span class="string">" are: \n"</span> + permutationFinder(s2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="12-写一个方法找出给出字符串中最长的回文？"><a href="#12-写一个方法找出给出字符串中最长的回文？" class="headerlink" title="12. 写一个方法找出给出字符串中最长的回文？"></a>12. 写一个方法找出给出字符串中最长的回文？</h3><p>关键点是任何回文从中间开始左右各移动1位，字符相等。若是奇数长度则中间为1位，若是偶数长度中间为2位。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongestPalindromeFinder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(longestPalindromeString(<span class="string">"1234"</span>));</span><br><span class="line">        System.out.println(longestPalindromeString(<span class="string">"12321"</span>));</span><br><span class="line">        System.out.println(longestPalindromeString(<span class="string">"9912321456"</span>));</span><br><span class="line">        System.out.println(longestPalindromeString(<span class="string">"9912333321456"</span>));</span><br><span class="line">        System.out.println(longestPalindromeString(<span class="string">"12145445499"</span>));</span><br><span class="line">        System.out.println(longestPalindromeString(<span class="string">"1223213"</span>));</span><br><span class="line">        System.out.println(longestPalindromeString(<span class="string">"abb"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> String <span class="title">intermediatePalindrome</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length()</span><br><span class="line">                &amp;&amp; s.charAt(left) == s.charAt(right)) &#123;</span><br><span class="line">            left--;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(left + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// O(n^2)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longestPalindromeString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        String longest = s.substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//odd cases like 121 奇数长度中间为1位。</span></span><br><span class="line">            String palindrome = intermediatePalindrome(s, i, i);</span><br><span class="line">            <span class="keyword">if</span> (palindrome.length() &gt; longest.length()) &#123;</span><br><span class="line">                longest = palindrome;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//even cases like 1221 偶数长度中间为2位</span></span><br><span class="line">            palindrome = intermediatePalindrome(s, i, i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (palindrome.length() &gt; longest.length()) &#123;</span><br><span class="line">                longest = palindrome;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> longest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="13-String-StringBuffer-and-StringBuilder有什么区别？"><a href="#13-String-StringBuffer-and-StringBuilder有什么区别？" class="headerlink" title="13. String, StringBuffer and StringBuilder有什么区别？"></a>13. String, StringBuffer and StringBuilder有什么区别？</h3><p>String是永不变化且拒绝扩展的。因此在做String操作时，创建了新的字符串。由于String操作有资源消耗，因此提供了String操作的助手类–StringBuffer和StringBuilder。</p>
<p>StringBuffer和StringBuilder都是可变的类。因加了同步锁，所以StringBuffer操作时是线程安全的，而StringBuilder不是。因此在多线程操作同一字符串时应当使用StringBuffer，但单线程环境我们应当使用StringBuilder。</p>
<p>StringBuilder性能优于StringBuffer是因为StringBuilder未加同步锁。</p>
<h3 id="14-Java中为什么字符串是永恒不变和拒绝继承的？"><a href="#14-Java中为什么字符串是永恒不变和拒绝继承的？" class="headerlink" title="14. Java中为什么字符串是永恒不变和拒绝继承的？"></a>14. Java中为什么字符串是永恒不变和拒绝继承的？</h3><p>字符是永恒不变和拒绝继承有如下好处：</p>
<ol>
<li>字符串不可变才使得线程池变为可能。</li>
<li>因为在存储诸如用户名和密码等第三信息时，任何黑客不能改变它的值。增强了安全性！</li>
<li>由于字符串不可变，它就可以安全用于多线程中，不需要任何同步。</li>
<li>字符串不可变性，使得java类加载器可以准确的加载。</li>
</ol>
<h3 id="15-Java中怎样分隔字符串？"><a href="#15-Java中怎样分隔字符串？" class="headerlink" title="15. Java中怎样分隔字符串？"></a>15. Java中怎样分隔字符串？</h3><p>基于正规表达式的方式，使用<code>split(String regex)</code>分隔转换成字符串数组。 </p>
<h3 id="16-为什么存储密码字符数组比字符串更合适？"><a href="#16-为什么存储密码字符数组比字符串更合适？" class="headerlink" title="16. 为什么存储密码字符数组比字符串更合适？"></a>16. 为什么存储密码字符数组比字符串更合适？</h3><ol>
<li>因为字符串是不可变对象，如果作为普通文本存储密码，那么它会一直存在内存中直至被垃圾收集器回收。因为字符串从字符串池中取出的（如果池中有该字符串就直接从池中获取，否则new 一个出来，然后把它放入池中），这样有很大的机会长期保留在内存中，这样会引发安全问题。因为任何可以访问内存的人能以明码的方式把密码dump出来。另外你还应该始终以加密而不是普通的文本来表示密码。因为字符串是不可变，因此没有任何方法可以改变其内容，任何改变都将产生一个新的字符串，而如果使用char[]，你就可以设置所有的元素为空或者为零（这里意思是说，让认证完后该数组不再使用了，就可以用零或者null覆盖原来的密码，防止别人从内存中dump出来）。所以存储密码用字符数组可以明显的减轻密码被盗的危险。</li>
<li>Java官方本身也推荐字符数组，JpasswordField的方法getPassword()就是返回一个字符数组，而由于安全原因getText()方法是被废弃掉的，因为它返回一个纯文本字符串。跟随Java 团队的步伐吧，没有错。</li>
<li>字符串以普通文本打印在log文件或控制台中也易引起危险，但是如果使用数组你不能打印数组的内容，而是它的内存地址。尽管这不是它的真正原因，但仍值得注意。</li>
</ol>
<h3 id="17-Java中怎样检测两个字符串是否相等？"><a href="#17-Java中怎样检测两个字符串是否相等？" class="headerlink" title="17. Java中怎样检测两个字符串是否相等？"></a>17. Java中怎样检测两个字符串是否相等？</h3><p>有<code>equal</code>和<code>==</code>操作符实现。使用<code>==</code>操作符除了检查值之外还要检查是否是同一引用，更多时候我们是检查值是否相等。因此我们应当使用<code>equal</code>检查两个字符串是否相等。</p>
<h3 id="18-字符串常量池是什么？"><a href="#18-字符串常量池是什么？" class="headerlink" title="18. 字符串常量池是什么？"></a>18. 字符串常量池是什么？</h3><p>正如名字所示，字符串常量池是存储在Java堆内存中的一个字符串的常量池。</p>
<h3 id="19-字符串的intern-方法做了什么？"><a href="#19-字符串的intern-方法做了什么？" class="headerlink" title="19. 字符串的intern()方法做了什么？"></a>19. 字符串的<code>intern()</code>方法做了什么？</h3><p>在做<code>intern</code>调用时，如果字符串池中存在相等值（<code>equals(Object)</code>）的字符串对象，则返回引用。否则创建后添加到字符串池，并引用它。</p>
<h3 id="20-Java中的字符串是线程安全的吗？"><a href="#20-Java中的字符串是线程安全的吗？" class="headerlink" title="20. Java中的字符串是线程安全的吗？"></a>20. Java中的字符串是线程安全的吗？</h3><p>字符串是不可变的，因此程序中不能改变这个值。因此是编程安全的，可以被安全的用于多线程环境。</p>
<h3 id="21-Java中为什么字符串是受欢迎的Hasmap-key？"><a href="#21-Java中为什么字符串是受欢迎的Hasmap-key？" class="headerlink" title="21. Java中为什么字符串是受欢迎的Hasmap key？"></a>21. Java中为什么字符串是受欢迎的Hasmap key？</h3><p>由于字符串不可变，它的hascode是在创建时缓存的，它也不需要再次计算。也使得他在处理时比其他key对象更快。这也是为什么字符串最常用来当做HasMap key的原因。</p>
<h3 id="22-字符串编程？"><a href="#22-字符串编程？" class="headerlink" title="22. 字符串编程？"></a>22. 字符串编程？</h3><h4 id="1-如下程序的输出"><a href="#1-如下程序的输出" class="headerlink" title="1. 如下程序的输出?"></a>1. 如下程序的输出?</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="keyword">new</span> String(<span class="string">"pankaj"</span>);</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">"PANKAJ"</span>);</span><br><span class="line">        System.out.println(s1 = s2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个简单但狡猾的问题，不要忘记<code>==</code>操作符。</p>
<h4 id="2-如下程序的输出"><a href="#2-如下程序的输出" class="headerlink" title="2. 如下程序的输出?"></a>2. 如下程序的输出?</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"String"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(StringBuffer sb)</span></span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"StringBuffer"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Test().foo(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>出现编译错误“The method foo(String) is ambiguous for the type Test”。入参没有明确类型。</p>
<h4 id="3-如下代码段将输出什么"><a href="#3-如下代码段将输出什么" class="headerlink" title="3. 如下代码段将输出什么?"></a>3. 如下代码段将输出什么?</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">System.out.println(s1 == s2);</span><br></pre></td></tr></table></figure>
<p>输出“false”，因为<code>new</code>操作符强行创建了引用，<code>==</code>操作会比较引用。</p>
<h4 id="4-如下代码段将输出什么"><a href="#4-如下代码段将输出什么" class="headerlink" title="4. 如下代码段将输出什么?"></a>4. 如下代码段将输出什么?</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"abc"</span>;</span><br><span class="line">StringBuffer s2 = <span class="keyword">new</span> StringBuffer(s1);</span><br><span class="line">System.out.println(s1.equals(s2));</span><br></pre></td></tr></table></figure>
<p>输出“false”，因为<code>equals</code>方法实现会使用<code>instanceof</code>操作检查类型，相同类型且值相等则返回true，否返回false。</p>
<h4 id="5-如下代码段将输出什么"><a href="#5-如下代码段将输出什么" class="headerlink" title="5. 如下代码段将输出什么?"></a>5. 如下代码段将输出什么?</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"abc"</span>;</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">s2.intern();</span><br><span class="line">System.out.println(s1 ==s2);</span><br></pre></td></tr></table></figure>
<p>输出“false”，<code>intern()</code>返回了引用，但需再次分配给s2，若<code>s2 = s2.intern()</code>，则输出“true”。</p>
<h4 id="6-如下代码段创建了多少个String对象？"><a href="#6-如下代码段创建了多少个String对象？" class="headerlink" title="6. 如下代码段创建了多少个String对象？"></a>6. 如下代码段创建了多少个String对象？</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"Hello"</span>);  </span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">"Hello"</span>);</span><br></pre></td></tr></table></figure>
<p>答案是3个。<br>第1个 - 第1行, 存储在字符串常量池的“Hello” 对象。<br>第2个 - 第1行, 在堆内存的“Hello”字符串对象。<br>第3个 - 第2行, 在堆内存的“Hello”字符串对象（内存地址与上一行的不一样），这里的“Hello”字符重用了字符串常量中的字符串。 </p>
<p><a href="https://www.journaldev.com/1321/java-string-interview-questions-and-answers" target="_blank" rel="noopener">原文</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java,String,interview,字符串,面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java编程面试问题]]></title>
      <url>/2018/11/26/java-programming-interview-questions/</url>
      <content type="html"><![CDATA[<p>在任何java面试中，编程面试总是起决定性影响。最近我参加了许多的面试，因此我搜集了一些有点狡猾的java编程面试题<br><a id="more"></a></p>
<p>先给出问题，可以自己做个小测验，最后与给出的答案和说明对照下，评估下自己掌握的java知识点。</p>
<h2 id="1-java编程面试问题1"><a href="#1-java编程面试问题1" class="headerlink" title="1. java编程面试问题1"></a>1. java编程面试问题1</h2><p>如下语句将输出什么？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"abc"</span>;</span><br><span class="line">String s2 = <span class="string">"abc"</span>;</span><br><span class="line">System.out.println(<span class="string">"s1 == s2 is:"</span> + s1 == s2);</span><br></pre></td></tr></table></figure>
<h2 id="2-java编程面试问题2"><a href="#2-java编程面试问题2" class="headerlink" title="2. java编程面试问题2"></a>2. java编程面试问题2</h2><p>如下语句将输出什么？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String s3 = <span class="string">"JournalDev"</span>;</span><br><span class="line"><span class="keyword">int</span> start = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> end = <span class="number">5</span>;</span><br><span class="line">System.out.print(start + end);</span><br><span class="line">System.out.print(s3.substring(start, end));</span><br></pre></td></tr></table></figure>
<h2 id="3-java编程面试问题3"><a href="#3-java编程面试问题3" class="headerlink" title="3. java编程面试问题3"></a>3. java编程面试问题3</h2><p>如下语句将输出什么？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HashSet shortSet = <span class="keyword">new</span> HashSet();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">short</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    shortSet.add(i);</span><br><span class="line">    shortSet.remove(i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(shortSet.size());</span><br></pre></td></tr></table></figure>
<h2 id="4-java编程面试问题4"><a href="#4-java编程面试问题4" class="headerlink" title="4. java编程面试问题4"></a>4. java编程面试问题4</h2><p>布尔值flag为什么值可以到达finally语句块</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"In Finally"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-java编程面试问题5"><a href="#5-java编程面试问题5" class="headerlink" title="5. java编程面试问题5"></a>5. java编程面试问题5</h2><p>如下语句将输出什么？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="keyword">null</span>;</span><br><span class="line">String str1=<span class="string">"abc"</span>;</span><br><span class="line">System.out.println(str1.equals(<span class="string">"abc"</span>) | str.equals(<span class="keyword">null</span>));</span><br></pre></td></tr></table></figure>
<h2 id="6-java编程面试问题6"><a href="#6-java编程面试问题6" class="headerlink" title="6. java编程面试问题6"></a>6. java编程面试问题6</h2><p>如下语句将输出什么？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String x = <span class="string">"abc"</span>;</span><br><span class="line">String y = <span class="string">"abc"</span>;</span><br><span class="line">x.concat(y);</span><br><span class="line">System.out.print(x);</span><br></pre></td></tr></table></figure>
<h2 id="7-java编程面试问题7"><a href="#7-java编程面试问题7" class="headerlink" title="7. java编程面试问题7"></a>7. java编程面试问题7</h2><p>如下程序的将输出什么？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">10</span>*<span class="number">10</span>-<span class="number">10</span>;        </span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="8-java编程面试问题8"><a href="#8-java编程面试问题8" class="headerlink" title="8. java编程面试问题8"></a>8. java编程面试问题8</h2><p>如下程序在编译和执行时，将输出什么？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Hello"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException | Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="希望你在看答案和解决之前先把上面的问题看一下"><a href="#希望你在看答案和解决之前先把上面的问题看一下" class="headerlink" title="希望你在看答案和解决之前先把上面的问题看一下"></a>希望你在看答案和解决之前先把上面的问题看一下</h2><h3 id="1-java编程面试问题1答案和说明"><a href="#1-java编程面试问题1答案和说明" class="headerlink" title="1. java编程面试问题1答案和说明"></a>1. java编程面试问题1答案和说明</h3><p>将输出“false”。“+”操作符优先于“==”操作符运逄，最终将输出”s1 == s2 is:abc” == “abc”的结果即false。</p>
<h3 id="2-java编程面试问题2答案和说明"><a href="#2-java编程面试问题2答案和说明" class="headerlink" title="2. java编程面试问题2答案和说明"></a>2. java编程面试问题2答案和说明</h3><p>将输出“6ourn”。首先字符类型会转换成int型，之后字符串的字符数组是从0开始的，substring函数功能截取的从startIndex开始的，endIndex-startIndex长度的字符串。</p>
<h3 id="3-java编程面试问题3答案和说明"><a href="#3-java编程面试问题3答案和说明" class="headerlink" title="3. java编程面试问题3答案和说明"></a>3. java编程面试问题3答案和说明</h3><p>将输出“100”。java自动装箱的特性在JDK5被引入，当我们在添加一个short类型值到HashSet<short>时，short原始类型自动装箱转换成Short对象。当在执行i-1将被转换成int原始类型，在做删除时会被自动装箱成Integer对象，然而HashSet<short>中并没有Integer对象，因此不能移除任何东西，所以最终列表的总数为100。</short></short></p>
<h3 id="4-java编程面试问题4答案和说明"><a href="#4-java编程面试问题4答案和说明" class="headerlink" title="4. java编程面试问题4答案和说明"></a>4. java编程面试问题4答案和说明</h3><p>finally代码块将不可达。如果falg值为TRUE，将无限循环，若为FALSE，将退出JVM。</p>
<h3 id="5-java编程面试问题5答案和说明"><a href="#5-java编程面试问题5答案和说明" class="headerlink" title="5. java编程面试问题5答案和说明"></a>5. java编程面试问题5答案和说明</h3><p>将输出抛出空指针异常java.lang.NullPointerException。在做“|”操作时str为null，null在做.equals()方法将会抛出异常。一般使用“||”和“&amp;&amp;”操作符做短路逻辑操作。</p>
<h3 id="6-java编程面试问题6答案和说明"><a href="#6-java编程面试问题6答案和说明" class="headerlink" title="6. java编程面试问题6答案和说明"></a>6. java编程面试问题6答案和说明</h3><p>将输出“abc”。注意x.concat(y)将创建一个新字符串，但是并没有分配给x，因此x并未改变。</p>
<h3 id="7-java编程面试问题7答案和说明"><a href="#7-java编程面试问题7答案和说明" class="headerlink" title="7. java编程面试问题7答案和说明"></a>7. java编程面试问题7答案和说明</h3><p>将产生运行时错误，main方法必须时static</p>
<h3 id="8-java编程面试问题8答案和说明"><a href="#8-java编程面试问题8答案和说明" class="headerlink" title="8. java编程面试问题8答案和说明"></a>8. java编程面试问题8答案和说明</h3><p>不能输出“Hello”，将产生编译时错误，IOException继承自Exception，因此需要分层捕获，更具体的异常在前。</p>
<p><a href="https://www.journaldev.com/370/java-programming-interview-questions" target="_blank" rel="noopener">原文</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java,programming, interview,编程,面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java多线程、并发常见面试问题]]></title>
      <url>/2018/11/26/java-multithreading-concurrency-interview-questions/</url>
      <content type="html"><![CDATA[<p>今天我们将通过研究java多线程面试问题同时也研究并发面试问题，因为多线程和并发密不可分。线程是Java面试中的热门话题之一。在这里我从面试的角度列出了大部分重要的java多线程面试问题，不过您应该对java线程有很好的了解，才能应付以下问题。</p>
<a id="more"></a>
<h2 id="Java多线程面试问题"><a href="#Java多线程面试问题" class="headerlink" title="Java多线程面试问题"></a>Java多线程面试问题</h2><ol>
<li>进程和线程有什么区别？</li>
<li>多线程编程有哪些好处？</li>
<li>用户线程和守护线程有什么区别？</li>
<li>我们如何在Java中创建一个线程？</li>
<li>线程生命周期中有什么不同的状态？</li>
<li>我们可以调用Thread类的run()方法吗？</li>
<li>我们如何在特定时间暂停线程执行？</li>
<li>你对线程优先级有什么了解？</li>
<li>什么是线程计划和时间切片？</li>
<li>什么是多线程中的上下文切换？</li>
<li>我们如何确保main()是Java程序中完成的最后一个线程？</li>
<li>线程如何相互通信？</li>
<li>为什么线程通信方法wait()，notify()和notifyAll()都在Object类中？</li>
<li>为什么wait()，notify()和notifyAll()方法必须从synchronized方法或块调用？</li>
<li>为什么线程sleep()和yield()方法是静态的？</li>
<li>我们如何在Java中实现线程安全？</li>
<li>在Java中的volatile关键字是什么？</li>
<li>同步方法或同步块哪个是更优选择？</li>
<li>如何在Java中创建守护进程线程？</li>
<li>什么是ThreadLocal？</li>
<li>什么是线程组？ 为什么建议不要使用它？</li>
<li>什么是Java线程Dump，我们如何获得程序的Java线程Dump？</li>
<li>什么是死锁？ 如何分析和避免死锁的情形？</li>
<li>什么是Java时间类？ 如何安排任务在特定间隔时间后运行？</li>
<li>什么是线程池？ 我们如何在Java中创建线程池？</li>
<li>如果我们不覆盖线程类run()方法，会发生什么？</li>
</ol>
<h2 id="Java并发访问问题"><a href="#Java并发访问问题" class="headerlink" title="Java并发访问问题"></a>Java并发访问问题</h2><ol>
<li>什么是原子操作？ Java并发API中的原子类是什么？</li>
<li>什么是Java并发API中的锁接口？ 与同步相比有什么好处？</li>
<li>什么是Executors框架？</li>
<li>什么是阻塞队列？ 我们如何使用阻塞队列实现生产者-消费者问题？</li>
<li>什么是Callable和Future？</li>
<li>什么是FutureTask类？</li>
<li>什么是Concurrent Collection类？</li>
<li>什么是Executors类？</li>
<li>Java 8中的并发API的一些改进是什么？</li>
</ol>
<h2 id="Java多线程面试问题答案"><a href="#Java多线程面试问题答案" class="headerlink" title="Java多线程面试问题答案"></a>Java多线程面试问题答案</h2><h3 id="1-进程和线程有什么区别？"><a href="#1-进程和线程有什么区别？" class="headerlink" title="1. 进程和线程有什么区别？"></a>1. 进程和线程有什么区别？</h3><p>进程是一个自包含的执行环境，它可以被看作一个程序或应用程序，而线程是一个单独的执行任务。 Java运行时环境作为单个进程运行，它包含不同的类和作为进程运行的程序。线程可以称为轻量级进程。 线程需要较少的资源来创建并存在于进程中，线程共享进程资源。</p>
<h3 id="2-多线程编程有哪些好处？"><a href="#2-多线程编程有哪些好处？" class="headerlink" title="2. 多线程编程有哪些好处？"></a>2. 多线程编程有哪些好处？</h3><p>在多线程编程中，多个线程同时执行，提高了性能，是因为CPU不空闲，一些线程正在等待获取一些资源。 多个线程共享堆内存，因此创建多个线程来执行某些任务比创建多个进程更好。 例如，Servlet的性能比CGI更好，因为Servlet支持多线程，但CGI不支持。</p>
<h3 id="3-用户线程和守护线程有什么区别？"><a href="#3-用户线程和守护线程有什么区别？" class="headerlink" title="3. 用户线程和守护线程有什么区别？"></a>3. 用户线程和守护线程有什么区别？</h3><p>当我们在java程序中创建一个线程时，它被称为用户线程。 守护线程在后台运行，不会阻止JVM终止。 当没有用户线程运行时，JVM关闭程序并退出。 从守护线程创建的子线程也是一个守护线程。</p>
<h3 id="4-我们如何在Java中创建一个线程？"><a href="#4-我们如何在Java中创建一个线程？" class="headerlink" title="4. 我们如何在Java中创建一个线程？"></a>4. 我们如何在Java中创建一个线程？</h3><p>在Java中创建线程有两种方法 - 第一种方式是实现Runnable接口，然后从中创建线程对象，第二种方法是扩展Thread类。 阅读这篇文章了解更多关于<a href="https://www.journaldev.com/1016/java-thread-example" target="_blank" rel="noopener">在java中创建线程</a> 。</p>
<h3 id="5-线程生命周期中有什么不同的状态？"><a href="#5-线程生命周期中有什么不同的状态？" class="headerlink" title="5. 线程生命周期中有什么不同的状态？"></a>5. 线程生命周期中有什么不同的状态？</h3><p>当我们在java程序中创建一个线程时，它的状态是New。 然后我们启动将其状态更改为Runnable的线程。 线程调度器负责将CPU分配给Runnable线程池中的线程，并将其状态更改为Running。 其他线程状态是 Waiting, Blocked和Dead。 阅读这篇文章，了解<a href="https://www.journaldev.com/1044/thread-life-cycle-in-java-thread-states-in-java" target="_blank" rel="noopener">线程生命周期</a>的更多信息。</p>
<h3 id="6-我们可以调用Thread类的run-方法吗？"><a href="#6-我们可以调用Thread类的run-方法吗？" class="headerlink" title="6. 我们可以调用Thread类的run()方法吗？"></a>6. 我们可以调用Thread类的run()方法吗？</h3><p>可以，我们可以调用Thread类的run()方法，但它的行为就像一个普通的方法。 要在一个线程中执行它时，我们需要先使用<strong>Thread.start()</strong>方法启动它。</p>
<h3 id="7-我们如何在特定时间暂停线程执行？"><a href="#7-我们如何在特定时间暂停线程执行？" class="headerlink" title="7. 我们如何在特定时间暂停线程执行？"></a>7. 我们如何在特定时间暂停线程执行？</h3><p>我们可以使用Thread类sleep()方法暂停执行线程一段时间。 请注意，线程在特定时间内不会停止处理，一旦线程从睡眠状态唤醒，状态变为可运行，并且基于线程调度计划，它将被执行。</p>
<h3 id="8-你对线程优先级有什么了解？"><a href="#8-你对线程优先级有什么了解？" class="headerlink" title="8. 你对线程优先级有什么了解？"></a>8. 你对线程优先级有什么了解？</h3><p>每个线程都有一个优先级，通常较高优先级的线程在执行时优先，但这取决于依赖于操作系统的Thread Scheduler实现。 我们可以指定线程的优先级，但不能保证较高优先级的线程在低优先级线程之前被执行。 线程优先级是一个int，其值从1到10，其中1是最低优先级线程，10是最高优先级线程。</p>
<h3 id="9-什么是线程计划和时间切片？"><a href="#9-什么是线程计划和时间切片？" class="headerlink" title="9. 什么是线程计划和时间切片？"></a>9. 什么是线程计划和时间切片？</h3><p>线程调度程序（Thread Scheduler）是将CPU时间分配给可用的可运行线程的操作系统服务。 一旦我们创建和启动一个线程，它的执行取决于Thread Scheduler的实现。时间切片是将可用CPU时间划分为可用的可运行线程的过程。 CPU时间到线程的分配可以基于线程优先级，或线程等待更长时间将获得CPU时间的优先级。 线程调度不能由java控制，因此从应用程序本身控制它总是更好。</p>
<h3 id="10-什么是多线程中的上下文切换？"><a href="#10-什么是多线程中的上下文切换？" class="headerlink" title="10. 什么是多线程中的上下文切换？"></a>10. 什么是多线程中的上下文切换？</h3><p>上下文切换（Context Switching）是存储和恢复CPU状态的过程，以便可以在稍后时间点从同一点恢复线程执行。 上下文切换（Context Switching）是多任务操作系统的基本特性，并支持多线程环境。</p>
<h3 id="11-我们如何确保main-是Java程序中完成的最后一个线程？"><a href="#11-我们如何确保main-是Java程序中完成的最后一个线程？" class="headerlink" title="11. 我们如何确保main()是Java程序中完成的最后一个线程？"></a>11. 我们如何确保main()是Java程序中完成的最后一个线程？</h3><p>我们可以使用线程<code>join()</code>方法来确保程序创建的所有线程在完成主函数之前都已经结束。<code>join()</code>方法用于指定指定的线程结束后，才执行当前线程。这是一篇关于<a href="https://www.journaldev.com/1024/java-thread-join-example" target="_blank" rel="noopener">线程join方法</a>的文章。</p>
<h3 id="12-线程间如何通信？"><a href="#12-线程间如何通信？" class="headerlink" title="12. 线程间如何通信？"></a>12. 线程间如何通信？</h3><p>当线程共享资源时，线程之间的通信对协调其工作很重要。 Object类中的<code>wait()</code>，<code>notify()</code>和<code>notifyAll()</code>方法允许线程通过资源的锁进行通信。 查看这篇文章了解更多关于 <a href="/2018/11/26/java-thread-wait-notify-and-notifyall-example/" title="线程wait()，notify()和notifyAll()">线程wait()，notify()和notifyAll()</a>。</p>
<h3 id="13-为什么线程通信方法wait-，notify-和notifyAll-都在Object类中？"><a href="#13-为什么线程通信方法wait-，notify-和notifyAll-都在Object类中？" class="headerlink" title="13. 为什么线程通信方法wait()，notify()和notifyAll()都在Object类中？"></a>13. 为什么线程通信方法wait()，notify()和notifyAll()都在Object类中？</h3><p>在Java中，每个对象都有一个监视器和wait，notify方法用于等待对象监视器或通知其他线程对象监视器现在是空闲的。 java中的线程没有监视器，同步可以用于任何对象，这就是为什么它是Object类的一部分的原因，所以java中的每个类都有这些线程间通信的基本方法。</p>
<h3 id="14-为什么wait-，notify-和notifyAll-方法必须从synchronized方法或块调用？"><a href="#14-为什么wait-，notify-和notifyAll-方法必须从synchronized方法或块调用？" class="headerlink" title="14. 为什么wait()，notify()和notifyAll()方法必须从synchronized方法或块调用？"></a>14. 为什么wait()，notify()和notifyAll()方法必须从synchronized方法或块调用？</h3><p>当一个线程在任何对象上调用wait（）时，它必须在该对象上有监视器，它将离开并进入等待状态，直到任何其他线程调用该对象的notify（）为止。 </p>
<p>同样，当一个线程在任何对象上调用notify（）时，它将把该监视器留在该对象上，其他等待的线程可以获得该对象上的监视器。 由于所有这些方法都要求线程具有对象监视器，这只能通过同步来实现，所以它们需要从同步方法或块中调用。</p>
<h3 id="15-为什么线程sleep-和yield-方法是静态的？"><a href="#15-为什么线程sleep-和yield-方法是静态的？" class="headerlink" title="15. 为什么线程sleep()和yield()方法是静态的？"></a>15. 为什么线程sleep()和yield()方法是静态的？</h3><p>线程sleep()和yield()方法工作在当前正在执行的线程。 因此，在等待状态的其他线程上调用这些方法没有意义。 这就是为什么这些方法是静态的，所以当这种方法被静态调用时，它可以在当前执行的线程上运行，并可避免混淆程序员，否则他们可能认为他们可以在一些非运行的线程上调用这些方法。</p>
<h3 id="16-我们如何在Java中实现线程安全？"><a href="#16-我们如何在Java中实现线程安全？" class="headerlink" title="16. 我们如何在Java中实现线程安全？"></a>16. 我们如何在Java中实现线程安全？</h3><p>有几种方法可以实现java中的线程安全 - 同步，原子并发类，实现并发Lock接口，使用volatile关键字，使用不可变类和线程安全类。 了解更多<a href="https://www.journaldev.com/1061/thread-safety-in-java" target="_blank" rel="noopener">线程安全教程</a>。</p>
<h3 id="17-在Java中的volatile关键字是什么？"><a href="#17-在Java中的volatile关键字是什么？" class="headerlink" title="17. 在Java中的volatile关键字是什么？"></a>17. 在Java中的volatile关键字是什么？</h3><p>当我们将volatile关键字与变量一起使用时，所有的线程都直接从内存中读取它的值，并且不缓存它。这可确保读取的值与内存中的值相同。</p>
<h3 id="18-同步方法或同步块哪个是更优选择？"><a href="#18-同步方法或同步块哪个是更优选择？" class="headerlink" title="18. 同步方法或同步块哪个是更优选择？"></a>18. 同步方法或同步块哪个是更优选择？</h3><p>同步块是更优选择，因为它不锁定对象，同步方法锁定对象，并且如果类中有多个同步块，即使它们不相关，为了获取对象锁，也会阻止它们执行并使它们处于等待状态。</p>
<h3 id="19-如何在Java中创建守护进程线程？"><a href="#19-如何在Java中创建守护进程线程？" class="headerlink" title="19. 如何在Java中创建守护进程线程？"></a>19. 如何在Java中创建守护进程线程？</h3><p>在调用start()方法之前，使用Thread类setDaemon(true)方法创建守护线程。否则它将抛出IllegalThreadStateException。</p>
<h3 id="20-什么是ThreadLocal？"><a href="#20-什么是ThreadLocal？" class="headerlink" title="20. 什么是ThreadLocal？"></a>20. 什么是ThreadLocal？</h3><p>Java ThreadLocal用于创建线程局部变量。 我们知道一个对象的所有线程都共享它的变量，所以如果变量不是线程安全的，我们可以使用同步，但如果我们想避免同步，我们可以使用ThreadLocal变量。 </p>
<p>每个线程都有自己的ThreadLocal变量，它们可以使用它的get()和set()方法来获取默认值，或者将它的本地值更改为Thread。 ThreadLocal实例通常是希望将状态与线程关联的类中的私有静态字段。 查看小示例程序<a href="https://www.journaldev.com/1076/java-threadlocal-example" target="_blank" rel="noopener">ThreadLocal示例</a>。</p>
<h3 id="21-什么是线程组？-为什么建议不要使用它？"><a href="#21-什么是线程组？-为什么建议不要使用它？" class="headerlink" title="21. 什么是线程组？ 为什么建议不要使用它？"></a>21. 什么是线程组？ 为什么建议不要使用它？</h3><p>线程组(ThreadGroup)是一个类，旨在提供有关线程组的信息。 ThreadGroup API很弱，并没有任何Thread提供的功能。 它的主要特点是获取线程组中的活动线程列表，并为线程设置未捕获的异常处理程序。 但Java 1.5添加了setUncaughtExceptionHandler（UncaughtExceptionHandler eh）方法，我们可以向线程添加未捕获的异常处理程序。 所以ThreadGroup已经过时了，因此不建议再使用了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t1.setUncaughtExceptionHandler(<span class="keyword">new</span> UncaughtExceptionHandler()&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"exception occured:"</span>+e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="22-什么是Java线程Dump，我们如何获得程序的Java线程Dump？"><a href="#22-什么是Java线程Dump，我们如何获得程序的Java线程Dump？" class="headerlink" title="22. 什么是Java线程Dump，我们如何获得程序的Java线程Dump？"></a>22. 什么是Java线程Dump，我们如何获得程序的Java线程Dump？</h3><p>线程Dump是JVM中活动的所有线程的列表，线程Dump非常有助于分析应用程序中的瓶颈并分析死锁情况。有很多方法可以为我们生成线程Dump - 使用Profiler，Kill -3命令，jstack工具等。我喜欢jstack工具来生成程序的线程Dump，因为它易于使用，并附带JDK安装。由于它是一个基于终端的工具，我们可以创建脚本来定期生成线程Dump，以便稍后进行分析。 阅读这篇文章了解更多关于<a href="https://www.journaldev.com/1053/java-thread-dump-visualvm-jstack-kill-3-jcmd" target="_blank" rel="noopener">在java中生成线程Dump</a>。</p>
<h3 id="23-什么是死锁？-如何分析和避免死锁的情形？"><a href="#23-什么是死锁？-如何分析和避免死锁的情形？" class="headerlink" title="23. 什么是死锁？ 如何分析和避免死锁的情形？"></a>23. 什么是死锁？ 如何分析和避免死锁的情形？</h3><p>死锁是一种编程情况，其中两个或多个线程被永久阻塞，这种情况出现在至少两个线程和两个或更多资源中。</p>
<p>为了分析一个死锁，我们需要查看应用程序的java线程Dump，我们需要注意线程的状态为BLOCKED，然后是资源等待锁定，每个资源都有一个唯一的ID，我们可以找到哪个线程已经在对象上保持锁定。</p>
<p>避免嵌套锁定，仅需要锁定什么是必需的，并且避免无限期地等待是避免死锁情况的常见方法，请阅读本文以了解如何使用示例程序<a href="https://www.journaldev.com/1058/deadlock-in-java-example" target="_blank" rel="noopener">分析java中的死锁</a>。</p>
<h3 id="24-Java-Timer类是什么？-如何安排任务在特定间隔时间后运行？"><a href="#24-Java-Timer类是什么？-如何安排任务在特定间隔时间后运行？" class="headerlink" title="24. Java Timer类是什么？ 如何安排任务在特定间隔时间后运行？"></a>24. Java Timer类是什么？ 如何安排任务在特定间隔时间后运行？</h3><p>java.util.Timer是一个实用工具类，可用于安排在将来某个特定时间执行的线程。 Java Timer类可用于计划一次运行的任务或定期运行的任务。</p>
<p>java.util.TimerTask是一个实现Runnable接口的抽象类 ，我们需要扩展这个类来创建可以使用java Timer类调度的我们自己的TimerTask。</p>
<p>查看这篇文章<a href="https://www.journaldev.com/1050/java-timer-timertask-example" target="_blank" rel="noopener">java定时器</a>的例子 。</p>
<h3 id="25-什么是线程池？-我们如何在Java中创建线程池？"><a href="#25-什么是线程池？-我们如何在Java中创建线程池？" class="headerlink" title="25. 什么是线程池？ 我们如何在Java中创建线程池？"></a>25. 什么是线程池？ 我们如何在Java中创建线程池？</h3><p>线程池是管理工作线程的池子，它包含一个队列，可以让任务等待执行。</p>
<p>线程池是管理Runnable线程和从队列中执行Runnable的工作线程。</p>
<p>java.util.concurrent.Executors提供java.util.concurrent.Executor接口的实现，用以在java中创建线程池。 <a href="https://www.journaldev.com/1069/threadpoolexecutor-java-thread-pool-example-executorservice" target="_blank" rel="noopener">线程池示例</a>程序显示如何在java中创建和使用Thread Pool。 或者读取<a href="https://www.journaldev.com/2340/java-scheduler-scheduledexecutorservice-scheduledthreadpoolexecutor-example" target="_blank" rel="noopener">ScheduledThreadPoolExecutor示例</a>来了解如何在一定的延迟之后执行任务。</p>
<h3 id="26-如果我们不覆盖线程类run-方法，会发生什么？"><a href="#26-如果我们不覆盖线程类run-方法，会发生什么？" class="headerlink" title="26. 如果我们不覆盖线程类run()方法，会发生什么？"></a>26. 如果我们不覆盖线程类run()方法，会发生什么？</h3><p>线程类run()方法的代码如下所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">        target.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以上目标设置在Thread类的init()方法中，如果我们创建一个Thread类的实例作为new TestThread() ，它设置为null。 所以如果我们不覆盖run()方法，就不会发生任何事情。 下面是一个简单的例子来说明这一点。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//not overriding Thread.run() method</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//main method, can be in other class too</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> TestThread();</span><br><span class="line">        System.out.println(<span class="string">"Before starting thread"</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        System.out.println(<span class="string">"After starting thread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>它将仅打印输出和终止。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Before starting thread</span><br><span class="line">After starting thread</span><br></pre></td></tr></table></figure></p>
<h2 id="Java并发访问问题答案"><a href="#Java并发访问问题答案" class="headerlink" title="Java并发访问问题答案"></a>Java并发访问问题答案</h2><h3 id="1-什么是原子操作？-Java并发API中的原子类是什么？"><a href="#1-什么是原子操作？-Java并发API中的原子类是什么？" class="headerlink" title="1. 什么是原子操作？ Java并发API中的原子类是什么？"></a>1. 什么是原子操作？ Java并发API中的原子类是什么？</h3><p>原子操作在单个任务单元中执行，而不受其他操作的干扰。 原子操作在多线程环境中是必需的，以避免数据不一致。</p>
<p>int++不是原子操作。 所以当一个线程读取它的值并将其增加一个时，其他线程读取旧的值导致错误的结果。</p>
<p>为了解决这个问题，我们必须确保在count上的增量操作是原子的，我们可以使用Synchronization来实现，但是Java 5 java.util.concurrent.atomic为int和long提供了可以用来实现这个原子的包装类不使用同步。 转到这篇文章了解更多关于<a href="https://www.journaldev.com/1095/atomicinteger-java" target="_blank" rel="noopener">原子并发类</a> 。</p>
<h3 id="2-什么是Java并发API中的锁接口？-与同步相比有什么好处？"><a href="#2-什么是Java并发API中的锁接口？-与同步相比有什么好处？" class="headerlink" title="2. 什么是Java并发API中的锁接口？ 与同步相比有什么好处？"></a>2. 什么是Java并发API中的锁接口？ 与同步相比有什么好处？</h3><p>锁定界面提供比使用synchronized方法和语句可以获得的更广泛的锁定操作。 它们允许更灵活的结构化，可能具有完全不同的属性，并且可以支持多个相关联的Condition对象。<br>锁的优点是</p>
<ul>
<li>有可能使他们公平</li>
<li>在等待Lock对象时，可以使线程响应中断。</li>
<li>有可能尝试获取锁定，但如果无法获取锁定，则立即返回或超时后返回</li>
<li>可以在不同的范围内以不同的顺序获取和释放锁<br>阅读更多<a href="https://www.journaldev.com/2377/java-lock-example-reentrantlock" target="_blank" rel="noopener">Java Lock示例</a> 。</li>
</ul>
<h3 id="3-什么是Executors框架？"><a href="#3-什么是Executors框架？" class="headerlink" title="3. 什么是Executors框架？"></a>3. 什么是Executors框架？</h3><p>在Java 5中，Executor框架被引入了java.util.concurrent.Executor接口。</p>
<p>执行器框架是根据一组执行策略来标准化异步任务的调用，调度，执行和控制的框架。</p>
<p>创建许多线程没有限制到最大阈值可能导致应用程序用尽堆内存。 所以，创建一个ThreadPool是一个更好的解决方案，因为有限数量的线程可以被汇集和重用。 执行器框架促进了在Java中创建线程池的过程。 查看这篇文章，学习使用Executors框架创建线程池的示例代码。</p>
<h3 id="4-什么是阻塞队列？-我们如何使用阻塞队列实现生产者-消费者问题？"><a href="#4-什么是阻塞队列？-我们如何使用阻塞队列实现生产者-消费者问题？" class="headerlink" title="4. 什么是阻塞队列？ 我们如何使用阻塞队列实现生产者-消费者问题？"></a>4. 什么是阻塞队列？ 我们如何使用阻塞队列实现生产者-消费者问题？</h3><p>java.util.concurrent.BlockingQueue是一个队列，支持在检索和删除元素时等待队列变为非空的操作，并在添加元素时等待队列中的空间变得可用。</p>
<p>如果尝试在队列中存储空值，BlockingQueue不接受空值并抛出NullPointerException。</p>
<p>BlockingQueue实现是线程安全的。 所有排队方法本质上都是原子的，并使用内部锁或其他形式的并发控制。</p>
<p>BlockingQueue接口是java集合框架的一部分，它主要用于实现生产者消费者问题。<br>使用BlockingQueue检查此帖子的生产者 - 消费者问题实现 。</p>
<h3 id="5-什么是Callable和Future？"><a href="#5-什么是Callable和Future？" class="headerlink" title="5. 什么是Callable和Future？"></a>5. 什么是Callable和Future？</h3><p>Java 5在Concurrency包中引入了类似于Runnable接口的java.util.concurrent.Callable接口，但它可以返回任何Object并且能够抛出异常。</p>
<p>可调用接口使用Generic来定义Object的返回类型。 执行器类提供了有用的方法来在线程池中执行Callable。 由于可调用任务并行运行，我们必须等待返回的对象。 可调用任务返回java.util.concurrent.Future对象。 使用未来，我们可以找到可调用任务的状态并获取返回的对象。 它提供可以等待Callable完成的get（）方法，然后返回结果。<br>检查这个帖子可以调用未来的例子 。</p>
<h3 id="6-什么是FutureTask类？"><a href="#6-什么是FutureTask类？" class="headerlink" title="6. 什么是FutureTask类？"></a>6. 什么是FutureTask类？</h3><p>FutureTask是Future接口的基本实现类，我们可以使用Executors进行异步处理。 大多数情况下，我们不需要使用FutureTask类，但如果我们想覆盖Future接口的某些方法并希望保留大部分的基本实现，那么它将非常方便。 我们只能扩展这个类，并根据我们的要求重写方法。 查看Java FutureTask示例文章，了解如何使用它，以及其具有的不同方法。</p>
<h3 id="7-什么是Concurrent-Collection类？"><a href="#7-什么是Concurrent-Collection类？" class="headerlink" title="7. 什么是Concurrent Collection类？"></a>7. 什么是Concurrent Collection类？</h3><p>Java集合类是故障快速的，这意味着如果在某些线程使用迭代器遍历它时，集合将被更改，则iterator.next（）将抛出ConcurrentModificationException。</p>
<p>并发收集类支持检索的完全并发性和可更新的可预期并发性。<br>主要类是ConcurrentHashMap，CopyOnWriteArrayList和CopyOnWriteArraySet，请检查此帖子，以了解如何在使用迭代器时避免ConcurrentModificationException异常 。</p>
<h3 id="8-什么是Executors类？"><a href="#8-什么是Executors类？" class="headerlink" title="8. 什么是Executors类？"></a>8. 什么是Executors类？</h3><p>Executors类为Executor，ExecutorService，ScheduledExecutorService，ThreadFactory和Callable类提供实用程序方法。</p>
<p>执行器类可以用来轻松地在java中创建Thread Pool，这也是支持Callable实现的唯一类。</p>
<h3 id="9-Java-8中的并发API的一些改进是什么？"><a href="#9-Java-8中的并发API的一些改进是什么？" class="headerlink" title="9. Java 8中的并发API的一些改进是什么？"></a>9. Java 8中的并发API的一些改进是什么？</h3><p>一些重要的并发API增强功能是：</p>
<p>ConcurrentHashMap compute（），forEach（），forEachEntry（），forEachKey（），forEachValue（），merge（），reduce（）和search（）方法。<br>可以明确完成的CompletableFuture（设置其值和状态）。<br>执行者newWorkStealingPool（）方法创建使用所有可用处理器作为其目标并行级别的工作窃取线程池。</p>
<p><a href="https://www.journaldev.com/1162/java-multithreading-concurrency-interview-questions-answers" target="_blank" rel="noopener">原文</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java, Multithreading, Concurrency, interview,多线程, 并发, 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java（JVM）内存模型 - Java中的内存管理]]></title>
      <url>/2018/11/26/java-jvm-memory-model-memory-management/</url>
      <content type="html"><![CDATA[<p>了解JVM内存模型 ， Java内存管理是非常重要的，如果你想了解Java垃圾回收的工作。 今天，我们将研究java中的内存管理，JVM内存的不同部分以及如何监视和执行垃圾回收调优。<br><a id="more"></a><br>本文目录</p>
<ol>
<li>Java（JVM）内存模型</li>
<li>Java中的内存管理 - 年轻一代</li>
<li>Java中的内存管理 - 老一代<br>&nbsp;&nbsp;&nbsp;&nbsp; 3.1. Stop the World事件<br>&nbsp;&nbsp;&nbsp;&nbsp; 3.2. Java内存模型 - 永久生成<br>&nbsp;&nbsp;&nbsp;&nbsp; 3.3. Java内存模型 - 方法区域<br>&nbsp;&nbsp;&nbsp;&nbsp; 3.4. Java内存模型 - 内存池<br>&nbsp;&nbsp;&nbsp;&nbsp; 3.5. Java内存模型 - 运行时常量池<br>&nbsp;&nbsp;&nbsp;&nbsp; 3.6. Java内存模型 - Java堆栈内存<br>&nbsp;&nbsp;&nbsp;&nbsp; 3.7. Java中的内存管理 - Java堆内存开关<br>&nbsp;&nbsp;&nbsp;&nbsp; 3.8. Java中的内存管理 - Java垃圾回收<br>&nbsp;&nbsp;&nbsp;&nbsp; 3.9. Java中的内存管理 - Java垃圾回收类型<br>&nbsp;&nbsp;&nbsp;&nbsp; 3.10. Java中的内存管理 - Java垃圾回收监控<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.10.1. jstat<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.10.2. 使用Visual GC的Java VisualVM<br>&nbsp;&nbsp;&nbsp;&nbsp; 3.11. Java垃圾回收调整</li>
</ol>
<h2 id="Java（JVM）内存模型"><a href="#Java（JVM）内存模型" class="headerlink" title="Java（JVM）内存模型"></a>Java（JVM）内存模型</h2><p><img src="/gallery/Java-Memory-Model.png" alt="Java内存模型" title="Java内存模型"></p>
<p>如上图所示，JVM内存分为不同的部分。 从广义上讲，JVM堆内存在物理上分为两个部分 - 年轻一代和旧一代 。</p>
<h2 id="Java中的内存管理-年轻一代"><a href="#Java中的内存管理-年轻一代" class="headerlink" title="Java中的内存管理 - 年轻一代"></a>Java中的内存管理 - 年轻一代</h2><p>年轻代是所有新对象产生的地方。当年轻代内存空间被用完时，就会触发垃圾回收。这个垃圾回收叫做Minor GC。年轻代被分为3个部分——Enden区和两个Survivor区。</p>
<p>年轻代空间的要点：</p>
<ul>
<li>大多数新建的对象都位于Eden区。</li>
<li>当Eden区被对象填满时，就会执行Minor GC。并把所有存活下来的对象转移到其中一个survivor区。</li>
<li>Minor GC同样会检查存活下来的对象，并把它们转移到另一个survivor区。这样在一段时间内，总会有一个空的survivor区。</li>
<li>经过多次GC周期后，仍然存活下来的对象会被转移到年老代内存空间。通常这是在年轻代有资格提升到年老代前通过设定年龄阈值来完成的。</li>
</ul>
<h2 id="Java中的内存管理-老一代"><a href="#Java中的内存管理-老一代" class="headerlink" title="Java中的内存管理 - 老一代"></a>Java中的内存管理 - 老一代</h2><p>年老代内存里包含了长期存活的对象和经过多次Minor GC后依然存活下来的对象。通常会在老年代内存被占满时进行垃圾回收。老年代的垃圾回收叫做Major GC。Major GC会花费更多的时间。</p>
<h2 id="Stop-the-World事件"><a href="#Stop-the-World事件" class="headerlink" title="Stop the World事件"></a>Stop the World事件</h2><p>所有的垃圾回收都是“Stop the World”事件，因为所有的应用线程都会停下来直到操作完成（所以叫“Stop the World”）。</p>
<p>因为年轻代里的对象都是一些临时（short-lived ）对象，执行Minor GC非常快，所以应用不会受到（“Stop the World”）影响。</p>
<p>由于Major GC会检查所有存活的对象，因此会花费更长的时间。应该尽量减少Major GC。因为Major GC会在垃圾回收期间让你的应用反应迟钝，所以如果你有一个需要快速响应的应用发生多次Major GC，你会看到超时错误。</p>
<p>垃圾回收时间取决于垃圾回收策略。这就是为什么有必要去监控垃圾回收和对垃圾回收进行调优。从而避免要求快速响应的应用出现超时错误。</p>
<h3 id="Java内存模型-永久代"><a href="#Java内存模型-永久代" class="headerlink" title="Java内存模型 - 永久代"></a>Java内存模型 - 永久代</h3><p>永久代或者“Perm Gen”包含了JVM需要的应用元数据，这些元数据描述了在应用里使用的类和方法。注意，永久代不是Java堆内存的一部分。</p>
<p>永久代存放JVM运行时使用的类。永久代同样包含了Java SE库的类和方法。永久代的对象在full GC时进行垃圾回收。</p>
<h3 id="Java内存模型-方法区域"><a href="#Java内存模型-方法区域" class="headerlink" title="Java内存模型 - 方法区域"></a>Java内存模型 - 方法区域</h3><p>方法区是永久代空间的一部分，并用来存储类型信息（运行时常量和静态变量）和方法代码和构造函数代码。</p>
<h3 id="Java内存模型-内存池"><a href="#Java内存模型-内存池" class="headerlink" title="Java内存模型 - 内存池"></a>Java内存模型 - 内存池</h3><p>如果JVM实现支持，JVM内存管理会为创建内存池，用来为不变对象创建对象池。字符串池就是内存池类型的一个很好的例子。内存池可以属于堆或者永久代，这取决于JVM内存管理的实现。</p>
<h3 id="Java内存模型-运行时常量池"><a href="#Java内存模型-运行时常量池" class="headerlink" title="Java内存模型 - 运行时常量池"></a>Java内存模型 - 运行时常量池</h3><p>运行时常量池是每个类常量池的运行时代表。它包含了类的运行时常量和静态方法。运行时常量池是方法区的一部分。</p>
<h3 id="Java内存模型-Java堆栈内存"><a href="#Java内存模型-Java堆栈内存" class="headerlink" title="Java内存模型 - Java堆栈内存"></a>Java内存模型 - Java堆栈内存</h3><p>Java栈内存用于运行线程。它们包含了方法里的临时数据、堆里其它对象引用的特定数据。你可以阅读栈内存和堆内存的区别。</p>
<h3 id="Java内存管理-Java堆内存开关"><a href="#Java内存管理-Java堆内存开关" class="headerlink" title="Java内存管理 - Java堆内存开关"></a>Java内存管理 - Java堆内存开关</h3><p>Java提供了大量的内存开关（参数），我们可以用它来设置内存大小和它们的比例。下面是一些常用的开关：</p>
<table>
<thead>
<tr>
<th>VM 开关</th>
<th>VM开关描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-Xms</td>
<td>设置JVM启动时堆的初始化大小。</td>
</tr>
<tr>
<td>-Xmx</td>
<td>设置堆最大值。</td>
</tr>
<tr>
<td>-Xmn</td>
<td>设置年轻代的空间大小，剩下的为老年代的空间大小。</td>
</tr>
<tr>
<td>-XX:PermGen</td>
<td>设置永久代内存的初始化大小。</td>
</tr>
<tr>
<td>-XX:MaxPermGen</td>
<td>设置永久代的最大值。</td>
</tr>
<tr>
<td>-XX:SurvivorRatio</td>
<td>提供Eden区和survivor区的空间比例。比如，如果年轻代的大小为10m并且VM开关是-XX:SurvivorRatio=2，那么将会保留5m内存给Eden区和每个Survivor区分配2.5m内存。默认比例是8。</td>
</tr>
<tr>
<td>-XX:NewRatio</td>
<td>提供年老代和年轻代的比例大小。默认值是2。</td>
</tr>
</tbody>
</table>
<p>大多数时候，上面的选项已经足够使用了。但是如果你还想了解其他的选项，那么请查看JVM选项官方网页。</p>
<h3 id="Java中的内存管理-Java垃圾回收"><a href="#Java中的内存管理-Java垃圾回收" class="headerlink" title="Java中的内存管理 - Java垃圾回收"></a>Java中的内存管理 - Java垃圾回收</h3><p>Java垃圾回收会找出没用的对象，把它从内存中移除并释放出内存给以后创建的对象使用。Java程序语言中的一个最大优点是自动垃圾回收，不像其他的程序语言那样需要手动分配和释放内存，比如C语言。</p>
<p>垃圾回收器是一个后台运行程序。它管理着内存中的所有对象并找出没被引用的对象。所有的这些未引用的对象都会被删除，回收它们的空间并分配给其他对象。</p>
<p>一个基本的垃圾回收过程涉及三个步骤：</p>
<ol>
<li>标记：这是第一步。在这一步，垃圾回收器会找出哪些对象正在使用和哪些对象不在使用。</li>
<li>正常清除：垃圾回收器清会除不在使用的对象，回收它们的空间分配给其他对象。</li>
<li>压缩清除：为了提升性能，压缩清除会在删除没用的对象后，把所有存活的对象移到一起。这样可以提高分配新对象的效率。</li>
</ol>
<p>简单标记和清除方法存在两个问题：</p>
<ol>
<li>效率很低。因为大多数新建对象都会成为“没用对象”。</li>
<li>经过多次垃圾回收周期的对象很有可能在以后的周期也会存活下来。</li>
</ol>
<p>上面简单清除方法的问题在于Java垃圾回收的分代回收的，而且在堆内存里有年轻代和年老代两个区域。我已经在上面解释了Minor GC和Major GC是怎样扫描对象，以及如何把对象从一个分代空间移到另外一个分代空间。</p>
<h3 id="Java中的内存管理-Java垃圾回收类型"><a href="#Java中的内存管理-Java垃圾回收类型" class="headerlink" title="Java中的内存管理 - Java垃圾回收类型"></a>Java中的内存管理 - Java垃圾回收类型</h3><p>这里有五种可以在应用里使用的垃圾回收类型。仅需要使用JVM开关就可以在我们的应用里启用垃圾回收策略。让我们一起来逐一了解：</p>
<ol>
<li>Serial GC（-XX:+UseSerialGC）：Serial GC使用简单的标记、清除、压缩方法对年轻代和年老代进行垃圾回收，即Minor GC和Major GC。Serial GC在client模式（客户端模式）很有用，比如在简单的独立应用和CPU配置较低的机器。这个模式对占有内存较少的应用很管用。</li>
<li>Parallel GC（-XX:+UseParallelGC）：除了会产生N个线程来进行年轻代的垃圾回收外，Parallel GC和Serial GC几乎一样。这里的N是系统CPU的核数。我们可以使用 -XX:ParallelGCThreads=n 这个JVM选项来控制线程数量。并行垃圾回收器也叫throughput回收器。因为它使用了多CPU加快垃圾回收性能。Parallel GC在进行年老代垃圾回收时使用单线程。</li>
<li>Parallel Old GC（-XX:+UseParallelOldGC）：和Parallel GC一样。不同之处，Parallel Old GC在年轻代垃圾回收和年老代垃圾回收时都使用多线程回收。</li>
<li>并发标记清除（CMS）回收器（-XX:+UseConcMarkSweepGC)：CMS回收器也被称为短暂停顿并发回收器。它是对年老代进行垃圾回收的。CMS回收器通过多线程并发进行垃圾回收，尽量减少垃圾回收造成的停顿。CMS回收器对年轻代进行垃圾回收使用的算法和Parallel回收器一样。这个垃圾回收器适用于不能忍受长时间停顿要求快速响应的应用。可使用 -XX:ParallelCMSThreads=n JVM选项来限制CMS回收器的线程数量。</li>
<li>G1垃圾回收器（-XX:+UseG1GC) G1（Garbage First）：垃圾回收器是在Java 7后才可以使用的特性，它的长远目标时代替CMS回收器。G1回收器是一个并行的、并发的和增量式压缩短暂停顿的垃圾回收器。G1回收器和其他的回收器运行方式不一样，不区分年轻代和年老代空间。它把堆空间划分为多个大小相等的区域。当进行垃圾回收时，它会优先回收存活对象较少的区域，因此叫“Garbage First”。你可以在Oracle Garbage-FIrst回收器文档找到更多详细信息。</li>
</ol>
<h3 id="Java中的内存管理-Java垃圾回收监控"><a href="#Java中的内存管理-Java垃圾回收监控" class="headerlink" title="Java中的内存管理 - Java垃圾回收监控"></a>Java中的内存管理 - Java垃圾回收监控</h3><p>我们可以使用命令行和图形工具来监控监控应用垃圾回收。例如，我使用Java SE下载页中的一个demo来实验。</p>
<p>如果你想使用同样的应用，可以到Java SE下载页面下载JDK 7和JavaFX演示和示例。我使用的示例应用是Java2Demo.jar，它位于 jdk1.7.0_55/demo/jfc/Java2D 目录下。这只是一个可选步骤，你可以运行GC监控命令监控任何Java应用。</p>
<p>我用来启动演示应用程序的命令是：</p>
<p> <code>pankaj @ Pankaj：〜/ Downloads / jdk1.7.0_55 / demo / jfc / Java2D $ java -Xmx120m -Xms30m -Xmn10m -XX：PermSize = 20m -XX：MaxPermSize = 20m -XX：+ UseSerialGC -jar Java2Demo.jar</code></p>
<h4 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h4><p>可以使用jstat命令行工具监控JVM内存和垃圾回收。标准的JDK已经附带了jstat，所以不需要做任何额外的事情就可以得到它。</p>
<p>要运行jstat你需要知道应用的进程id，你可以使用 ps -eaf | grep java 命令获取进程id。</p>
<blockquote>
<p>pankaj @ Pankaj：〜$ ps -eaf |  grep Java2Demo.jar<br>   501 9582 11579 0 9:48 PM ttys000 0：21.66 / usr / bin / java -Xmx120m -Xms30m -Xmn10m -XX：PermSize = 20m -XX：MaxPermSize = 20m -XX：+ UseG1GC -jar Java2Demo.jar<br>   501 14073 14045 0 9:48 PM ttys002 0：00.00 grep Java2Demo.jar</p>
</blockquote>
<p>从上面知道，我的Java应用进程id是9582。现在可以运行jstat命令了，就像下面展示的一样：</p>
<blockquote>
<p>pankaj @ Pankaj：〜$ jstat -gc 9582 1000<br>  S0C S1C S0U S1U EC EU OC OU PC PU YGC YGCT FGC FGCT GCT<br> 1024.0 1024.0 0.0 0.0 8192.0 7933.3 42108.0 23401.3 20480.0 19990.9 157 0.274 40 1.381 1.654<br> 1024.0 1024.0 0.0 0.0 8192.0 8026.5 42108.0 23401.3 20480.0 19990.9 157 0.274 40 1.381 1.654<br> 1024.0 1024.0 0.0 0.0 8192.0 8030.0 42108.0 23401.3 20480.0 19990.9 157 0.274 40 1.381 1.654<br> 1024.0 1024.0 0.0 0.0 8192.0 8122.2 42108.0 23401.3 20480.0 19990.9 157 0.274 40 1.381 1.654<br> 1024.0 1024.0 0.0 0.0 8192.0 8171.2 42108.0 23401.3 20480.0 19990.9 157 0.274 40 1.381 1.654<br> 1024.0 1024.0 48.7 0.0 8192.0 106.7 42108.0 23401.3 20480.0 19990.9 158 0.275 40 1.381 1.656<br> 1024.0 1024.0 48.7 0.0 8192.0 145.8 42108.0 23401.3 20480.0 19990.9 158 0.275 40 1.381 1.656</p>
</blockquote>
<p>jstat命令的最后一个参数是每个输出的时间间隔。每隔一秒就会打印出内存和垃圾回收数据。</p>
<p>让我们一起来对每一列的意义进行逐一了解：</p>
<ul>
<li>S0C和S1C：这一列展示了Survivor0和Survivor1区的当前大小（单位KB）。</li>
<li>S0U和S1U：这一列展示了当前Survivor0和Survivor1区的使用情况（单位KB）。注意：无论任何时候，总会有一个Survivor区是空着的。</li>
<li>EC和EU：这些列展示了Eden区当前空间大小和使用情况（单位KB）。注意：EU的大小一直在增大。而且只要大小接近EC时，就会触发Minor GC并且EU将会减小。</li>
<li>OC和OU：这些列展示了年老代当前空间大小和当前使用情况（单位KB）。</li>
<li>PC和PU：这些列展示了Perm Gen（永久代）当前空间大小和当前使用情况（单位KB）。</li>
<li>YGC和YGCT：YGC这列显示了发生在年轻代的GC事件的数量。YGCT这列显示了在年轻代进行GC操作的累计时间。注意：在EU的值由于minor GC导致下降时，同一行的YGC和YGCT都会增加。</li>
<li>FGC和FGCT：FGC列显示了发生Full GC事件的次数。FGCT显示了进行Full GC操作的累计时间。注意：相对于年轻代的GC使用时间，Full GC所用的时间长很多。</li>
<li>GCT：这一列显示了GC操作的总累计时间。注意：总累计时间是YGCT和FGCT两列所用时间的总和（GCT=YGCT+FGCT）。</li>
</ul>
<p>jstat的优点，我们同样可以在没有GUI的远程服务器上运行jstat。注意：我们是通过 -Xmn10m 选项来指定S0C、S1C和EC的总和为10m的。</p>
<h4 id="Java-VisualVM与Visual-GC插件"><a href="#Java-VisualVM与Visual-GC插件" class="headerlink" title="Java VisualVM与Visual GC插件"></a>Java VisualVM与Visual GC插件</h4><p>如果你想在GUI里查看内存和GC，那么可以使用jvisualvm工具。Java VisualVM同样是JDK的一部分，所以你不需要单独去下载。</p>
<p>在终端运行jvisualvm命令启动Java VisualVM程序。一旦启动程序，你需要从Tools-&gt;Plugins选项安装Visual GC插件，就像下面图片展示的。</p>
<p><img src="/gallery/VisualVM-Visual-GC-Plugin.png" alt="VisualVM" title="VisualVM"></p>
<p>安装完Visual GC插件后，从左边栏打开应用并把视角转到Visual GC部分。你将会得到关于JVM内存和垃圾回收详情，如下图所示。<br><img src="/gallery/Serial-GC-VisualGC.png" alt="VisualGC" title="VisualGC"></p>
<h3 id="Java垃圾回收调优"><a href="#Java垃圾回收调优" class="headerlink" title="Java垃圾回收调优"></a>Java垃圾回收调优</h3><p>Java垃圾回收调优应该是提升应用吞吐量的最后一个选择。在你发现应用由于长时间垃圾回收导致了应用性能下降、出现超时的时候，应该考虑Java垃圾回收调优。</p>
<p>如果你在日志里看到 java.lang.OutOfMemoryError: PermGen space错误，那么可以尝试使用 -XX:PermGen 和 -XX:MaxPermGen JVM选项去监控并增加Perm Gen内存空间。你也可以尝试使用-XX:+CMSClassUnloadingEnabled并查看使用CMS垃圾回收器的执行性能。</p>
<p>如果你看到了大量的Full GC操作，那么你应该尝试增大老年代的内存空间。</p>
<p>全面垃圾回收调优要花费大量的努力和时间，这里没有一尘不变的硬性调优规则。你需要去尝试不同的选项并且对这些选项进行对比，从而找出最适合自己应用的方案。</p>
<p>这就是所有的Java内存模型和垃圾回收内容。希望对你理解JVM内存和垃圾回收过程有所帮助。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ol>
<li><a href="https://www.journaldev.com/2856/java-jvm-memory-model-memory-management-in-java#java-jvm-memory-model" target="_blank" rel="noopener">原文</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> memory,memory mode,memory management,内存,内存模型,内存管理,垃圾回收 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java堆VS栈-Java中的内存分配]]></title>
      <url>/2018/11/26/java-heap-space-vs-stack-memory/</url>
      <content type="html"><![CDATA[<p>前些时候，在我写了一些关于<a href="/2018/11/26/java-jvm-memory-model-memory-management/" title="Java垃圾回收">Java垃圾回收</a>和Java是按价值传递的文章之后，收到了很多电子邮件说解释一下Java堆空间 ， Java栈内存，Java内存分配以及它们之间的区别。<br><a id="more"></a><br>在Java EE书籍和java教程中都能看到很多关于堆和栈的描述，从程序运行时的角度如何理解堆内存和栈到底是什么呢？</p>
<p>本文目录</p>
<ol>
<li>Java堆空间</li>
<li>Java堆栈内存</li>
<li>Java程序中堆和栈内存的分配</li>
<li>Java堆空间和栈内存的区别</li>
</ol>
<h2 id="Java堆空间"><a href="#Java堆空间" class="headerlink" title="Java堆空间"></a>Java堆空间</h2><p>Java运行时使用Java堆空间将内存分配给对象和JRE类。 每当我们创建任何对象，它总是在堆空间中创建。</p>
<p>垃圾回收器在堆内存上运行以释放没有任何引用的对象所使用的内存。 在堆空间中创建的任何对象都具有全局访问权限，并且可以从应用程序的任何位置引用。</p>
<h2 id="Java堆栈内存"><a href="#Java堆栈内存" class="headerlink" title="Java堆栈内存"></a>Java堆栈内存</h2><p>Java堆栈内存用于执行线程。 它们包含特定于方法的值，这些值是短暂的，并引用堆中从该方法引用的其他对象。</p>
<p>堆栈内存始终以LIFO（后进先出）顺序引用。 无论何时调用方法，都会在堆栈内存中为方法创建一个新的块，以保存本地原始值并引用该方法中的其他对象。</p>
<p>一旦方法结束，该块将变为未使用状态，并可用于下一个方法。与堆内存相比，堆栈内存的大小非常小。</p>
<h2 id="Java程序中堆和栈内存的分配"><a href="#Java程序中堆和栈内存的分配" class="headerlink" title="Java程序中堆和栈内存的分配"></a>Java程序中堆和栈内存的分配</h2><p>让我们用一个简单的程序来理解堆和堆栈的内存使用情况。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="comment">// Line 1</span></span><br><span class="line">		<span class="keyword">int</span> i=<span class="number">1</span>; <span class="comment">// Line 2</span></span><br><span class="line">		Object obj = <span class="keyword">new</span> Object(); <span class="comment">// Line 3</span></span><br><span class="line">		Memory mem = <span class="keyword">new</span> Memory(); <span class="comment">// Line 4</span></span><br><span class="line">		mem.foo(obj); <span class="comment">// Line 5</span></span><br><span class="line">	&#125; <span class="comment">// Line 9</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(Object param)</span> </span>&#123; <span class="comment">// Line 6</span></span><br><span class="line">		String str = param.toString(); <span class="comment">//// Line 7</span></span><br><span class="line">		System.out.println(str);</span><br><span class="line">	&#125; <span class="comment">// Line 8</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面的图片显示了参考上述程序的堆栈和堆内存以及它们如何被用来存储原类型值，对象和引用变量。</p>
<p><img src="/gallery/Java-Heap-Stack-Memory.png" alt="Java堆和栈内存的分配" title="Java堆和栈内存的分配"></p>
<p>让我们来看看执行程序的步骤。</p>
<ul>
<li>一旦我们运行该程序，它将所有运行时类加载到堆空间中。 当在第1行找到main（）方法时，Java运行时将创建堆栈内存以供main（）方法线程使用。</li>
<li>我们在第2行创建了原始局部变量，所以它被创建并存储在main（）方法的堆栈内存中。</li>
<li>由于我们在第3行创建了一个对象，因此它在堆内存中创建，并且堆栈内存包含它的引用。 当我们在第4行创建Memory对象时会发生类似的过程。</li>
<li>现在当我们在第5行中调用foo（）方法时，堆栈顶部的一个块被创建，以供foo（）方法使用。由于Java是按值传递的，因此在第6行的foo（）堆栈块中创建了对Object的新引用。</li>
<li>在第7行中创建一个字符串，它将进入堆空间中的字符串池 ，并在foo（）堆栈空间中为其创建引用。</li>
<li>foo（）方法在第8行终止，此时为堆栈中的foo（）分配的内存块变为空闲。</li>
<li>在第9行中，main（）方法终止，为main（）方法创建的堆栈内存被销毁。 程序也结束在这一行，因此Java运行时释放所有内存并结束程序的执行。</li>
</ul>
<h2 id="Java堆空间和栈内存的区别"><a href="#Java堆空间和栈内存的区别" class="headerlink" title="Java堆空间和栈内存的区别"></a>Java堆空间和栈内存的区别</h2><p>基于上面的解释，我们可以很容易地得出堆和堆内存之间的差异。</p>
<ol>
<li>堆内存由应用程序的所有部分使用，而堆栈内存仅由一个执行线程使用。</li>
<li>每当创建一个对象时，它总是存储在堆空间中，并且堆栈存储器包含对它的引用。 堆栈内存只包含局部基本变量和引用变量到堆空间中的对象。</li>
<li>存储在堆中的对象是全局可访问的，而堆栈存储器不能被其他线程访问。</li>
<li>堆栈中的内存管理以LIFO方式完成，而堆内存中的内存管理更为复杂，因为它是全局使用的。 在Java垃圾收集中 ，堆内存分为年轻一代，旧一代等。</li>
<li>堆栈内存是短暂的，而堆内存从开始到应用程序执行结束。</li>
<li>我们可以使用-Xms和-Xmx JVM选项来定义堆内存的启动大小和最大大小。 我们可以使用-Xss来定义堆栈的内存大小。</li>
<li>当堆栈内存已满时，Java运行时会抛出java.lang.StackOverFlowError而如果堆内存已满，则会抛出java.lang.OutOfMemoryError: Java Heap Space错误。</li>
<li>与堆内存相比，堆栈内存的大小非常小。由于内存分配（LIFO）简单，与堆内存相比，堆栈内存非常快。</li>
</ol>
<p>这是所有的堆空间和堆栈内存在java应用程序中的对比，希望能消除你关于Java程序执行时内存分配的疑虑。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ol>
<li><a href="https://www.journaldev.com/4098/java-heap-space-vs-stack-memory" target="_blank" rel="noopener">原文</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> heap space, stack memory, memory allocation，堆空间,堆栈,栈内存,内存分配 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java异常面试问题]]></title>
      <url>/2018/11/26/java-exception-interview-questions/</url>
      <content type="html"><![CDATA[<p>Java提供了一种强大的、面向对象的途径，用于处理异常的场景，它即被称为<strong>Java异常处理</strong>。<br><a id="more"></a><br>以前我写过一篇关于Java异常处理的文章，今天我列出了一些重要的Java异常问题和答案，以帮助你顺利通过面试。</p>
<ol>
<li>Java中的异常是什么？</li>
<li>Java中的异常处理关键字是什么？</li>
<li>解释Java异常层次结构？</li>
<li>什么是Java异常类的重要方法？</li>
<li>说明Java 7 ARM功能和多catch块？</li>
<li>Java中的Checked和Unchecked Exception之间有什么区别？</li>
<li>在Java中throw和throws关键字有什么区别？</li>
<li>Java中编写自定义异常？</li>
<li>什么是Java中的OutOfMemoryError？</li>
<li>导致“主线程中的异常”的不同情况是什么？</li>
<li>在Java中final，finally和finalize有什么区别？</li>
<li>当main方法抛出异常时会发生什么？</li>
<li>我们可以有一个空的catch块吗？</li>
<li>提供一些Java异常处理最佳实践？</li>
<li>下面的程序有什么问题，我们如何解决？</li>
</ol>
<h2 id="1-Java中的异常是什么？"><a href="#1-Java中的异常是什么？" class="headerlink" title="1. Java中的异常是什么？"></a>1. Java中的异常是什么？</h2><p>异常是在执行程序期间可能发生的错误事件，并中断它的正常流程。异常情况可能由用户输入的错误数据，硬件故障，网络连接故障等不同情况引起。</p>
<p>每当执行Java语句时发生任何错误，都会创建一个异常对象，然后<strong>JRE</strong>尝试查找异常处理程序来处理异常。如果找到合适的异常处理程序，则将异常对象传递给处理程序代码以处理异常，即<strong>捕获异常</strong>。如果没有找到处理程序，则应用程序将该异常抛出到运行时环境，JRE终止程序。</p>
<p><strong>Java异常处理</strong>框架仅用于处理运行时错误，编译时错误不由异常处理框架处理。</p>
<h2 id="2-Java中的异常处理关键字是什么？"><a href="#2-Java中的异常处理关键字是什么？" class="headerlink" title="2. Java中的异常处理关键字是什么？"></a>2. Java中的异常处理关键字是什么？</h2><p>在java异常处理中使用了四个关键字。</p>
<ol>
<li><code>throw</code> ：有时我们明确地想要创建异常对象，然后抛出它来停止程序的正常处理。使用throw关键字来抛出异常来处理它。</li>
<li><code>throws</code> ：当我们在方法中抛出任何检查的异常而不处理它时，我们需要在方法签名中使用throws关键字来让调用者程序知道可能由方法抛出的异常。调用者方法可能会处理这些异常或使用throws关键字将其传播给它的调用方法。我们可以在throws子句中提供多个异常，也可以在<code>main()</code>方法中使用。</li>
<li><code>try-catch</code> ：我们在代码中使用try-catch块进行异常处理。try是块的开始，catch是在try块的结尾来处理异常。我们可以有一个try的多个catch块，try-catch块也可以嵌套。catch块需要一个类型为Exception的参数。</li>
<li><code>finally</code> ：finally块是可选的，只能用于try-catch块。由于异常暂停执行的过程，我们可能会打开一些资源不会关闭，所以我们可以使用finally块。finally块总是被执行，无论是否发生异常。</li>
</ol>
<h2 id="3-解释Java异常层次结构？"><a href="#3-解释Java异常层次结构？" class="headerlink" title="3. 解释Java异常层次结构？"></a>3. 解释Java异常层次结构？</h2><p>Java异常是有层次的，继承被用来区分不同类型的异常。Throwable是Java异常分层的父类，它有两个子对象 - Error和Exception 。异常进一步被分为检查异常和运行时异常。</p>
<p><strong>错误</strong>是超出应用程序范围的特殊情况，不可能预测并从中恢复，例如硬件故障，JVM崩溃或内存不足错误。</p>
<p><strong>检查异常</strong>是我们可以在程序中预料到的例外情况，并尝试从中恢复，例如FileNotFoundException。我们应该抓住这个异常，并为用户提供有用的信息并进行正确记录以便调试。<code>Exception</code>是所有检查异常的父类。</p>
<p><strong>运行时异常</strong>是由不良编程引起的，例如试图从数组中检索一个元素。在尝试检索元素之前，我们应该先检查数组的长度，否则可能会在运行时抛出ArrayIndexOutOfBoundException 。<code>RuntimeException</code>是所有运行时异常的父类。</p>
<p><img src="/gallery/exception-hierarchy.png" alt="Java异常层次结构" title="Java异常层次结构"></p>
<h2 id="4-什么是Java异常类的重要方法？"><a href="#4-什么是Java异常类的重要方法？" class="headerlink" title="4. 什么是Java异常类的重要方法？"></a>4. 什么是Java异常类的重要方法？</h2><p>异常和所有的子类没有提供任何具体的方法，所有的方法在基类Throwable中定义。</p>
<ol>
<li><code>String getMessage()</code> - 此方法返回Throwable的消息String，通过构造函数创建异常时可以提供消息。</li>
<li><code>String getLocalizedMessage()</code> - 提供此方法，以便子类可以覆盖它以向调用程序提供特定于语言环境的消息。此方法的可执行类实现只是使用getMessage()方法来返回异常消息。</li>
<li><code>synchronized Throwable getCause()</code> - 此方法返回异常的原因或空id，原因未知。</li>
<li><code>String toString()</code> - 此方法以字符串格式返回有关Throwable的信息，返回的String包含Throwable类和本地化消息的名称。</li>
<li><code>void printStackTrace()</code> - 此方法将堆栈跟踪信息打印到标准错误流，此方法被重载，我们可以传递PrintStream或PrintWriter作为参数，以将堆栈跟踪信息写入文件或流。</li>
</ol>
<h2 id="5-说明Java-7-ARM功能和多catch块？"><a href="#5-说明Java-7-ARM功能和多catch块？" class="headerlink" title="5. 说明Java 7 ARM功能和多catch块？"></a>5. 说明Java 7 ARM功能和多catch块？</h2><p>如果您在单个try块中捕获了很多异常，您将注意到catch块代码看起来非常难看，主要由冗余代码组成，以记录错误，记住Java 7的一个特性是多catch块我们可以在一个catch块中捕获多个异常。具有此功能的catch块如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span>(IOException | SQLException | Exception ex)&#123;</span><br><span class="line">     logger.error(ex);</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> MyException(ex.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>大多数情况下，我们使用finally块来关闭资源，有时我们会忘记关闭它们，并在资源耗尽时获取运行时异常。这些异常很难调试，我们可能需要查看每个地方我们正在使用该类型的资源，以确保我们正在关闭它。所以Java 7的一个改进就是try-with-resources ，我们可以在try语句中创建一个资源，并在try-catch块中使用它。当try-catch块执行时，运行时环境会自动关闭这些资源。带有这种改进的try-catch块的示例是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (MyResource mr = <span class="keyword">new</span> MyResource()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"MyResource created in try-with-resources"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>在<a href="https://www.journaldev.com/592/java-try-with-resources" target="_blank" rel="noopener">Java 7 ARM</a>上阅读更多信息。</p>
<h2 id="6-Java中的Checked和Unchecked-Exception之间有什么区别？"><a href="#6-Java中的Checked和Unchecked-Exception之间有什么区别？" class="headerlink" title="6. Java中的Checked和Unchecked Exception之间有什么区别？"></a>6. Java中的Checked和Unchecked Exception之间有什么区别？</h2><ol>
<li>应该使用try-catch块在代码中处理检查异常，否则<code>main()</code>方法应该使用throws关键字来让JRE知道可能从程序抛出的异常。未检查的异常不需要在程序中处理，或者在throws子句中提及它们。</li>
<li><code>Exception</code>是所有检查异常的超类，而<code>RuntimeException</code>是所有未检查异常的超类。</li>
<li>检查异常是指不是由程序引起的错误情况，例如在读取不存在的文件时的FileNotFoundException，而未检查的异常大部分是由于编程不良造成的，例如，当在对象引用上调用方法时没有确定是否为NullPointerException不为null。</li>
</ol>
<h2 id="7-在Java中throw和throws关键字有什么区别？"><a href="#7-在Java中throw和throws关键字有什么区别？" class="headerlink" title="7. 在Java中throw和throws关键字有什么区别？"></a>7. 在Java中throw和throws关键字有什么区别？</h2><p>throws关键字与方法签名一起使用来声明方法可能抛出的异常，而throw关键字用于中断程序流并将异常对象移交给运行时处理。</p>
<h2 id="8-如何在Java中编写自定义异常？"><a href="#8-如何在Java中编写自定义异常？" class="headerlink" title="8. 如何在Java中编写自定义异常？"></a>8. 如何在Java中编写自定义异常？</h2><p>我们可以扩展<code>Exception</code>类或它的任何子类来创建我们的自定义异常类。自定义异常类可以拥有自己的变量和方法，我们可以使用这些变量和方法将错误代码或其他异常相关信息传递给异常处理程序。</p>
<p>自定义异常的一个简单示例如下所示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lexiangmiao.exceptions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">IOException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4664456874499611218L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String errorCode=<span class="string">"Unknown_Exception"</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String message, String errorCode)</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(message);</span><br><span class="line">		<span class="keyword">this</span>.errorCode=errorCode;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getErrorCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.errorCode;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="9-什么是Java中的OutOfMemoryError？"><a href="#9-什么是Java中的OutOfMemoryError？" class="headerlink" title="9. 什么是Java中的OutOfMemoryError？"></a>9. 什么是Java中的OutOfMemoryError？</h2><p>Java中的OutOfMemoryError是java.lang.VirtualMachineError的一个子类，当JVM在堆内存中运行时，它将被抛出。我们可以通过增加更多的内存，通过java选项运行java应用程序来解决这个错误。</p>
<p><code>$&gt;java MyProgram -Xms1024m -Xmx1024m -XX:PermSize=64M -XX:MaxPermSize=256m</code></p>
<h2 id="10-导致“主线程中的异常”的不同情况是什么？"><a href="#10-导致“主线程中的异常”的不同情况是什么？" class="headerlink" title="10. 导致“主线程中的异常”的不同情况是什么？"></a>10. 导致“主线程中的异常”的不同情况是什么？</h2><p>一些常见的主线程异常情况是：</p>
<ul>
<li>主线程中的<code>java.lang.UnsupportedClassVersionError</code>异常：当您的java类从另一个JDK版本编译并且您正试图从另一个java版本运行时，会出现此异常。</li>
<li>主线程中的<code>java.lang.NoClassDefFoundError</code>异常 ：这个异常有两种变体。第一个是你提供扩展名为.class的类全名的地方。第二种情况是没有找到类时。</li>
<li>主线程中的<code>java.lang.NoSuchMethodError：main</code>异常 ：当您尝试运行一个没有main方法的类时，会发生此异常。</li>
<li>主线程中的<code>java.lang.ArithmeticException</code>异常 ：每当从main方法抛出任何异常时，它将打印出控制台的异常。第一部分说明从main方法抛出异常，第二部分打印异常类名，然后在冒号后打印异常消息。</li>
</ul>
<p>了解更多，请阅读此文<a href="https://www.journaldev.com/611/exception-in-thread-main-java" target="_blank" rel="noopener">主线程中的Java异常</a>。</p>
<h2 id="11-在Java中final，finally和finalize有什么区别？"><a href="#11-在Java中final，finally和finalize有什么区别？" class="headerlink" title="11. 在Java中final，finally和finalize有什么区别？"></a>11. 在Java中final，finally和finalize有什么区别？</h2><p>final，finally是在java中的关键字，而finalize是一种方法。</p>
<p>final关键字可以和类变量一起使用，这样它们就不能被重新分配，类可以避免通过类和方法扩展来避免被子类覆盖，finally关键字和try-catch块一起使用，以提供总是被执行的语句即使出现一些异常，通常最终也是用来关闭资源的。垃圾收集器在对象被销毁前执行finalize（）方法，这是确保所有全局资源都关闭的好方法。</p>
<p>在三者中，只有finally才涉及到java异常处理。</p>
<h2 id="12-当main方法抛出异常时会发生什么？"><a href="#12-当main方法抛出异常时会发生什么？" class="headerlink" title="12. 当main方法抛出异常时会发生什么？"></a>12. 当main方法抛出异常时会发生什么？</h2><p>当<code>main()</code>方法抛出异常时，Java Runtime会终止程序并在系统控制台中打印异常消息和堆栈跟踪。</p>
<h2 id="13-我们可以有一个空的catch块吗？"><a href="#13-我们可以有一个空的catch块吗？" class="headerlink" title="13. 我们可以有一个空的catch块吗？"></a>13. 我们可以有一个空的catch块吗？</h2><p>我们可以有一个空的catch块，但这是最糟糕的编程例子。我们不应该有空的catch块，因为如果这个块被异常捕获了，我们将没有关于异常的信息，调试它将是一个噩梦。应至少有一个日志记录语句来记录控制台或日志文件中的异常详细信息。</p>
<h2 id="14-提供一些Java异常处理最佳实践？"><a href="#14-提供一些Java异常处理最佳实践？" class="headerlink" title="14. 提供一些Java异常处理最佳实践？"></a>14. 提供一些Java异常处理最佳实践？</h2><p>一些与Java异常处理有关的最佳实践是：</p>
<ul>
<li>使用特定的例外以方便调试。</li>
<li>在程序中尽早抛出异常（Fail-Fast）。</li>
<li>在程序后期捕获异常，让调用者处理异常。</li>
<li>使用Java 7 ARM功能来确保资源已关闭或使用finally块来正确关闭它们。</li>
<li>总是记录异常消息以进行调试。</li>
<li>使用多个catch块来清理关闭。</li>
<li>使用自定义异常从应用程序API中引发单一类型的异常。</li>
<li>按照命名约定，总是以Exception结束。</li>
<li>记录在javadoc中使用@throws方法抛出的异常。</li>
<li>例外是昂贵的，所以只有当它是有道理的。否则你可以抓住他们，并提供空或空的答复。</li>
</ul>
<p>了解更多，请阅读此文<a href="https://www.journaldev.com/1696/exception-handling-in-java#exception-best-practices" target="_blank" rel="noopener">Java异常处理最佳实践</a>。</p>
<h2 id="15-下面的程序有什么问题，我们如何解决？"><a href="#15-下面的程序有什么问题，我们如何解决？" class="headerlink" title="15. 下面的程序有什么问题，我们如何解决？"></a>15. 下面的程序有什么问题，我们如何解决？</h2><p>在本节中，我们将研究一些与java异常有关的编程问题。</p>
<h3 id="1-下面的程序有什么问题？"><a href="#1-下面的程序有什么问题？" class="headerlink" title="1. 下面的程序有什么问题？"></a>1. 下面的程序有什么问题？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lexiangmiao.exceptions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			testExceptions();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException | IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testExceptions</span><span class="params">()</span> <span class="keyword">throws</span> IOException, FileNotFoundException</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的程序不会编译，你会得到错误信息为 “The exception FileNotFoundException is already caught by the alternative IOException”。这是因为FileNotFoundException是IOException的子类，有两种方法可以解决这个问题。</p>
<p>第一种方法是对于这两个例外都使用单个catch块。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	testExceptions();</span><br><span class="line">&#125;<span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException  e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>另一种方法是从multi-catch块中删除FileNotFoundException。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	testExceptions();</span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException  e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>你可以根据你的catch代码选择这些方法。</p>
<h3 id="2-下面的程序有什么问题？"><a href="#2-下面的程序有什么问题？" class="headerlink" title="2. 下面的程序有什么问题？"></a>2. 下面的程序有什么问题？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lexiangmiao.exceptions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.JAXBException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				go();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (JAXBException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> <span class="keyword">throws</span> IOException, JAXBException, FileNotFoundException</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序不会编译，因为FileNotFoundException是IOException的子类，因此FileNotFoundException的catch块无法访问，您将得到错误消息为“Unreachable catch block for FileNotFoundException. It is already handled by the catch block for IOException”</p>
<p>你需要修正catch块的顺序来解决这个问题。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	go();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (JAXBException e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>请注意，<strong>JAXBException与IOException或FileNotFoundException无关，可以放在上面的catch块层次结构中的任何地方</strong>。</p>
<h3 id="3-下面的程序有什么问题？"><a href="#3-下面的程序有什么问题？" class="headerlink" title="3. 下面的程序有什么问题？"></a>3. 下面的程序有什么问题？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lexiangmiao.exceptions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.JAXBException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			foo();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">catch</span>(JAXBException e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">catch</span>(NullPointerException e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序不会编译，因为JAXBException是一个检查的异常，foo（）方法应该抛出这个异常来捕获调用方法。您将收到错误消息为“Unreachable catch block for JAXBException. This exception is never thrown from the try statement body”。</p>
<p>要解决这个问题，你必须删除JAXBException的catch块。</p>
<p>注意捕获NullPointerException是有效的，因为它是一个未经检查的异常。</p>
<h3 id="4-下面的程序有什么问题？"><a href="#4-下面的程序有什么问题？" class="headerlink" title="4. 下面的程序有什么问题？"></a>4. 下面的程序有什么问题？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lexiangmiao.exceptions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">		bar();</span><br><span class="line">		&#125;<span class="keyword">catch</span>(NullPointerException e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		foo();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个技巧性的问题，代码没有问题，它会成功编译。即使它不在方法的throws子句中，我们也总是可以捕获Exception或任何未经检查的异常。</p>
<p>同样，如果一个方法（foo）在throws子句中声明了未检查的异常，那么在程序中处理这个异常并不是强制性的。</p>
<h3 id="5-下面的程序有什么问题？"><a href="#5-下面的程序有什么问题？" class="headerlink" title="5. 下面的程序有什么问题？"></a>5. 下面的程序有什么问题？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lexiangmiao.exceptions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestException5</span> <span class="keyword">extends</span> <span class="title">TestException4</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">throws</span> RuntimeException</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的程序不会编译，因为start()方法签名在子类中不一样。为了解决这个问题，我们可以将子类中的方法singnature改为与superclass完全相同，或者我们可以从子类方法中删除throws子句，如下所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="6-下面的程序有什么问题？"><a href="#6-下面的程序有什么问题？" class="headerlink" title="6. 下面的程序有什么问题？"></a>6. 下面的程序有什么问题？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lexiangmiao.exceptions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.JAXBException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			foo();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException | JAXBException e) &#123;</span><br><span class="line">			e = <span class="keyword">new</span> Exception(<span class="string">""</span>);</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">			e = <span class="keyword">new</span> Exception(<span class="string">""</span>);</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">throws</span> IOException, JAXBException</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的程序不会编译，因为multi-catch块中的异常对象是final的，我们不能改变它的值。编译时错误是“多个catch块的参数e不能被赋值”。</p>
<p>我们必须删除“e”赋值给新的异常对象来解决这个错误。</p>
<p>阅读更多请阅读<a href="https://www.journaldev.com/629/java-catch-multiple-exceptions-rethrow-exception" target="_blank" rel="noopener">Java 7多捕获块</a>。</p>
<p><a href="https://www.journaldev.com/2167/java-exception-interview-questions-and-answers" target="_blank" rel="noopener">原文</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java,exception,interview,异常,面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java集合面试问题]]></title>
      <url>/2018/11/26/java-collections-interview-questions/</url>
      <content type="html"><![CDATA[<p>Java集合框架是Java编程语言的基本方面。 他是java面试问题的重要话题之一。 在这里，我列出了一些重要的java集合面试问题和答案，以帮助你面试。 这些直接来自我在Java编程方面10多年的经验。<br><a id="more"></a></p>
<h2 id="Java多线程面试问题"><a href="#Java多线程面试问题" class="headerlink" title="Java多线程面试问题"></a>Java多线程面试问题</h2><ol>
<li>Java 8中新增与集合相关的功能是什么？</li>
<li>Java集合框架是什么？ 列出它的好处？ </li>
<li>泛型在集合框架中的好处是什么？</li>
<li>Java集合框架的基本接口有哪些？</li>
<li>为什么Collection接口不能扩展Cloneable和Serializable接口？</li>
<li>为什么Map接口不能扩展Collection接口？</li>
<li>什么是迭代器？</li>
<li>枚举和Iterator接口有什么区别？</li>
<li>为什么没有类似Iterator.add（）的方法来添加元素到集合中？</li>
<li>为什么迭代器没有一个方法直接得到下一个元素而不移动光标？</li>
<li>Iterator和ListIterator有什么不同？</li>
<li>迭代列表有什么不同的方法？</li>
<li>你怎么理解迭代器失败的快速属性？</li>
<li>故障快速和故障安全有什么区别？</li>
<li>如何在迭代集合时避免ConcurrentModificationException？</li>
<li>为什么没有Iterator接口的具体实现？</li>
<li>什么是UnsupportedOperationException？</li>
<li>HashMap如何在Java中工作？</li>
<li>hashCode()和equals()方法有何重要性？</li>
<li>我们可以使用任何类作为Map键吗？</li>
<li>Map接口提供了哪些不同的集合视图？</li>
<li>HashMap和Hashtable有什么区别？</li>
<li>如何决定HashMap和TreeMap？</li>
<li>ArrayList和Vector有什么相似之处？</li>
<li>Array和ArrayList有什么区别？ 你什么时候使用Array Array ArrayList？</li>
<li>ArrayList和LinkedList有什么区别？</li>
<li>哪些集合类提供随机访问它的元素？</li>
<li>什么是EnumSet？</li>
<li>哪些集合类是线程安全的？</li>
<li>什么是并发的集合类？</li>
<li>什么是BlockingQueue？</li>
<li>什么是队列和堆栈，列出他们的区别？</li>
<li>什么是集合类？</li>
<li>什么是Comparable和Comparator接口？</li>
<li>Comparable和Comparator接口有什么不同？</li>
<li>我们如何排序对象列表？</li>
<li>在将Collection作为参数传递给一个函数的时候，我们如何确保函数不能修改呢？</li>
<li>我们如何从给定的集合创建一个同步的集合？</li>
<li>在Collections Framework中实现的常用算法是什么？</li>
<li>什么是大O符号？ 举一些例子？</li>
<li>什么是与Java集合框架相关的最佳实践？</li>
<li>什么是Java优先级队列？</li>
<li>为什么我们不能把代码写成<code>List&lt;Number&gt; numbers = new ArrayList&lt;Integer&gt;();</code> ？</li>
<li>为什么我们不能创建泛型数组？ 或者将代码编写为<code>List&lt;Integer&gt;[] array = new ArrayList&lt;Integer&gt;[10];</code></li>
</ol>
<h2 id="Java集合面试问题和答案"><a href="#Java集合面试问题和答案" class="headerlink" title="Java集合面试问题和答案"></a>Java集合面试问题和答案</h2><h3 id="1-Java-8中新增与集合相关的功能是什么？"><a href="#1-Java-8中新增与集合相关的功能是什么？" class="headerlink" title="1. Java 8中新增与集合相关的功能是什么？"></a>1. Java 8中新增与集合相关的功能是什么？</h3><p>Java 8在Collection API中带来了重大变化。 一些变化是：</p>
<ol>
<li>用于集合类的Java Stream API ，用于支持顺序以及并行处理</li>
<li>可迭代接口用forEach（）默认的方法扩展，我们可以使用它来遍历集合。在使用lambda表达式时非常有用，因为它的参数Consumer是一个函数接口 。</li>
<li>Miscellaneous Collection API改进，如Iterator接口中的<code>forEachRemaining(Consumer action)</code>方法，Map的<code>replaceAll()</code> ， <code>compute()</code> ， <code>merge()</code>方法。</li>
</ol>
<h3 id="2-Java集合框架是什么？-列出它的好处？"><a href="#2-Java集合框架是什么？-列出它的好处？" class="headerlink" title="2. Java集合框架是什么？ 列出它的好处？"></a>2. Java集合框架是什么？ 列出它的好处？</h3><p>每种编程语言都会使用集合，最初的java版本包含 Vector，Stack，Hashtable，Array几个集合的类。 但是考虑到更大范围使用，Java 1.2提出集合框架由集合接口、实现（类）和算法组成。<br>Java集合已经通过使用泛型和并发集合类来进行线程安全操作。 它还包括在java并发包中的阻塞接口及其实现。 </p>
<p>集合框架有如下好处：</p>
<ul>
<li>通过使用核心集合类而不是实现我们自己的集合类来<strong>减少开发工作量</strong>。</li>
<li>通过使用经过良好测试的集合框架类来<strong>提高代码质量</strong>。</li>
<li>通过使用JDK附带的集合类<strong>减少了代码维护的工作量</strong>。</li>
<li><strong>可重用性和互操作性</strong></li>
</ul>
<h3 id="3-泛型在集合框架中的好处是什么？"><a href="#3-泛型在集合框架中的好处是什么？" class="headerlink" title="3. 泛型在集合框架中的好处是什么？"></a>3. 泛型在集合框架中的好处是什么？</h3><p>Java 1.5引入泛型，所有的集合接口和实现都大量使用它。 泛型允许我们提供一个指定Object类型的类型集合，所以如果你尝试添加其他类型的元素，它会引发编译时错误。 </p>
<p>因为编译时会出现错误，从而可以避免运行时出现ClassCastException。此外，泛型使代码更简洁，因为我们不需要使用casting和instanceof操作符。</p>
<h3 id="4-Java集合框架的基本接口有哪些？"><a href="#4-Java集合框架的基本接口有哪些？" class="headerlink" title="4. Java集合框架的基本接口有哪些？"></a>4. Java集合框架的基本接口有哪些？</h3><p><code>Collection</code>是集合层次结构的根。集合表示一组元素的对象。Java平台<strong>不提供此接口的任何直接实现</strong>。</p>
<p><code>Set</code>是一个不能包含重复元素的集合。这个接口模拟数学集合抽象，并用来表示集合，例如<strong>一副牌</strong>。</p>
<p><code>List</code>是一个有序的集合，可以包含重复的元素。 您可以从索引中访问任何元素。List更像是<strong>动态长度的数组</strong>。</p>
<p><code>Map</code>是一个将键映射到值的对象。 Map不能包含重复键：每个键最多只能映射一个值。</p>
<p>其他一些接口是<code>Queue</code>，<code>Dequeue</code>，<code>Iterator</code>，<code>SortedSet</code>，<code>SortedMap</code>和<code>ListIterator</code>。</p>
<h3 id="5-为什么Collection接口不能扩展Cloneable和Serializable接口？"><a href="#5-为什么Collection接口不能扩展Cloneable和Serializable接口？" class="headerlink" title="5. 为什么Collection接口不能扩展Cloneable和Serializable接口？"></a>5. 为什么Collection接口不能扩展Cloneable和Serializable接口？</h3><p>Collection接口指定了一组被称为元素的对象。元素如何维护取决于Collection的具体实现。例如，像List这样的一些Collection实现允许重复的元素，而像Set这样的其他实现不这样做。</p>
<p>很多集合实现都有一个公共的克隆方法。但是，将其包含在Collection的所有实现中并没有任何意义。这是因为Collection是一个抽象表示。 重要的是实现。</p>
<p>在处理实际的实现时，克隆或序列化的语义和含义起作用; 所以具体的实现应该决定如何克隆或序列化，甚至可以克隆或序列化。</p>
<p>因此，在所有实现中强制克隆和序列化实际上不那么灵活和更具限制性。 具体实施应该做出是否可以克隆或序列化的决定。</p>
<h3 id="6-为什么Map接口不能扩展Collection接口？"><a href="#6-为什么Map接口不能扩展Collection接口？" class="headerlink" title="6. 为什么Map接口不能扩展Collection接口？"></a>6. 为什么Map接口不能扩展Collection接口？</h3><p>虽然Map接口和它的实现是集合框架的一部分，但Map不是集合，集合也不是Map。因此，Map对扩展Collection是没有意义的，反之亦然。</p>
<p>如果Map扩展了Collection接口，那么元素在哪里？Map包含键值对，它提供了将键或值列表作为集合检索的方法，但它不适合“元素组”范例。</p>
<h3 id="7-什么是Iterator接口？"><a href="#7-什么是Iterator接口？" class="headerlink" title="7. 什么是Iterator接口？"></a>7. 什么是Iterator接口？</h3><p>Iterator接口提供了迭代任何Collection的方法。 我们可以使用iterator（）方法从一个Collection中获取迭代器实例。迭代器代替Java集合框架中的枚举。迭代器允许调用者在迭代期间从底层集合中移除元素。Java集合迭代器提供了一种遍历集合元素的通用方法，并实现了Iterator设计模式 。</p>
<h3 id="8-Enumeration接口和Iterator接口有什么区别？"><a href="#8-Enumeration接口和Iterator接口有什么区别？" class="headerlink" title="8. Enumeration接口和Iterator接口有什么区别？"></a>8. Enumeration接口和Iterator接口有什么区别？</h3><p>Enumeration接口的速度是Iterator接口的两倍，而且使用的内存很少。 Enumeration接口非常基本，适合基本需求。但是与Enumeration接口相比，Iterator接口更安全，因为它总是拒绝其他线程修改正在迭代的集合对象。 </p>
<p>Iterator接口代替Java集合框架中的Enumeration接口。Iterator接口允许调用者从底层集合中删除元素，但Enumeration接口中不能。 Iterator方法名称已被改进，以使其功能清晰。</p>
<h3 id="9-为什么没有类似Iterator-add（）的方法来添加元素到集合中？"><a href="#9-为什么没有类似Iterator-add（）的方法来添加元素到集合中？" class="headerlink" title="9. 为什么没有类似Iterator.add（）的方法来添加元素到集合中？"></a>9. 为什么没有类似Iterator.add（）的方法来添加元素到集合中？</h3><p>语义不清楚，因为Iterator的合约不能保证迭代的顺序。但是请注意，ListIterator确实提供了一个添加操作，因为它确保了迭代的顺序。</p>
<h3 id="10-为什么Iterator没有一个方法直接得到下一个元素而不移动光标？"><a href="#10-为什么Iterator没有一个方法直接得到下一个元素而不移动光标？" class="headerlink" title="10. 为什么Iterator没有一个方法直接得到下一个元素而不移动光标？"></a>10. 为什么Iterator没有一个方法直接得到下一个元素而不移动光标？</h3><p>它可以在当前的Iterator接口之上实现，但是由于它的使用很少，所以将它包含在每个人都必须实现的接口中是没有意义的。</p>
<h3 id="11-Iterator和ListIterator有什么不同？"><a href="#11-Iterator和ListIterator有什么不同？" class="headerlink" title="11. Iterator和ListIterator有什么不同？"></a>11. Iterator和ListIterator有什么不同？</h3><ul>
<li>ListIterator继承自Iterator接口，并附带额外的功能，如添加元素，替换元素，获取前一个元素和下一个元素的索引位置。</li>
<li>我们可以使用Iterator遍历Set和List集合，而ListIterator只能用于List。</li>
<li>Iterator只能沿正向移动，而ListIterator可以沿两个方向移动。</li>
</ul>
<h3 id="12-迭代列表有什么不同的方法？"><a href="#12-迭代列表有什么不同的方法？" class="headerlink" title="12. 迭代列表有什么不同的方法？"></a>12. 迭代列表有什么不同的方法？</h3><p>我们可以用两种不同的方式迭代列表 - 使用iterator和for-each循环。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//using for-each loop</span></span><br><span class="line"><span class="keyword">for</span>(String obj : strList)&#123;</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//using iterator</span></span><br><span class="line">Iterator&lt;String&gt; it = strList.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    String obj = it.next();</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用iterator是更线程安全的，因为如果基础列表元素被修改，它将抛出ConcurrentModificationException。</p>
<h3 id="13-你怎么理解iterator-fail-fast属性？"><a href="#13-你怎么理解iterator-fail-fast属性？" class="headerlink" title="13. 你怎么理解iterator fail-fast属性？"></a>13. 你怎么理解iterator fail-fast属性？</h3><p>每当我们尝试获取下一个元素时，iterator fail-fast属性检查底层集合的结构中的任何修改。如果找到任何修改，则抛出ConcurrentModificationException。<br>Collection类中的Iterator的所有实现都是按设计fail-fast执行的，除了ConcurrentHashMap和CopyOnWriteArrayList等并发集合类。</p>
<h3 id="14-fail-fast和fail-safe有什么区别？"><a href="#14-fail-fast和fail-safe有什么区别？" class="headerlink" title="14. fail-fast和fail-safe有什么区别？"></a>14. fail-fast和fail-safe有什么区别？</h3><p>iterator fail-safe属性与底层集合的克隆一起工作，因此它不受集合中任何修改的影响。 通过设计，java.util包中的所有集合类都是fail-fast的，而java.util.concurrent中的集合类是fail-safe的。</p>
<p>fail-fast iterator抛出ConcurrentModificationException，而fail-safe  iterator永远不抛出ConcurrentModificationException。 </p>
<h3 id="15-如何在迭代集合时避免ConcurrentModificationException？"><a href="#15-如何在迭代集合时避免ConcurrentModificationException？" class="headerlink" title="15. 如何在迭代集合时避免ConcurrentModificationException？"></a>15. 如何在迭代集合时避免ConcurrentModificationException？</h3><p>我们可以使用并发集合类来避免ConcurrentModificationException迭代集合，例如CopyOnWriteArrayList而不是ArrayList。 </p>
<h3 id="16-为什么没有Iterator接口的具体实现？"><a href="#16-为什么没有Iterator接口的具体实现？" class="headerlink" title="16. 为什么没有Iterator接口的具体实现？"></a>16. 为什么没有Iterator接口的具体实现？</h3><p>Iterator接口声明迭代一个集合的方法，但它的实现是集合具体类的责任。每个返回遍历iterator的集合类都有自己的Iterator实现嵌套类。 </p>
<p>这允许集合类选择迭代器是fail-fast还是 fail-safe的。例如，ArrayList迭代器是fail-fast的，而CopyOnWriteArrayList迭代器是fail-safe的。</p>
<h3 id="17-什么是UnsupportedOperationException？"><a href="#17-什么是UnsupportedOperationException？" class="headerlink" title="17. 什么是UnsupportedOperationException？"></a>17. 什么是UnsupportedOperationException？</h3><p><code>UnsupportedOperationException</code>是用于指示操作不支持的异常。 它在JDK类中广泛使用，在集合框架<code>java.util.Collections.UnmodifiableCollection</code>对所有add和remove操作引发此异常。</p>
<h3 id="18-HashMap如何在Java中工作？"><a href="#18-HashMap如何在Java中工作？" class="headerlink" title="18. HashMap如何在Java中工作？"></a>18. HashMap如何在Java中工作？</h3><p>HashMap在Map.Entry静态嵌套类实现中存储键值对。HashMap基于哈希算法进行工作，在put和get方法中使用hashCode（）和equals（）方法。</p>
<p>当我们通过传递键值对来调用put方法时，HashMap使用Key hashCode（）和hash来找出存储键值对的索引。 Entry存储在LinkedList中，所以如果已经存在，则使用equals（）方法检查传递的键是否已经存在，如果是则覆盖该值，否则会创建一个新Entry并保存。</p>
<p>当我们通过传递Key来调用get方法时，它再次使用hashCode（）来查找数组中的索引，然后使用equals（）方法来查找正确的Entry并返回它的值。 </p>
<p>其它关于HashMap比较重要的问题是容量、负荷系数和阀值调整。 HashMap初始默认容量为16 ，负载因子为0.75。 阈值是容量乘以负载因子，每当我们尝试添加entry时，如果映射大小大于阈值，则HashMap将映射的内容重新映射到具有更大容量的新数组中。 容量始终为2，所以如果你知道你需要存储大量的键值对，例如从数据库中缓存数据，最好用正确的容量和负载因子来初始化HashMap。</p>
<h3 id="19-hashCode-和equals-方法有何重要性？"><a href="#19-hashCode-和equals-方法有何重要性？" class="headerlink" title="19. hashCode()和equals()方法有何重要性？"></a>19. hashCode()和equals()方法有何重要性？</h3><p>HashMap使用Key对象的hashCode（）和equals（）方法确定放置键值对的索引。 当我们试图从HashMap获取值时，也使用这些方法。 如果这些方法没有正确实现，两个不同的Key可能产生相同的hashCode（）和equals（）输出，在这种情况下，而不是将其存储在不同的位置，HashMap会认为它们相同并覆盖它们。</p>
<p>同样，所有不存储重复数据的集合类都使用hashCode（）和equals（）来查找重复项，所以正确实现它们非常重要。equals（）和hashCode（）的实现应遵循这些规则。</p>
<p>如果o1.equals(o2) ，那么o1.hashCode() == o2.hashCode()应该总是为true。</p>
<p>如果o1.hashCode() == o2.hashCode为true，那么并不意味着o1.equals(o2)将为true。</p>
<h3 id="20-我们可以使用任何类作为Map键吗？"><a href="#20-我们可以使用任何类作为Map键吗？" class="headerlink" title="20. 我们可以使用任何类作为Map键吗？"></a>20. 我们可以使用任何类作为Map键吗？</h3><p>我们可以使用任何类作为Map Key，但在使用它们之前应考虑以下几点。</p>
<ul>
<li>如果类重写equals（）方法，它也应该重写hashCode（）方法。</li>
<li>该类应遵循与所有实例的equals（）和hashCode（）相关的规则。 请参阅前面的问题了解这些规则。</li>
<li>如果在equals（）中没有使用类字段，则不应在hashCode（）方法中使用它。</li>
<li>用户定义密钥类的最佳做法是使其不可变，以便可以高速缓存hashCode（）值以实现快速性能。 另外不可变的类确保hashCode（）和equals（）在将来不会改变，这将解决任何可变性问题。 </li>
</ul>
<p>例如，假设我有一个用于HashMap键的类MyKey 。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传递的MyKey name参数用于equals（）和hashCode（）</span></span><br><span class="line">MyKey key = <span class="keyword">new</span> MyKey（“Pankaj”）;  <span class="comment">//假定hashCode = 1234</span></span><br><span class="line">myHashMap.put（key，“Value”）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面的代码将改变密钥hashCode（）和equals（）</span></span><br><span class="line"><span class="comment">//但是它的位置没有改变</span></span><br><span class="line">key.setName（ “阿米特”）;  <span class="comment">//假定新的hashCode = 7890</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面将返回null，因为HashMap将尝试查找关键字</span></span><br><span class="line"><span class="comment">//与它存储在同一个索引中，但是由于密钥发生了变化， </span></span><br><span class="line"><span class="comment">//将不会有匹配，它将返回null。</span></span><br><span class="line">myHashMap.get（<span class="keyword">new</span> MyKey（“Pankaj”））;</span><br></pre></td></tr></table></figure></p>
<p>这就是为什么String和Integer主要用作HashMap键的原因。</p>
<h3 id="21-Map接口提供了哪些不同的集合视图？"><a href="#21-Map接口提供了哪些不同的集合视图？" class="headerlink" title="21. Map接口提供了哪些不同的集合视图？"></a>21. Map接口提供了哪些不同的集合视图？</h3><p>Map界面提供了三种集合视图：</p>
<ol>
<li><code>Set&lt;K&gt; keySet()</code>：返回包含在此映射中的键的Set视图。 该集合受Map支持，所以对地图的更改反映在集合中，反之亦然。 如果在对集合进行迭代的过程中修改了映射（除了通过迭代器自己的删除操作），迭代的结果是未定义的。该Set支持元素删除，通过Iterator.remove，Set.remove，removeAll，retainAll和clear操作从映射中删除相应的映射。 但它不支持add或addAll操作。</li>
<li><code>Collection&lt;V&gt; values()</code>：返回此映射中包含的值的Collection视图。该集合受Map支持，所以对地图的更改反映在集合中，反之亦然。如果在迭代集合的过程中修改了映射（除了通过迭代器自己的删除操作），迭代的结果是未定义的。该集合支持元素删除，通过Iterator.remove，Collection.remove，removeAll，retainAll和Clear操作从映射中删除相应的映射。 但它不支持add或addAll操作。</li>
<li><code>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</code>：返回此映射中包含的映射的Set视图。该集合受Map支持，所以对地图的更改反映在集合中，反之亦然。 如果在对集合进行迭代的过程中修改了映射（除了通过迭代器自己的删除操作，或者通过迭代器返回的映射条目上的setValue操作），迭代的结果是未定义的。该Set支持元素删除，通过Iterator.remove，Set.remove，removeAll，retainAll和Clear操作从映射中删除相应的映射。但它不支持add或addAll操作。</li>
</ol>
<h3 id="22-HashMap和Hashtable有什么区别？"><a href="#22-HashMap和Hashtable有什么区别？" class="headerlink" title="22. HashMap和Hashtable有什么区别？"></a>22. HashMap和Hashtable有什么区别？</h3><p>HashMap和Hashtable都实现了Map接口并且看起来很相似，但是HashMap和Hashtable之间存在以下区别。</p>
<ol>
<li>HashMap允许空键和值，而Hashtable不允许空键和值。</li>
<li>Hashtable是同步的但HashMap不同步。所以HashMap对单线程环境更好，Hashtable适用于多线程环境。</li>
<li>LinkedHashMap是在Java 1.4中作为HashMap的子类引入的，所以如果你想要迭代次序，你可以很容易地从HashMap切换到LinkedHashMap，但是迭代顺序不可预测的Hashtable并不是这样。</li>
<li>HashMap提供了一组密钥来迭代，因此它是fail-fast的，但Hashtable提供了不支持这个特性的密钥枚举。</li>
<li>Hashtable被认为是遗留类，如果您在迭代时正在寻找Map的修改，则应该使用ConcurrentHashMap。</li>
</ol>
<h3 id="23-如何决定HashMap和TreeMap？"><a href="#23-如何决定HashMap和TreeMap？" class="headerlink" title="23. 如何决定HashMap和TreeMap？"></a>23. 如何决定HashMap和TreeMap？</h3><p>为了插入，删除和定位Map中的元素，HashMap提供了最好的选择。但是，如果您需要按排序顺序遍历键，那么TreeMap是您更好的选择。 根据集合的大小，将元素添加到HashMap可能会更快，然后将映射转换为TreeMap以进行排序的键遍历。</p>
<h3 id="24-ArrayList和Vector有什么相似之处？"><a href="#24-ArrayList和Vector有什么相似之处？" class="headerlink" title="24. ArrayList和Vector有什么相似之处？"></a>24. ArrayList和Vector有什么相似之处？</h3><p>ArrayList和Vector在很多方面都是类似的类。</p>
<ol>
<li>两者都是基于索引的，并由内部数组进行备份。</li>
<li>两者都保持插入顺序，我们可以按照插入顺序获取元素。</li>
<li>ArrayList和Vector的迭代器实现都是fail-fast设计的。</li>
<li>ArrayList和Vector都允许空值和使用索引随机访问元素。</li>
</ol>
<p>这些是ArrayList和Vector之间的区别。</p>
<ol>
<li>Vector是同步的，而ArrayList不同步。但是，如果您在迭代时正在查找列表修改，则应该使用CopyOnWriteArrayList。</li>
<li>ArrayList比Vector快，因为它没有任何开销，因为同步。</li>
<li>ArrayList更通用，因为我们可以使用Collections实用程序类轻松地获得同步列表或只读列表。</li>
</ol>
<h3 id="25-Array和ArrayList有什么区别？-你什么时候使用Array-Array-ArrayList？"><a href="#25-Array和ArrayList有什么区别？-你什么时候使用Array-Array-ArrayList？" class="headerlink" title="25. Array和ArrayList有什么区别？ 你什么时候使用Array Array ArrayList？"></a>25. Array和ArrayList有什么区别？ 你什么时候使用Array Array ArrayList？</h3><p>Array可以包含原始类型或对象，而ArrayList只能包含对象。<br>Array是固定大小，而ArrayList大小是动态的。<br>Array不提供很多像ArrayList一样的功能，比如addAll，removeAll，iterator等</p>
<p>虽然ArrayList是我们在列表上工作的首选，但是Array有如下几个使用场景。</p>
<ul>
<li>列表的大小是固定的，并且主要用于存储和遍历。</li>
<li>对于原始类型的列表，尽管集合使用自动装箱来减少编码工作，但是当处理固定大小的原始数据类型时，它仍会变慢。</li>
<li>如果您正在处理固定的多维情况，使用[] []比List <list <>&gt;要容易得多。</list></li>
</ul>
<h3 id="26-ArrayList和LinkedList有什么区别？"><a href="#26-ArrayList和LinkedList有什么区别？" class="headerlink" title="26. ArrayList和LinkedList有什么区别？"></a>26. ArrayList和LinkedList有什么区别？</h3><p>ArrayList和LinkedList都实现了List接口，但是它们之间有一些区别。</p>
<ol>
<li>ArrayList是一个由Array支持的基于索引的数据结构，因此它提供对性能为O（1）的元素的随机访问，但LinkedList将数据存储为节点列表，其中每个节点都链接到它的上一个节点和下一个节点。所以即使有一个方法来获取使用索引的元素，内部它从开始到达索引节点然后返回元素，所以性能是O（n）比ArrayList慢。</li>
<li>在LinkedList中插入，添加或删除元素比ArrayList更快，因为在中间添加元素时，没有调整数组大小或更新索引的概念。</li>
<li>LinkedList比ArrayList消耗更多的内存，因为LinkedList中的每个节点都存储了前一个元素和下一个元素的引用。</li>
</ol>
<h3 id="27-哪些集合类提供随机访问它的元素？"><a href="#27-哪些集合类提供随机访问它的元素？" class="headerlink" title="27. 哪些集合类提供随机访问它的元素？"></a>27. 哪些集合类提供随机访问它的元素？</h3><p>ArrayList，HashMap，TreeMap，Hashtable类提供随机访问它的元素。</p>
<h3 id="28-什么是EnumSet？"><a href="#28-什么是EnumSet？" class="headerlink" title="28. 什么是EnumSet？"></a>28. 什么是EnumSet？</h3><p>java.util.EnumSet被设置为与枚举类型一起使用。 枚举集合中的所有元素必须来自单个枚举类型，在创建集合时显式或隐式指定。 EnumSet不同步，不允许空元素。 它还提供了一些有用的方法，如copyOf（Collection c），（E first，E … rest）和complementOf（EnumSet s）。</p>
<h3 id="29-哪些集合类是线程安全的？"><a href="#29-哪些集合类是线程安全的？" class="headerlink" title="29. 哪些集合类是线程安全的？"></a>29. 哪些集合类是线程安全的？</h3><p>Vector，Hashtable，Properties和Stack是同步类，所以它们是线程安全的，可以在多线程环境中使用。 Java 1.5 并发API包含一些集合类，允许在迭代时修改集合，因为它们工作在集合的克隆上，所以它们可以安全地在多线程环境中使用。</p>
<h3 id="30-什么是并发的集合类？"><a href="#30-什么是并发的集合类？" class="headerlink" title="30. 什么是并发的集合类？"></a>30. 什么是并发的集合类？</h3><p>Java 1.5并发包（ java.util.concurrent ）包含线程安全的集合类，允许集合在迭代时被修改。 通过设计， java.util包中的迭代器实现fail-fast并引发ConcurrentModificationException。 但是java.util.concurrent包中的Iterator实现是自动安全的，我们可以在迭代时修改集合。 其中一些类是CopyOnWriteArrayList ， ConcurrentHashMap ， CopyOnWriteArraySet 。</p>
<h3 id="31-什么是BlockingQueue？"><a href="#31-什么是BlockingQueue？" class="headerlink" title="31. 什么是BlockingQueue？"></a>31. 什么是BlockingQueue？</h3><p>java.util.concurrent.BlockingQueue是一个队列，它支持在检索和删除元素时等待队列变为非空的操作，并且在添加元素时等待队列中的空间变为可用。</p>
<p>BlockingQueue接口是Java集合框架的一部分，主要用于实现生产者消费者问题。 BlockingQueue中的消费者可以使用BlockingQueue的实现类来处理生产者或对象的空间。</p>
<p>Java提供了几个BlockingQueue实现，如ArrayBlockingQueue，LinkedBlockingQueue，PriorityBlockingQueue，SynchronousQueue等 </p>
<h3 id="32-什么是Queue和Stack，列出他们的区别？"><a href="#32-什么是Queue和Stack，列出他们的区别？" class="headerlink" title="32. 什么是Queue和Stack，列出他们的区别？"></a>32. 什么是Queue和Stack，列出他们的区别？</h3><p>Queue和Stack都用于在处理数据之前存储数据。 java.util.Queue是一个接口，其实现类在java并发包中。 队列允许以先进先出（FIFO）顺序检索元素，但情况并非总是如此。 还有一个Deque接口，允许从队列的两端检索元素。 </p>
<p>堆栈与队列相似，只不过它允许以后进先出（LIFO）顺序检索元素。 </p>
<p>Stack是一个扩展Vector的类，而Queue则是一个接口。</p>
<h3 id="33-什么是Collections类？"><a href="#33-什么是Collections类？" class="headerlink" title="33. 什么是Collections类？"></a>33. 什么是Collections类？</h3><p>java.util.Collections是一个实用工具类，它只包含对集合进行操作或返回集合的静态方法。 它包含对集合进行操作的多态算法，“包装器”，返回由指定集合支持的新集合，以及其他一些可能性和结束。</p>
<p>这个类包含用于收集框架算法的方法，例如二进制搜索，排序，混淆，反转等。</p>
<h3 id="34-什么是Comparable和Comparator接口？"><a href="#34-什么是Comparable和Comparator接口？" class="headerlink" title="34. 什么是Comparable和Comparator接口？"></a>34. 什么是Comparable和Comparator接口？</h3><p>Java提供了Comparable接口，如果我们想使用Arrays或Collections排序方法，应该由任何自定义类来实现。 可比较的接口有排序方法使用的compareTo（T obj）方法。如果“this”对象小于，等于或大于作为参数传递的对象，我们应该以这样的方式覆盖此方法，即返回负整数，零或正整数。</p>
<p>但是，在大多数现实生活场景中，我们希望根据不同的参数进行排序。比如，作为首席执行官，我想根据薪水对员工进行排序，人力资源部门会根据年龄对他们进行排序。 这是我们需要使用Comparator接口的情况，因为Comparable.compareTo(Object o)方法实现只能根据一个字段进行排序，而我们不能选择我们想要对该对象进行排序的字段。</p>
<p>Comparator接口中的compare(Object o1, Object o2)方法需要实现两个Object参数，它应该以这样的方式实现：如果第一个参数小于第二个参数，则返回负值int，如果相等则返回零如果第一个参数大于第二个参数，则为正值。</p>
<h3 id="35-Comparable和Comparator接口有什么不同？"><a href="#35-Comparable和Comparator接口有什么不同？" class="headerlink" title="35. Comparable和Comparator接口有什么不同？"></a>35. Comparable和Comparator接口有什么不同？</h3><p>Comparable和Comparator接口用于排序集合或对象数组。</p>
<p>Comparable接口用于提供对象的自然排序，我们可以使用它来提供基于单一逻辑的排序。 （实体类实现）<br>Comparator接口用于提供不同的排序算法，我们可以选择我们想要用来对给定的对象集合进行排序的比较器。（调用方实现）</p>
<h3 id="36-我们如何排序对象列表？"><a href="#36-我们如何排序对象列表？" class="headerlink" title="36. 我们如何排序对象列表？"></a>36. 我们如何排序对象列表？</h3><p>如果我们需要排序一个对象数组，我们可以使用<code>Arrays.sort()</code>。 如果我们需要排序一个对象列表，我们可以使用<code>Collections.sort()</code>。 这两个类都有重载的sort（）方法用于自然排序（使用Comparable）或基于条件进行排序（使用Comparator）。 </p>
<p>集合内部使用Arrays排序方法，所以他们都有相同的性能，除了集合需要时间将列表转换为数组外。</p>
<h3 id="37-在将Collection作为参数传递给一个函数的时候，我们如何确保函数不能修改呢？"><a href="#37-在将Collection作为参数传递给一个函数的时候，我们如何确保函数不能修改呢？" class="headerlink" title="37. 在将Collection作为参数传递给一个函数的时候，我们如何确保函数不能修改呢？"></a>37. 在将Collection作为参数传递给一个函数的时候，我们如何确保函数不能修改呢？</h3><p>在传递参数之前，我们可以使用Collections.unmodifiableCollection(Collection c)方法创建一个只读集合，这将确保任何更改集合的操作都会抛出UnsupportedOperationException 。</p>
<h3 id="38-我们如何从给定的集合创建一个同步的集合？"><a href="#38-我们如何从给定的集合创建一个同步的集合？" class="headerlink" title="38. 我们如何从给定的集合创建一个同步的集合？"></a>38. 我们如何从给定的集合创建一个同步的集合？</h3><p>我们可以使用Collections.synchronizedCollection(Collection c)来获得由指定集合支持的同步（线程安全）的集合。</p>
<h3 id="39-在Collections-Framework中实现的常用算法是什么？"><a href="#39-在Collections-Framework中实现的常用算法是什么？" class="headerlink" title="39. 在Collections Framework中实现的常用算法是什么？"></a>39. 在Collections Framework中实现的常用算法是什么？</h3><p>Java集合框架提供了常用的算法实现，如排序和搜索。 集合类包含这些方法的实现。这些算法大部分都在List上工作，但其中一些适用于各种集合。<br>其中一些是排序，搜索，混淆，最小值最大值。</p>
<h3 id="40-什么是大O符号？-举一些例子？"><a href="#40-什么是大O符号？-举一些例子？" class="headerlink" title="40. 什么是大O符号？ 举一些例子？"></a>40. 什么是大O符号？ 举一些例子？</h3><p>大O符号按照数据结构中元素的数量来描述算法的性能。由于Collection类实际上是数据结构，所以我们通常倾向于使用大O表示法来根据时间，内存和性能选择使用的集合实现。</p>
<p>示例1：ArrayList get(index i)是一个常量操作，不依赖于列表中元素的数量。 所以大O表示法的性能是O（1）。<br>示例2：对数组或列表性能的线性搜索是O（n），因为我们需要搜索整个元素列表以查找元素。</p>
<h3 id="41-与Java-Collections框架相关的最佳实践是什么？"><a href="#41-与Java-Collections框架相关的最佳实践是什么？" class="headerlink" title="41. 与Java  Collections框架相关的最佳实践是什么？"></a>41. 与Java  Collections框架相关的最佳实践是什么？</h3><ul>
<li>根据需要选择正确类型的集合，例如，如果大小是固定的，我们可能希望使用Array而不是ArrayList。如果我们必须按照插入次序遍历Map，那么我们需要使用TreeMap。 如果我们不想重复，我们应该使用Set。</li>
<li>有些集合类允许指定初始容量，因此如果我们预估了要存储的元素数量，我们可以使用它来避免重新哈希或调整大小。</li>
<li>根据接口而不是实现来编写程序，它使我们能够在更晚的时间点轻松地改变实现。</li>
<li>为了类型安全总是使用泛型，从而避免在运行时出现ClassCastException。</li>
<li>使用JDK提供的不可变类作为Map中的键，以避免为我们的自定义类实现hashCode（）和equals（）。</li>
<li>尽可能多地使用Collections工具类来获取算法，或者获取只读，同步或空集合，而不是编写自己的实现。它将增强代码重用的稳定性和可维护性。</li>
</ul>
<h3 id="42-Java-PriorityQueue是什么？"><a href="#42-Java-PriorityQueue是什么？" class="headerlink" title="42. Java PriorityQueue是什么？"></a>42. Java PriorityQueue是什么？</h3><p>PriorityQueue是基于优先级堆的无限队列，元素按照自然顺序排序，或者我们可以在创建时提供比较器进行排序。PriorityQueue不允许空值，我们不能添加任何不提供自然顺序的对象，或者我们没有任何比较器来排序。 Java PriorityQueue不是线程安全的，并提供了O（log（n））入队和出队操作的时间。 </p>
<h3 id="43-为什么我们不能把代码写成List-lt-Number-gt-numbers-new-ArrayList-lt-Integer-gt-？"><a href="#43-为什么我们不能把代码写成List-lt-Number-gt-numbers-new-ArrayList-lt-Integer-gt-？" class="headerlink" title="43. 为什么我们不能把代码写成List&lt;Number&gt; numbers = new ArrayList&lt;Integer&gt;(); ？"></a>43. 为什么我们不能把代码写成<code>List&lt;Number&gt; numbers = new ArrayList&lt;Integer&gt;();</code> ？</h3><p>泛型不支持子类型，因为它会导致实现类型安全的问题。 这就是为什么<code>List &lt;T&gt;</code>不被认为是<code>List &lt;S&gt;</code>的子类型，其中S是T的超类型。为了理解为什么不被允许，让我们看看如果它被支持，会发生什么。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List &lt;Long&gt; listLong = <span class="keyword">new</span> ArrayList &lt;Long&gt;（）;</span><br><span class="line">listLong.add（Long.valueOf（<span class="number">10</span>））;</span><br><span class="line">List &lt;Number&gt; listNumbers = listLong;  <span class="comment">//编译器错误</span></span><br><span class="line">listNumbers.add（Double.valueOf（<span class="number">1.23</span>））;</span><br></pre></td></tr></table></figure></p>
<p>正如你从上面的代码可以看到，IF泛型支持子类型输入，我们可以很容易地在Long列表中添加一个Double，这个Long列表在遍历Long列表的时候会在运行时导致ClassCastException 。</p>
<h3 id="44-为什么我们不能创建泛型数组？-或者将代码编写为List-lt-Integer-gt-array-new-ArrayList-lt-Integer-gt-10"><a href="#44-为什么我们不能创建泛型数组？-或者将代码编写为List-lt-Integer-gt-array-new-ArrayList-lt-Integer-gt-10" class="headerlink" title="44. 为什么我们不能创建泛型数组？ 或者将代码编写为List&lt;Integer&gt;[] array = new ArrayList&lt;Integer&gt;[10];"></a>44. 为什么我们不能创建泛型数组？ 或者将代码编写为<code>List&lt;Integer&gt;[] array = new ArrayList&lt;Integer&gt;[10];</code></h3><p>我们不允许创建泛型数组，因为数组在运行时携带了元素的类型信息。如果元素类型与定义的类型不匹配，则在运行时使用此信息来抛出<code>ArrayStoreException</code> 。由于<strong>泛型类型信息在编译时被类型擦除</strong>，所以数组存储检查将会在应该失败的地方通过。让我们用一个简单的示例代码来理解这一点。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List &lt;Integer&gt; [] intList = <span class="keyword">new</span> List &lt;Integer&gt; [<span class="number">5</span>];  <span class="comment">//编译错误</span></span><br><span class="line">Object [] objArray = intList;</span><br><span class="line">List &lt;Double&gt; doubleList = <span class="keyword">new</span> ArrayList &lt;Double&gt;（）;</span><br><span class="line">doubleList.add（Double.valueOf（<span class="number">1.23</span>））;</span><br><span class="line">objArray [<span class="number">0</span>] = doubleList;  <span class="comment">//这会失败，但会通过，因为在运行时intList和doubleList都只是List</span></span><br></pre></td></tr></table></figure></p>
<p>数组是自然协变的，即当S是T的子类型时，S []是T []的一个子类型，但泛型不支持协方差或子类型，正如我们在上一个问题中看到的那样。所以如果我们被允许创建通用数组，因为类型擦除，我们不会得到数组存储异常，即使这两种类型都不相关。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ol>
<li><a href="https://www.journaldev.com/1330/java-collections-interview-questions-and-answers" target="_blank" rel="noopener">原文</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> collections, list, set, map，堆空间,堆栈,栈内存,内存分配 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java类加载器]]></title>
      <url>/2018/11/26/java-classloader/</url>
      <content type="html"><![CDATA[<p>Java类加载器是项目开发中Java的一个重要但很少使用的组件。就个而言，我从来没有在任何项目中扩展ClassLoader，但有我自己的ClassLoader，可以自定义Java类加载的想法刺激我，写以篇文章。<br><a id="more"></a></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li>Java类加载器<br>&nbsp;&nbsp;&nbsp;&nbsp;1.1 什么是Java类加载器？<br>&nbsp;&nbsp;&nbsp;&nbsp;1.2 为什么在Java中编写自定义类加载器？<br>&nbsp;&nbsp;&nbsp;&nbsp;1.3 Java类加载器如何工作？<br>&nbsp;&nbsp;&nbsp;&nbsp;1.4 Java自定义ClassLoader<br>&nbsp;&nbsp;&nbsp;&nbsp;1.5 Java自定义ClassLoader执行步骤<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.5.1 由m29的评论更新<br>&nbsp;&nbsp;&nbsp;&nbsp;1.6 使用ClassLoader Java选项的Mac OS X 10.6.4问题</li>
</ol>
<h2 id="Java类加载器"><a href="#Java类加载器" class="headerlink" title="Java类加载器"></a>Java类加载器</h2><p>本文将提供Java类加载器的概述，然后在Java中创建自定义的ClassLoader。</p>
<h3 id="什么是Java类加载器？"><a href="#什么是Java类加载器？" class="headerlink" title="什么是Java类加载器？"></a>什么是Java类加载器？</h3><p>我们知道Java程序在Java虚拟机 （JVM）上运行。当我们编译一个Java类时，它将以平台和机器独立编译程序的字节码的形式进行转换，并将其存储为一个.class文件。之后，当我们尝试使用一个类时，Java类加载器会将该类加载到内存中。</p>
<p>Java中有三种类型的内置ClassLoader：</p>
<ol>
<li>引导类加载器（Bootstrap Class Loader） - 加载JDK内部类，通常加载rt.jar和其他核心类，例如java.lang。*包类</li>
<li>扩展类加载器 - 它从JDK扩展目录加载类，通常是$ JAVA_HOME / lib / ext目录。</li>
<li>系统类加载器 - 它从当前类路径加载类， 该类可以在使用-cp或-classpath命令行选项调用程序时进行设置。</li>
</ol>
<p>Java类加载器是分层的，每当引发一个请求来加载一个类时，它就委托给它的父类加载器，这样在运行环境中就保持了唯一性。 如果父类加载器没有找到该类，那么类加载器自身会尝试加载该类。</p>
<p>让我们通过执行下面的java程序来理解这个：</p>
<p><code>ClassLoaderTest.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lexiangmiao.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">"class loader for HashMap: "</span></span><br><span class="line">				+ java.util.HashMap.class.getClassLoader());</span><br><span class="line">		System.out.println(<span class="string">"class loader for DNSNameService: "</span></span><br><span class="line">				+ sun.net.spi.nameservice.dns.DNSNameService.class</span><br><span class="line">						.getClassLoader());</span><br><span class="line">		System.out.println(<span class="string">"class loader for this class: "</span></span><br><span class="line">				+ ClassLoaderTest.class.getClassLoader());</span><br><span class="line"></span><br><span class="line">		System.out.println(com.mysql.jdbc.Blob.class.getClassLoader());</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的Java类加载器示例程序的输出是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class loader for HashMap: null</span><br><span class="line">class loader for DNSNameService: sun.misc.Launcher$ExtClassLoader@7c354093</span><br><span class="line">class loader for this class: sun.misc.Launcher$AppClassLoader@64cbbe37</span><br><span class="line">sun.misc.Launcher$AppClassLoader@<span class="number">64</span>cbbe37</span><br></pre></td></tr></table></figure>
<p>正如你所看到的，java.util.HashMap的ClassLoader是空的，它反映了Bootstrap类加载器，而DNSNameService类加载器是ExtClassLoader。 由于类本身在CLASSPATH中，所以System ClassLoader会加载它。</p>
<p>当我们试图加载HashMap的时候，我们的System ClassLoader把它委托给扩展类加载器，扩展类加载器又将其委派给Bootstrap ClassLoader，该类发现该类，并将其加载到JVM中。</p>
<p>DNSNameService类遵循相同的过程，但Bootstrap ClassLoader无法找到它，因为它在$ JAVA_HOME / lib / ext / dnsns.jar中，因此被扩展类加载器加载。 请注意，Blob类包含在MySql JDBC Connector jar（mysql-connector-java-5.0.7-bin.jar）中，在执行它之前，它已经包含在项目的构建路径中，并且它也通过System Class Loader 。</p>
<p>还有一点需要注意的是，由子类加载器加载的类可以看到由其父类加载器加载的类。 因此，由System ClassLoader加载的类可以看到由Extensions和Bootstrap ClassLoader加载的类。</p>
<p>如果有兄弟类加载器，则不能访问彼此加载的类。</p>
<h3 id="为什么在Java中编写自定义类加载器？"><a href="#为什么在Java中编写自定义类加载器？" class="headerlink" title="为什么在Java中编写自定义类加载器？"></a>为什么在Java中编写自定义类加载器？</h3><p>Java默认的ClassLoader可以从本地文件系统加载足够大多数情况下的文件。 但是，如果您在加载类时在运行时或者从FTP服务器或通过第三方Web服务期望类，则必须扩展现有的类加载器。 例如，AppletViewers从远程Web服务器加载类。</p>
<h3 id="Java类加载器如何工作？"><a href="#Java类加载器如何工作？" class="headerlink" title="Java类加载器如何工作？"></a>Java类加载器如何工作？</h3><p>当JVM请求一个类时，它通过传递Class的完全限定的名字来调用ClassLoader的loadClass函数。</p>
<p>loadClass函数调用findLoadedClass()方法来检查类是否已经被加载。 需要避免多次加载课程。</p>
<p>如果Class尚未被加载，那么它将把请求委托给父类加载器来加载类。</p>
<p>如果父类加载器没有找到该类，那么它将调用findClass（）方法来查找文件系统中的类。</p>
<h3 id="Java自定义ClassLoader"><a href="#Java自定义ClassLoader" class="headerlink" title="Java自定义ClassLoader"></a>Java自定义ClassLoader</h3><p>我们将通过扩展ClassLoader类和重写loadClass（String name）方法来创建自己的ClassLoader。 如果名称将从com.journaldev（即我们的示例类包）开始，那么我们将使用我们自己的类加载器加载它，否则我们将调用父类ClassLoader的loadClass（）方法来加载类。</p>
<p>项目结构如下图所示：</p>
<p>Java类加载器，Java中的ClassLoader，Java Class Loader，Java类加载器示例<br><strong>CCLoader.java</strong> ：这是我们的自定义类加载器，具有以下方法。</p>
<ol>
<li>private byte[] loadClassFileData(String name) ：<br>此方法将从文件系统读取类文件到字节数组。</li>
<li>private Class getClass(String name) private Class getClass(String name)<br>这个方法将调用loadClassFileData（）函数，并通过调用父类的defineClass（）方法，它将生成类并返回它。</li>
<li>public Class loadClass(String name) public Class loadClass(String name) ：<br>这个方法负责加载类。 如果类名以com.journaldev（我们的示例类）开头，那么它将使用getClass（）方法加载它，否则将调用父类loadClass函数加载它。</li>
<li>public CCLoader(ClassLoader parent) ：<br>这是负责设置父ClassLoader的构造函数。</li>
</ol>
<p><code>CCLoader.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Our Custom Class Loader to load the classes. Any class in the com.journaldev</span></span><br><span class="line"><span class="comment"> * package will be loaded using this ClassLoader. For other classes, it will</span></span><br><span class="line"><span class="comment"> * delegate the request to its Parent ClassLoader.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CCLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This constructor is used to set the parent ClassLoader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CCLoader</span><span class="params">(ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Loads the class from the file system. The class file should be located in</span></span><br><span class="line"><span class="comment">     * the file system. The name should be relative to get the file location</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     *            Fully Classified name of class, for example com.journaldev.Foo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Class <span class="title">getClass</span><span class="params">(String name)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        String file = name.replace(<span class="string">'.'</span>, File.separatorChar) + <span class="string">".class"</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// This loads the byte code data from the file</span></span><br><span class="line">            b = loadClassFileData(file);</span><br><span class="line">            <span class="comment">// defineClass is inherited from the ClassLoader class</span></span><br><span class="line">            <span class="comment">// that converts byte array into a Class. defineClass is Final</span></span><br><span class="line">            <span class="comment">// so we cannot override it</span></span><br><span class="line">            Class c = defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line">            resolveClass(c);</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Every request for a class passes through this method. If the class is in</span></span><br><span class="line"><span class="comment">     * com.journaldev package, we will use this classloader or else delegate the</span></span><br><span class="line"><span class="comment">     * request to parent classloader.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     *            Full class name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">loadClass</span><span class="params">(String name)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Loading Class '"</span> + name + <span class="string">"'"</span>);</span><br><span class="line">        <span class="keyword">if</span> (name.startsWith(<span class="string">"com.journaldev"</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Loading Class using CCLoader"</span>);</span><br><span class="line">            <span class="keyword">return</span> getClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.loadClass(name);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reads the file (.class) into a byte array. The file should be</span></span><br><span class="line"><span class="comment">     * accessible as a resource and make sure that its not in Classpath to avoid</span></span><br><span class="line"><span class="comment">     * any confusion.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     *            File name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Byte array read from the file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     *             if any exception comes in reading the file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] loadClassFileData(String name) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        InputStream stream = getClass().getClassLoader().getResourceAsStream(</span><br><span class="line">                name);</span><br><span class="line">        <span class="keyword">int</span> size = stream.available();</span><br><span class="line">        <span class="keyword">byte</span> buff[] = <span class="keyword">new</span> <span class="keyword">byte</span>[size];</span><br><span class="line">        DataInputStream in = <span class="keyword">new</span> DataInputStream(stream);</span><br><span class="line">        in.readFully(buff);</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">return</span> buff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>CCRun.java</strong> ：</p>
<p>这是我们使用主函数的测试类，我们正在创建ClassLoader的对象，并使用它的loadClass方法加载样本类。 加载类之后，我们使用Java反射API来调用它的方法。</p>
<p><code>CCRun.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CCRun</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String progClass = args[<span class="number">0</span>];</span><br><span class="line">        String progArgs[] = <span class="keyword">new</span> String[args.length - <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(args, <span class="number">1</span>, progArgs, <span class="number">0</span>, progArgs.length);</span><br><span class="line"></span><br><span class="line">        CCLoader ccl = <span class="keyword">new</span> CCLoader(CCRun.class.getClassLoader());</span><br><span class="line">        Class clas = ccl.loadClass(progClass);</span><br><span class="line">        Class mainArgType[] = &#123; (<span class="keyword">new</span> String[<span class="number">0</span>]).getClass() &#125;;</span><br><span class="line">        Method main = clas.getMethod(<span class="string">"main"</span>, mainArgType);</span><br><span class="line">        Object argsArray[] = &#123; progArgs &#125;;</span><br><span class="line">        main.invoke(<span class="keyword">null</span>, argsArray);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Below method is used to check that the Foo is getting loaded</span></span><br><span class="line">        <span class="comment">// by our custom class loader i.e CCLoader</span></span><br><span class="line">        Method printCL = clas.getMethod(<span class="string">"printCL"</span>, <span class="keyword">null</span>);</span><br><span class="line">        printCL.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Foo.java和Bar.java</strong> ：</p>
<p>这些是由我们的自定义类加载器加载的测试类。 他们还有一个printCL（）方法，被调用来打印已加载Class的ClassLoader。 Foo类将由我们的自定义类加载器加载，后者又使用Bar类，所以Bar类也将由我们的自定义类加载器加载。</p>
<p><code>Foo.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Foo Constructor &gt;&gt;&gt; "</span> + args[<span class="number">0</span>] + <span class="string">" "</span> + args[<span class="number">1</span>]);</span><br><span class="line">        Bar bar = <span class="keyword">new</span> Bar(args[<span class="number">0</span>], args[<span class="number">1</span>]);</span><br><span class="line">        bar.printCL();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Foo ClassLoader: "</span>+Foo.class.getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Bar.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bar</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bar Constructor &gt;&gt;&gt; "</span> + a + <span class="string">" "</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printCL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bar ClassLoader: "</span>+Bar.class.getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Java自定义ClassLoader执行步骤</p>
<p>首先我们将通过命令行编译所有的类。 之后，我们将通过传递三个参数来运行CCRun类。 第一个参数是Foo类的完整分类名称，它将被我们的类加载器加载。 其他两个参数传递给Foo类的main函数和Bar构造函数。 输出的执行步骤如下所示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> Pankaj$ javac -cp . com/journaldev/cl/Foo.java</span><br><span class="line">Pankaj$ javac -cp . com/journaldev/cl/Bar.java</span><br><span class="line">Pankaj$ javac CCLoader.java</span><br><span class="line">Pankaj$ javac CCRun.java</span><br><span class="line">CCRun.java:<span class="number">18</span>: warning: non-varargs call of varargs method with inexact argument type <span class="keyword">for</span> last parameter;</span><br><span class="line">cast to java.lang.Class&lt;?&gt; <span class="keyword">for</span> a varargs call</span><br><span class="line">cast to java.lang.Class&lt;?&gt;[] <span class="keyword">for</span> a non-varargs call and to suppress <span class="keyword">this</span> warning</span><br><span class="line">Method printCL = clas.getMethod(<span class="string">"printCL"</span>, <span class="keyword">null</span>);</span><br><span class="line">^</span><br><span class="line"><span class="number">1</span> warning</span><br><span class="line">Pankaj$ java CCRun com.journaldev.cl.Foo <span class="number">1212</span> <span class="number">1313</span></span><br><span class="line">Loading Class <span class="string">'com.journaldev.cl.Foo'</span></span><br><span class="line">Loading Class using CCLoader</span><br><span class="line">Loading Class <span class="string">'java.lang.Object'</span></span><br><span class="line">Loading Class <span class="string">'java.lang.String'</span></span><br><span class="line">Loading Class <span class="string">'java.lang.Exception'</span></span><br><span class="line">Loading Class <span class="string">'java.lang.System'</span></span><br><span class="line">Loading Class <span class="string">'java.lang.StringBuilder'</span></span><br><span class="line">Loading Class <span class="string">'java.io.PrintStream'</span></span><br><span class="line">Foo Constructor &gt;&gt;&gt; <span class="number">1212</span> <span class="number">1313</span></span><br><span class="line">Loading Class <span class="string">'com.journaldev.cl.Bar'</span></span><br><span class="line">Loading Class using CCLoader</span><br><span class="line">Bar Constructor &gt;&gt;&gt; <span class="number">1212</span> <span class="number">1313</span></span><br><span class="line">Loading Class <span class="string">'java.lang.Class'</span></span><br><span class="line">Bar ClassLoader: CCLoader@<span class="number">71f</span>6f0bf</span><br><span class="line">Foo ClassLoader: CCLoader@<span class="number">71f</span>6f0bf</span><br><span class="line">ctk-pcs1313512-<span class="number">2</span>:src pk93229$</span><br></pre></td></tr></table></figure>
<p>如果仔细查看输出，首先尝试加载com.journaldev.cl.Foo类，但是由于它扩展了java.lang.Object类，它试图首先加载它，然后请求它来到CCLoader的loadClass方法，即委托它的父类。 所以父类加载器正在加载对象，字符串和其他Java类。 我们的ClassLoader只从调用printCL（）函数的文件系统中加载Foo和Bar类。</p>
<p>请注意，我们可以通过更改loadClassFileData（）函数来从FTP服务器读取字节数组，或通过调用任何第三方服务来即时获取类字节数组。</p>
<p>我希望这篇文章有助于理解Java类加载器的工作原理，以及如何将它扩展到只从文件系统中获取更多内容。</p>
<h3 id="从m29的评论更新"><a href="#从m29的评论更新" class="headerlink" title="从m29的评论更新"></a>从m29的评论更新</h3><p>当JVM使用Java选项启动时，我们可以将自定义类加载器设置为默认类加载器。<br>例如，我将在提供java类加载器选项后再次运行ClassLoaderTest程序。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Pankaj$ javac -cp .:../lib/mysql-connector-java-<span class="number">5.0</span>.7-bin.jar com/journaldev/classloader/ClassLoaderTest.java</span><br><span class="line">Pankaj$ java -cp .:../lib/mysql-connector-java-<span class="number">5.0</span>.7-bin.jar -Djava.system.class.loader=CCLoader com.journaldev.classloader.ClassLoaderTest</span><br><span class="line">Loading Class <span class="string">'com.journaldev.classloader.ClassLoaderTest'</span></span><br><span class="line">Loading Class using CCLoader</span><br><span class="line">Loading Class <span class="string">'java.lang.Object'</span></span><br><span class="line">Loading Class <span class="string">'java.lang.String'</span></span><br><span class="line">Loading Class <span class="string">'java.lang.System'</span></span><br><span class="line">Loading Class <span class="string">'java.lang.StringBuilder'</span></span><br><span class="line">Loading Class <span class="string">'java.util.HashMap'</span></span><br><span class="line">Loading Class <span class="string">'java.lang.Class'</span></span><br><span class="line">Loading Class <span class="string">'java.io.PrintStream'</span></span><br><span class="line">class loader for HashMap: null</span><br><span class="line">Loading Class <span class="string">'sun.net.spi.nameservice.dns.DNSNameService'</span></span><br><span class="line">class loader for DNSNameService: sun.misc.Launcher$ExtClassLoader@24480457</span><br><span class="line">class loader for this class: CCLoader@38503429</span><br><span class="line">Loading Class <span class="string">'com.mysql.jdbc.Blob'</span></span><br><span class="line">sun.misc.Launcher$AppClassLoader@<span class="number">2f</span>94ca6c</span><br><span class="line">Pankaj$</span><br></pre></td></tr></table></figure>
<p>正如你所看到的，CCLoader正在加载ClassLoaderTest类，因为它在com.sanfor 包中。</p>
<h3 id="ClassLoader-Java选项的Mac-OS-X-10-6-4问题"><a href="#ClassLoader-Java选项的Mac-OS-X-10-6-4问题" class="headerlink" title="ClassLoader Java选项的Mac OS X 10.6.4问题"></a>ClassLoader Java选项的Mac OS X 10.6.4问题</h3><p>如果你在Mac OS上工作，上面的执行可能会抛出一些异常，但是它会成功执行。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">Pankaj$$ java -cp .:../lib/mysql-connector-java-<span class="number">5.0</span>.7-bin.jar -Djava.system.class.loader=CCLoader com.journaldev.classloader.ClassLoaderTest</span><br><span class="line">Intentionally suppressing recursive invocation exception!</span><br><span class="line">java.lang.IllegalStateException: recursive invocation</span><br><span class="line">    at java.lang.ClassLoader.initSystemClassLoader(ClassLoader.java:<span class="number">1391</span>)</span><br><span class="line">    at java.lang.ClassLoader.getSystemClassLoader(ClassLoader.java:<span class="number">1374</span>)</span><br><span class="line">    at sun.security.jca.ProviderConfig$<span class="number">1</span>.run(ProviderConfig.java:<span class="number">64</span>)</span><br><span class="line">    at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">    at sun.security.jca.ProviderConfig.getLock(ProviderConfig.java:<span class="number">62</span>)</span><br><span class="line">    at sun.security.jca.ProviderConfig.getProvider(ProviderConfig.java:<span class="number">187</span>)</span><br><span class="line">    at sun.security.jca.ProviderList.getProvider(ProviderList.java:<span class="number">215</span>)</span><br><span class="line">    at sun.security.jca.ProviderList.getService(ProviderList.java:<span class="number">313</span>)</span><br><span class="line">    at sun.security.jca.GetInstance.getInstance(GetInstance.java:<span class="number">140</span>)</span><br><span class="line">    at java.security.cert.CertificateFactory.getInstance(CertificateFactory.java:<span class="number">148</span>)</span><br><span class="line">    at sun.security.pkcs.PKCS7.parseSignedData(PKCS7.java:<span class="number">244</span>)</span><br><span class="line">    at sun.security.pkcs.PKCS7.parse(PKCS7.java:<span class="number">141</span>)</span><br><span class="line">    at sun.security.pkcs.PKCS7.parse(PKCS7.java:<span class="number">110</span>)</span><br><span class="line">    at sun.security.pkcs.PKCS7.&lt;init&gt;(PKCS7.java:<span class="number">92</span>)</span><br><span class="line">    at sun.security.util.SignatureFileVerifier.&lt;init&gt;(SignatureFileVerifier.java:<span class="number">80</span>)</span><br><span class="line">    at java.util.jar.JarVerifier.processEntry(JarVerifier.java:<span class="number">256</span>)</span><br><span class="line">    at java.util.jar.JarVerifier.update(JarVerifier.java:<span class="number">188</span>)</span><br><span class="line">    at java.util.jar.JarFile.initializeVerifier(JarFile.java:<span class="number">321</span>)</span><br><span class="line">    at java.util.jar.JarFile.getInputStream(JarFile.java:<span class="number">386</span>)</span><br><span class="line">    at sun.misc.JarIndex.getJarIndex(JarIndex.java:<span class="number">99</span>)</span><br><span class="line">    at sun.misc.URLClassPath$JarLoader$<span class="number">1</span>.run(URLClassPath.java:<span class="number">606</span>)</span><br><span class="line">    at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">    at sun.misc.URLClassPath$JarLoader.ensureOpen(URLClassPath.java:<span class="number">597</span>)</span><br><span class="line">    at sun.misc.URLClassPath$JarLoader.&lt;init&gt;(URLClassPath.java:<span class="number">581</span>)</span><br><span class="line">    at sun.misc.URLClassPath$<span class="number">3</span>.run(URLClassPath.java:<span class="number">331</span>)</span><br><span class="line">    at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">    at sun.misc.URLClassPath.getLoader(URLClassPath.java:<span class="number">320</span>)</span><br><span class="line">    at sun.misc.URLClassPath.getLoader(URLClassPath.java:<span class="number">297</span>)</span><br><span class="line">    at sun.misc.URLClassPath.getResource(URLClassPath.java:<span class="number">167</span>)</span><br><span class="line">    at java.net.URLClassLoader$<span class="number">1</span>.run(URLClassLoader.java:<span class="number">192</span>)</span><br><span class="line">    at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">    at java.net.URLClassLoader.findClass(URLClassLoader.java:<span class="number">188</span>)</span><br><span class="line">    at sun.misc.Launcher$ExtClassLoader.findClass(Launcher.java:<span class="number">244</span>)</span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">319</span>)</span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">309</span>)</span><br><span class="line">    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:<span class="number">330</span>)</span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">254</span>)</span><br><span class="line">    at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:<span class="number">399</span>)</span><br><span class="line">    at java.lang.Class.forName0(Native Method)</span><br><span class="line">    at java.lang.Class.forName(Class.java:<span class="number">247</span>)</span><br><span class="line">    at java.lang.SystemClassLoaderAction.run(ClassLoader.java:<span class="number">2147</span>)</span><br><span class="line">    at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">    at java.lang.ClassLoader.initSystemClassLoader(ClassLoader.java:<span class="number">1404</span>)</span><br><span class="line">    at java.lang.ClassLoader.getSystemClassLoader(ClassLoader.java:<span class="number">1374</span>)</span><br><span class="line">Intentionally suppressing recursive invocation exception!</span><br><span class="line">java.lang.IllegalStateException: recursive invocation</span><br><span class="line">    at java.lang.ClassLoader.initSystemClassLoader(ClassLoader.java:<span class="number">1391</span>)</span><br><span class="line">    at java.lang.ClassLoader.getSystemClassLoader(ClassLoader.java:<span class="number">1374</span>)</span><br><span class="line">    at sun.security.jca.ProviderConfig$<span class="number">3</span>.run(ProviderConfig.java:<span class="number">231</span>)</span><br><span class="line">    at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">    at sun.security.jca.ProviderConfig.doLoadProvider(ProviderConfig.java:<span class="number">225</span>)</span><br><span class="line">    at sun.security.jca.ProviderConfig.getProvider(ProviderConfig.java:<span class="number">205</span>)</span><br><span class="line">    at sun.security.jca.ProviderList.getProvider(ProviderList.java:<span class="number">215</span>)</span><br><span class="line">    at sun.security.jca.ProviderList.getService(ProviderList.java:<span class="number">313</span>)</span><br><span class="line">    at sun.security.jca.GetInstance.getInstance(GetInstance.java:<span class="number">140</span>)</span><br><span class="line">    at java.security.cert.CertificateFactory.getInstance(CertificateFactory.java:<span class="number">148</span>)</span><br><span class="line">    at sun.security.pkcs.PKCS7.parseSignedData(PKCS7.java:<span class="number">244</span>)</span><br><span class="line">    at sun.security.pkcs.PKCS7.parse(PKCS7.java:<span class="number">141</span>)</span><br><span class="line">    at sun.security.pkcs.PKCS7.parse(PKCS7.java:<span class="number">110</span>)</span><br><span class="line">    at sun.security.pkcs.PKCS7.&lt;init&gt;(PKCS7.java:<span class="number">92</span>)</span><br><span class="line">    at sun.security.util.SignatureFileVerifier.&lt;init&gt;(SignatureFileVerifier.java:<span class="number">80</span>)</span><br><span class="line">    at java.util.jar.JarVerifier.processEntry(JarVerifier.java:<span class="number">256</span>)</span><br><span class="line">    at java.util.jar.JarVerifier.update(JarVerifier.java:<span class="number">188</span>)</span><br><span class="line">    at java.util.jar.JarFile.initializeVerifier(JarFile.java:<span class="number">321</span>)</span><br><span class="line">    at java.util.jar.JarFile.getInputStream(JarFile.java:<span class="number">386</span>)</span><br><span class="line">    at sun.misc.JarIndex.getJarIndex(JarIndex.java:<span class="number">99</span>)</span><br><span class="line">    at sun.misc.URLClassPath$JarLoader$<span class="number">1</span>.run(URLClassPath.java:<span class="number">606</span>)</span><br><span class="line">    at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">    at sun.misc.URLClassPath$JarLoader.ensureOpen(URLClassPath.java:<span class="number">597</span>)</span><br><span class="line">    at sun.misc.URLClassPath$JarLoader.&lt;init&gt;(URLClassPath.java:<span class="number">581</span>)</span><br><span class="line">    at sun.misc.URLClassPath$<span class="number">3</span>.run(URLClassPath.java:<span class="number">331</span>)</span><br><span class="line">    at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">    at sun.misc.URLClassPath.getLoader(URLClassPath.java:<span class="number">320</span>)</span><br><span class="line">    at sun.misc.URLClassPath.getLoader(URLClassPath.java:<span class="number">297</span>)</span><br><span class="line">    at sun.misc.URLClassPath.getResource(URLClassPath.java:<span class="number">167</span>)</span><br><span class="line">    at java.net.URLClassLoader$<span class="number">1</span>.run(URLClassLoader.java:<span class="number">192</span>)</span><br><span class="line">    at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">    at java.net.URLClassLoader.findClass(URLClassLoader.java:<span class="number">188</span>)</span><br><span class="line">    at sun.misc.Launcher$ExtClassLoader.findClass(Launcher.java:<span class="number">244</span>)</span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">319</span>)</span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">309</span>)</span><br><span class="line">    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:<span class="number">330</span>)</span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">254</span>)</span><br><span class="line">    at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:<span class="number">399</span>)</span><br><span class="line">    at java.lang.Class.forName0(Native Method)</span><br><span class="line">    at java.lang.Class.forName(Class.java:<span class="number">247</span>)</span><br><span class="line">    at java.lang.SystemClassLoaderAction.run(ClassLoader.java:<span class="number">2147</span>)</span><br><span class="line">    at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">    at java.lang.ClassLoader.initSystemClassLoader(ClassLoader.java:<span class="number">1404</span>)</span><br><span class="line">    at java.lang.ClassLoader.getSystemClassLoader(ClassLoader.java:<span class="number">1374</span>)</span><br><span class="line">Loading Class <span class="string">'com.journaldev.classloader.ClassLoaderTest'</span></span><br><span class="line">Loading Class using CCLoader</span><br><span class="line">Loading Class <span class="string">'java.lang.Object'</span></span><br><span class="line">Loading Class <span class="string">'java.lang.String'</span></span><br><span class="line">Loading Class <span class="string">'java.lang.System'</span></span><br><span class="line">Loading Class <span class="string">'java.lang.StringBuilder'</span></span><br><span class="line">Loading Class <span class="string">'java.util.HashMap'</span></span><br><span class="line">Loading Class <span class="string">'java.lang.Class'</span></span><br><span class="line">Loading Class <span class="string">'java.io.PrintStream'</span></span><br><span class="line">class loader for HashMap: null</span><br><span class="line">Loading Class <span class="string">'sun.net.spi.nameservice.dns.DNSNameService'</span></span><br><span class="line">class loader for DNSNameService: sun.misc.Launcher$ExtClassLoader@24480457</span><br><span class="line">class loader for this class: CCLoader@38503429</span><br><span class="line">Loading Class <span class="string">'com.mysql.jdbc.Blob'</span></span><br><span class="line">sun.misc.Launcher$AppClassLoader@<span class="number">2f</span>94ca6c</span><br><span class="line">Pankaj$</span><br></pre></td></tr></table></figure>
<p>这就是Java类加载器和java自定义类加载器的例子。</p>
<p><a href="https://www.journaldev.com/349/java-classloader" target="_blank" rel="noopener">原文</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java,class loader,类加载器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 8中求两日期时间差值的方法]]></title>
      <url>/2018/11/26/java-8-period-and-duration/</url>
      <content type="html"><![CDATA[<p>Java 7中对日期的差值的计算和本地日期时间不像C#方便，往往需要自己封闭实现一个或引用第三方jar包，至Java 8引进了<br><a id="more"></a></p>
<p>以下几个例子向您展示了如何使用Java 8 Duration ， Period 和 ChronoUnit 对象来找出时间之间的差值。</p>
<ol>
<li>Duration - 以秒和纳秒为单位计算两时间的差值。</li>
<li>Period - 以年，月，日为单位计算两时间的差值。</li>
<li>ChronoUnit - 以指定的单位计算两时间的差值。</li>
</ol>
<h2 id="1-Duration示例"><a href="#1-Duration示例" class="headerlink" title="1.Duration示例"></a>1.Duration示例</h2><p>java.time.Duration用于查找两个LocalDateTime之间的秒数差值</p>
<p>DurationExample.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sanfor.time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.Month;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.ChronoUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DurationExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Creating Durations</span></span><br><span class="line">        System.out.println(<span class="string">"--- Examples --- "</span>);</span><br><span class="line"></span><br><span class="line">        Duration oneHours = Duration.ofHours(<span class="number">1</span>);</span><br><span class="line">        System.out.println(oneHours.getSeconds() + <span class="string">" 秒"</span>);</span><br><span class="line"></span><br><span class="line">        Duration oneHours2 = Duration.of(<span class="number">1</span>, ChronoUnit.HOURS);</span><br><span class="line">        System.out.println(oneHours2.getSeconds() + <span class="string">" 秒"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Test Duration.between</span></span><br><span class="line">        System.out.println(<span class="string">"\n--- Duration.between --- "</span>);</span><br><span class="line"></span><br><span class="line">        LocalDateTime oldDate = LocalDateTime.of(<span class="number">2016</span>, Month.AUGUST, <span class="number">31</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">55</span>);</span><br><span class="line">        LocalDateTime newDate = LocalDateTime.of(<span class="number">2016</span>, Month.NOVEMBER, <span class="number">9</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">56</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(oldDate);</span><br><span class="line">        System.out.println(newDate);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//count seconds between dates</span></span><br><span class="line">        Duration duration = Duration.between(oldDate, newDate);</span><br><span class="line"></span><br><span class="line">        System.out.println(duration.getSeconds() + <span class="string">" 秒"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--- Examples ---</span><br><span class="line"><span class="number">3600</span> 秒    </span><br><span class="line"><span class="number">3600</span> 秒</span><br><span class="line"></span><br><span class="line">--- Duration.between ---</span><br><span class="line"><span class="number">2016</span>-<span class="number">08</span>-<span class="number">31</span>T10:<span class="number">20</span>:<span class="number">55</span></span><br><span class="line"><span class="number">2016</span>-<span class="number">11</span>-<span class="number">09</span>T10:<span class="number">21</span>:<span class="number">56</span></span><br><span class="line"><span class="number">6048061</span> 秒</span><br></pre></td></tr></table></figure></p>
<h2 id="2-Period示例"><a href="#2-Period示例" class="headerlink" title="2.Period示例"></a>2.Period示例</h2><p>java.time.Period用于找出两LocalDate之间年，月或日差值</p>
<p>PeriodExample.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sanfor.time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.Month;</span><br><span class="line"><span class="keyword">import</span> java.time.Period;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeriodExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--- Examples --- "</span>);</span><br><span class="line"></span><br><span class="line">        Period tenDays = Period.ofDays(<span class="number">10</span>);</span><br><span class="line">        System.out.println(tenDays.getDays()); <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line">        Period oneYearTwoMonthsThreeDays = Period.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(oneYearTwoMonthsThreeDays.getYears());   <span class="comment">//1</span></span><br><span class="line">        System.out.println(oneYearTwoMonthsThreeDays.getMonths());  <span class="comment">//2</span></span><br><span class="line">        System.out.println(oneYearTwoMonthsThreeDays.getDays());    <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\n--- Period.between --- "</span>);</span><br><span class="line">        LocalDate oldDate = LocalDate.of(<span class="number">1982</span>, Month.AUGUST, <span class="number">31</span>);</span><br><span class="line">        LocalDate newDate = LocalDate.of(<span class="number">2016</span>, Month.NOVEMBER, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(oldDate);</span><br><span class="line">        System.out.println(newDate);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// check period between dates</span></span><br><span class="line">        Period period = Period.between(oldDate, newDate);</span><br><span class="line"></span><br><span class="line">        System.out.print(period.getYears() + <span class="string">" 年,"</span>);</span><br><span class="line">        System.out.print(period.getMonths() + <span class="string">" 月,"</span>);</span><br><span class="line">        System.out.print(period.getDays() + <span class="string">" 日"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--- Examples ---</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line">--- Period.between ---</span><br><span class="line"><span class="number">1982</span>-<span class="number">08</span>-<span class="number">31</span></span><br><span class="line"><span class="number">2016</span>-<span class="number">11</span>-<span class="number">09</span></span><br><span class="line"><span class="number">34</span> 年,<span class="number">2</span> 月,<span class="number">9</span> 日</span><br></pre></td></tr></table></figure></p>
<ol>
<li>ChronoUnit示例</li>
</ol>
<p>或者，您可以使用java.time.temporal.ChronoUnit.{unit}.between查找时间或日期之间的任何单位的差值，请查看以下示例：</p>
<p>ChronoUnitExample.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sanfor.time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.Month;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.ChronoUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChronoUnitExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        LocalDateTime oldDate = LocalDateTime.of(<span class="number">1982</span>, Month.AUGUST, <span class="number">31</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">55</span>);</span><br><span class="line">        LocalDateTime newDate = LocalDateTime.of(<span class="number">2016</span>, Month.NOVEMBER, <span class="number">9</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">56</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(oldDate);</span><br><span class="line">        System.out.println(newDate);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// count between dates</span></span><br><span class="line">        <span class="keyword">long</span> years = ChronoUnit.YEARS.between(oldDate, newDate);</span><br><span class="line">        <span class="keyword">long</span> months = ChronoUnit.MONTHS.between(oldDate, newDate);</span><br><span class="line">        <span class="keyword">long</span> weeks = ChronoUnit.WEEKS.between(oldDate, newDate);</span><br><span class="line">        <span class="keyword">long</span> days = ChronoUnit.DAYS.between(oldDate, newDate);</span><br><span class="line">        <span class="keyword">long</span> hours = ChronoUnit.HOURS.between(oldDate, newDate);</span><br><span class="line">        <span class="keyword">long</span> minutes = ChronoUnit.MINUTES.between(oldDate, newDate);</span><br><span class="line">        <span class="keyword">long</span> seconds = ChronoUnit.SECONDS.between(oldDate, newDate);</span><br><span class="line">        <span class="keyword">long</span> milis = ChronoUnit.MILLIS.between(oldDate, newDate);</span><br><span class="line">        <span class="keyword">long</span> nano = ChronoUnit.NANOS.between(oldDate, newDate);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\n--- 总计 --- "</span>);</span><br><span class="line">        System.out.println(years + <span class="string">" 年"</span>);</span><br><span class="line">        System.out.println(months + <span class="string">" 月"</span>);</span><br><span class="line">        System.out.println(weeks + <span class="string">" 周"</span>);</span><br><span class="line">        System.out.println(days + <span class="string">" 日"</span>);</span><br><span class="line">        System.out.println(hours + <span class="string">" 时"</span>);</span><br><span class="line">        System.out.println(minutes + <span class="string">" 分"</span>);</span><br><span class="line">        System.out.println(seconds + <span class="string">" 秒"</span>);</span><br><span class="line">        System.out.println(milis + <span class="string">" 毫秒"</span>);</span><br><span class="line">        System.out.println(nano + <span class="string">" 纳秒"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1982</span>-<span class="number">08</span>-<span class="number">31</span>T10:<span class="number">20</span>:<span class="number">55</span></span><br><span class="line"><span class="number">2016</span>-<span class="number">11</span>-<span class="number">09</span>T10:<span class="number">21</span>:<span class="number">56</span></span><br><span class="line"></span><br><span class="line">--- 总计 ---</span><br><span class="line"><span class="number">34</span> 年</span><br><span class="line"><span class="number">410</span> 月</span><br><span class="line"><span class="number">1784</span> 周</span><br><span class="line"><span class="number">12489</span> 日</span><br><span class="line"><span class="number">299736</span> 时</span><br><span class="line"><span class="number">17984161</span> 分</span><br><span class="line"><span class="number">1079049661</span> 秒</span><br><span class="line"><span class="number">1079049661000</span> 毫秒</span><br><span class="line"><span class="number">1079049661000000000</span> 纳秒</span><br></pre></td></tr></table></figure></p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ol>
<li><a href="https://docs.oracle.com/javase/tutorial/datetime/iso/period.html" target="_blank" rel="noopener">Oracle教程 - Period和Duration</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html" target="_blank" rel="noopener">Duration Java文档</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/time/Period.html" target="_blank" rel="noopener">Period Java文档</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/time/temporal/ChronoUnit.html" target="_blank" rel="noopener">ChronoUnit Java文档</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> date,duration,period,ChronoUnit,java.time,java8 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hibernate面试问题]]></title>
      <url>/2018/11/26/hibernate-interview-questions/</url>
      <content type="html"><![CDATA[<p>Hibernate是Java应用程序中使用最广泛的ORM工具之一 用于许多的企业应用程序中的数据库操作。因此我决定写一篇关于Hibernate面试问题的文章，以便在面试前刷新你的相关知识。<br><a id="more"></a><br>无论你是新手还是老鸟，具有良好的知识或Hibernate的ORM工具有助于破解面试问题。在这里，我提供了重要的Hibernate面试问题和答案，以帮助您提高自己的知识面，并打动面试官 </p>
<p>最近我写了大量关于Hibernate的文章，其中大多数都包含完整的可下载项目 我会在需要时为他们提供参考，您可以通过他们来刷新您的知识。</p>
<h2 id="Hibernate面试问题"><a href="#Hibernate面试问题" class="headerlink" title="Hibernate面试问题"></a>Hibernate面试问题</h2><ol>
<li>什么是Hibernate框架？</li>
<li>什么是Java Persistence API（JPA）？</li>
<li>使用Hibernate Framework的主要优势是什么？</li>
<li>Hibernate相比JDBC有什么优势？</li>
<li>Hibernate框架的一些重要接口的名称是什么？</li>
<li>什么是Hibernate配置文件？</li>
<li>什么是Hibernate映射文件？</li>
<li>用于Hibernate映射的一些重要注解的名称是什么？</li>
<li>什么是Hibernate SessionFactory以及如何配置它？</li>
<li>Hibernate SessionFactory是线程安全的吗？</li>
<li>什么是Hibernate Session以及如何获取它？</li>
<li>Hibernate会话是线程安全的吗？</li>
<li>openSession和getCurrentSession有什么区别？</li>
<li>Hibernate Session get（）和load（）方法有什么区别？</li>
<li>什么是Hibernate缓存？ 解释Hibernate的第一级缓存？</li>
<li>如何使用EHCache配置Hibernate二级缓存？</li>
<li>实体bean的有些什么不同状态？</li>
<li>Hibernate Session merge（）用来做什么？</li>
<li>Hibernate的save（），saveOrUpdate（）和persist（）方法有什么区别？</li>
<li>如果我们在Entity bean中没有无参数构造函数会发生什么？</li>
<li>排序集合（sorted collection）和有序集合（ordered collection）之间有什么区别，哪一个更好？</li>
<li>Hibernate中的有哪些集合类型？</li>
<li>如何在Hibernate中实现连接？</li>
<li>为什么我们不应该让实体类final类？</li>
<li>什么是HQL？它有什么好处？</li>
<li>什么是Hibernate中的查询缓存？</li>
<li>我们可以在Hibernate中执行原生的sql查询吗？</li>
<li>原生SQL查询支持在Hibernate中的好处是什么？</li>
<li>什么是命名SQL查询？</li>
<li>命名SQL查询有什么好处？</li>
<li>Hibernate Criteria API有什么好处？</li>
<li>如何在日志文件中记录Hibernate生成的sql查询？</li>
<li>什么是Hibernate Proxy以及它如何在延迟加载中提供帮助？</li>
<li>如何在Hibernate中实现关联？</li>
<li>事务管理如何在Hibernate中工作？</li>
<li>什么是级联，什么是不同类型的级联？</li>
<li>如何将log4j日志集成到Hibernate应用程序中？</li>
<li>如何在Hibernate框架中使用应用程序服务器JNDI DataSource？</li>
<li>如何整合Hibernate和Spring框架？</li>
<li>什么是HibernateTemplate类？</li>
<li>如何将Hibernate与Servlet或Struts2 Web应用程序集成？</li>
<li>Hibernate框架中使用哪些设计模式？</li>
<li>Hibernate框架遵循的最佳实践是什么？</li>
<li>什么是Hibernate验证框架？</li>
<li>Hibernate Tools Eclipse插件的好处是什么？</li>
</ol>
<h2 id="Hibernate面试问题答"><a href="#Hibernate面试问题答" class="headerlink" title="Hibernate面试问题答"></a>Hibernate面试问题答</h2><h3 id="1-什么是Hibernate框架？"><a href="#1-什么是Hibernate框架？" class="headerlink" title="1. 什么是Hibernate框架？"></a>1. 什么是Hibernate框架？</h3><p>对象关系映射或ORM是将应用程序域模型对象映射到关系数据库表的编程技术 Hibernate是基于Java的ORM工具，它提供了将应用程序域对象映射到关系数据库表的框架，反之亦然。</p>
<p>Hibernate提供了Java Persistence API的引用实现，这使得它成为具有松耦合优势的ORM工具的绝佳选择，我们可以使用Hibernate Persistence API进行CRUD操作，Hibernate框架提供了使用JPA注解以及基于XML的配置将普通的旧java对象映射到传统数据库表的选项。</p>
<p>同样，Hibernate配置也很灵活，可以通过XML配置文件以及编程方式完成，有关Hibernate框架用法的快速概述，您可以学习Hibernate初学者教程 。</p>
<h3 id="2-什么是Java-Persistence-API（JPA）？"><a href="#2-什么是Java-Persistence-API（JPA）？" class="headerlink" title="2. 什么是Java Persistence API（JPA）？"></a>2. 什么是Java Persistence API（JPA）？</h3><p>Java Persistence API（JPA）提供了管理应用程序中的关系数据的规范，当前JPA 2.1版于2011年7月开始，名为JSR 338. 2013年5月22日，JPA 2.1被批准为最终版。</p>
<p>JPA规范是在javax.persistence包中，使用注解定义的，使用JPA注解有助于我们编写实现独立（无依赖）的代码。</p>
<h3 id="3-使用Hibernate-Framework的主要优势是什么？"><a href="#3-使用Hibernate-Framework的主要优势是什么？" class="headerlink" title="3. 使用Hibernate Framework的主要优势是什么？"></a>3. 使用Hibernate Framework的主要优势是什么？</h3><p>使用Hibernate框架的一些主要优势是：</p>
<ol>
<li>Hibernate消除了JDBC附带的所有重复代码并负责管理资源，因此我们可以专注于业务逻辑。</li>
<li>Hibernate框架提供对XML和JPA注解的支持，这使得我们的代码实现独立。</li>
<li>Hibernate提供了一种类似于SQL的强大查询语言（HQL），然而，HQL完全是面向对象的，理解继承，多态和关联等概念。</li>
<li>Hibernate是红帽社区（ Red Hat Community）的一个开源项目，在世界各地都有使用这使得它成为比其他人更好的选择，因为学习曲线很小，并且有大量在线文档和帮助可以在论坛中轻松获得。</li>
<li>Hibernate很容易与其他Java EE框架集成，它非常流行，因此Spring Framework提供了内置的支持，将Hibernate与Spring应用程序集成在一起。</li>
<li>Hibernate支持使用代理对象进行延迟初始化，并仅在需要时执行实际的数据库查询。</li>
<li>Hibernate缓存有助于我们获得更好的性能。</li>
<li>对于数据库供应商特定的功能，Hibernate是合适的，因为我们也可以执行本机sql查询。</li>
</ol>
<p>总体来说，Hibernate是目前ORM工具市场上的最佳选择，它包含了ORM工具所需的所有功能。</p>
<h3 id="4-Hibernate相比JDBC有什么优势？"><a href="#4-Hibernate相比JDBC有什么优势？" class="headerlink" title="4. Hibernate相比JDBC有什么优势？"></a>4. Hibernate相比JDBC有什么优势？</h3><p>Hibernate框架相对于JDBC的一些主要优势是：</p>
<ol>
<li>Hibernate移除了JDBC API附带的大量重复代码，代码看起来更清晰可读。</li>
<li>Hibernate支持继承，关联和集合 这些功能在JDBC API中不存在。</li>
<li>Hibernate隐式提供事务管理，事实上大部分查询不能在事务外执行。在JDBC API中，我们需要使用提交和回滚编写事务管理代码，阅读更多关于JDBC事务管理 。</li>
<li>JDBC API在检测到异常时，会抛出SQLException ，所以我们需要编写大量的try-catch块代码 大多数情况下，在业务管理中，每次JDBC调用调用多次都是冗余的，Hibernate包装JDBC异常并抛出<code>JDBCException</code>或<code>HibernateException</code>未检查异常，所以我们不需要编写代码来处理它，Hibernate内置的事务管理消除了try-catch块的使用。</li>
<li>Hibernate查询语言（HQL）更加面向对象，接近于Java编程语言，对于JDBC，我们需要编写原生的SQL查询。</li>
<li>Hibernate支持缓存，性能更好，JDBC查询不会被缓存，因此性能很低。<br>7 Hibernate提供了选项，我们也可以通过它来创建数据库表，因为JDBC表必须存在于数据库中。</li>
<li>Hibernate配置可以帮助我们使用JDBC连接以及连接池的JNDI DataSource，这是企业应用程序中非常重要的特性，但在JDBC API中完全缺失。</li>
<li>Hibernate支持JPA注解，所以代码与实现无关，可以用其他ORM工具轻松替换，JDBC代码与应用程序耦合非常紧密。</li>
</ol>
<h3 id="5-Hibernate框架的一些重要接口的名称是什么？"><a href="#5-Hibernate框架的一些重要接口的名称是什么？" class="headerlink" title="5. Hibernate框架的一些重要接口的名称是什么？"></a>5. Hibernate框架的一些重要接口的名称是什么？</h3><p>Hibernate框架的一些重要接口是：</p>
<ol>
<li><strong>SessionFactory（org.Hibernate.SessionFactory）</strong>：SessionFactory是单个数据库的编译映射的不可变线程安全的缓存 我们需要初始化SessionFactory，然后我们可以缓存并重用它，SessionFactory实例用于获取数据库操作的Session对象。</li>
<li><strong>Session（org.Hibernate.Session）</strong>：Session是一个单线程，暂存的对象，表示应用程序和持久性存储之间的会话，它封装了JDBC<code>java.sql.Connection</code>并作为<code>org.Hibernate.Transaction</code>的工厂工作 我们应该只在需要时才打开会话，并在我们完成使用后立即关闭会话。Session对象是java应用程序代码和Hibernate框架之间的接口，并提供CRUD操作的方法。</li>
<li><strong>Transaction（org.Hibernate.Transaction）</strong>：Transaction是应用程序用来指定原子工作单元的单线程，暂存对象，它从底层的JDBC或JTA(Java Transaction API)事务中抽象出应用程序，在某些情况下，org.Hibernate.Session可能跨越多个org.Hibernate.Transaction。</li>
</ol>
<h3 id="6-什么是Hibernate配置文件？"><a href="#6-什么是Hibernate配置文件？" class="headerlink" title="6. 什么是Hibernate配置文件？"></a>6. 什么是Hibernate配置文件？</h3><p>Hibernate配置文件包含特定于数据库的配置并用于初始化SessionFactory，我们在Hibernate配置xml文件中提供数据库凭证或JNDI资源信息。Hibernate配置文件的其他一些重要部分是Dialect信息，以便Hibernate知道数据库类型和映射文件或类的详细信息。</p>
<h3 id="7-什么是Hibernate映射文件？"><a href="#7-什么是Hibernate映射文件？" class="headerlink" title="7. 什么是Hibernate映射文件？"></a>7. 什么是Hibernate映射文件？</h3><p>Hibernate映射文件用于定义实体bean字段和数据库表列映射。我们知道JPA注解可用于映射，但有时在使用第三方类时，XML映射文件可能更方便，而不能使用注解。</p>
<h3 id="8-用于Hibernate映射的一些重要注解的名称是什么？"><a href="#8-用于Hibernate映射的一些重要注解的名称是什么？" class="headerlink" title="8. 用于Hibernate映射的一些重要注解的名称是什么？"></a>8. 用于Hibernate映射的一些重要注解的名称是什么？</h3><p>Hibernate支持JPA注解，并且在org.Hibernate.annotations包中有一些其他注解，使用的一些重要的JPA和Hibernate注解是：</p>
<ol>
<li><strong>javax.persistence.Entity</strong> ：与模型类一起使用来指定它们是实体bean。</li>
<li><strong>javax.persistence.Table</strong> ：与实体bean一起用于在数据库中定义相应的表名。</li>
<li><strong>javax.persistence.Access</strong> ：用于定义访问类型，字段或属性。默认值是field，如果你想让Hibernate使用getter/setter方法，那么你需要将它设置为属性。</li>
<li><strong>javax.persistence.Id</strong> ：用于在实体bean中定义主键。</li>
<li><strong>javax.persistence.EmbeddedId</strong> ：用于在实体bean中定义复合主键。</li>
<li><strong>javax.persistence.Column</strong> ：用于在数据库表中定义列名。</li>
<li><strong>javax.persistence.GeneratedValue</strong> ：用于定义用于生成主键的策略 与javax.persistence.GenerationType enum一起使用。</li>
<li><strong>javax.persistence.OneToOne</strong> ：用于定义两个实体bean之间的一对一映射 我们还有其他类似的注解，如OneToMany，ManyToOne和ManyToMany</li>
<li><strong>org.Hibernate.annotations.Cascade</strong> ：用于定义两个实体bean之间的级联，与映射一起使用。它与org.Hibernate.annotations.CascadeType一起使用</li>
<li><strong>javax.persistence.PrimaryKeyJoinColumn</strong> ：用于为外键定义属性。与org.Hibernate.annotations.GenericGenerator和org.Hibernate.annotations.Parameter</li>
</ol>
<p>以下是显示这些注解使用情况的两个类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.persistence.Access;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.AccessType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.OneToOne;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.Cascade;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"EMPLOYEE"</span>)</span><br><span class="line"><span class="meta">@Access</span>(value=AccessType.FIELD)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Id</span></span><br><span class="line">	<span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">	<span class="meta">@Column</span>(name = <span class="string">"emp_id"</span>)</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Column</span>(name = <span class="string">"emp_name"</span>)</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@OneToOne</span>(mappedBy = <span class="string">"employee"</span>)</span><br><span class="line">	<span class="meta">@Cascade</span>(value = org.hibernate.annotations.CascadeType.ALL)</span><br><span class="line">	<span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//getter setter methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.persistence.Access;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.AccessType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.OneToOne;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.PrimaryKeyJoinColumn;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.GenericGenerator;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.Parameter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"ADDRESS"</span>)</span><br><span class="line"><span class="meta">@Access</span>(value=AccessType.FIELD)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Id</span></span><br><span class="line">	<span class="meta">@Column</span>(name = <span class="string">"emp_id"</span>, unique = <span class="keyword">true</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">	<span class="meta">@GeneratedValue</span>(generator = <span class="string">"gen"</span>)</span><br><span class="line">	<span class="meta">@GenericGenerator</span>(name = <span class="string">"gen"</span>, strategy = <span class="string">"foreign"</span>, parameters = &#123; <span class="meta">@Parameter</span>(name = <span class="string">"property"</span>, value = <span class="string">"employee"</span>) &#125;)</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Column</span>(name = <span class="string">"address_line1"</span>)</span><br><span class="line">	<span class="keyword">private</span> String addressLine1;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@OneToOne</span></span><br><span class="line">	<span class="meta">@PrimaryKeyJoinColumn</span></span><br><span class="line">	<span class="keyword">private</span> Employee employee;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//getter setter methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="9-什么是Hibernate-SessionFactory以及如何配置它？"><a href="#9-什么是Hibernate-SessionFactory以及如何配置它？" class="headerlink" title="9. 什么是Hibernate SessionFactory以及如何配置它？"></a>9. 什么是Hibernate SessionFactory以及如何配置它？</h3><p>SessionFactory是用于获取Session对象的工厂类。SessionFactory负责读取Hibernate配置参数并连接到数据库并提供Session对象。通常应用程序具有一个SessionFactory实例，并且服务于客户端请求的线程从该工厂获取Session实例。</p>
<p>SessionFactory的内部状态是不可变的。一旦它被创建，这个内部状态就被设置了。这个内部状态包括关于对象/关系映射的所有元数据。</p>
<p>SessionFactory还提供获取Class元数据和Statistics实例以获取查询执行状态，二级缓存详细信息等的方法。</p>
<h3 id="10-Hibernate-SessionFactory是线程安全的吗？"><a href="#10-Hibernate-SessionFactory是线程安全的吗？" class="headerlink" title="10. Hibernate SessionFactory是线程安全的吗？"></a>10. Hibernate SessionFactory是线程安全的吗？</h3><p>SessionFactory的内部状态是不可变的，所以它是线程安全的。多个线程可以同时访问它以获取Session实例。</p>
<h3 id="11-什么是Hibernate-Session以及如何获取它？"><a href="#11-什么是Hibernate-Session以及如何获取它？" class="headerlink" title="11. 什么是Hibernate Session以及如何获取它？"></a>11. 什么是Hibernate Session以及如何获取它？</h3><p>Hibernate Session是java应用层和Hibernate之间的接口。这是用来执行数据库操作的核心接口。会话的生命周期受事务开始和结束的约束。</p>
<p>会话提供方法来执行持久对象的创建，读取，更新和删除操作。我们可以执行HQL查询，SQL本机查询并使用Session对象创建条件。</p>
<h3 id="12-Hibernate会话是线程安全的吗？"><a href="#12-Hibernate会话是线程安全的吗？" class="headerlink" title="12. Hibernate会话是线程安全的吗？"></a>12. Hibernate会话是线程安全的吗？</h3><p>Hibernate Session对象不是线程安全的，每个线程都应该获得它自己的会话实例，并在工作完成后关闭它。</p>
<h3 id="13-openSession和getCurrentSession有什么区别？"><a href="#13-openSession和getCurrentSession有什么区别？" class="headerlink" title="13. openSession和getCurrentSession有什么区别？"></a>13. openSession和getCurrentSession有什么区别？</h3><p>Hibernate SessionFactory getCurrentSession（）方法返回绑定到上下文的会话。但为了这个工作，我们需要在Hibernate配置文件中配置它。由于这个会话对象属于Hibernate上下文，所以我们不需要关闭它。一旦会话工厂关闭，此会话对象就会关闭。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Hibernate SessionFactory openSession（）方法总是打开一个新的会话。一旦我们完成了所有的数据库操作，我们应该关闭这个会话对象。我们应该在多线程环境中为每个请求打开一个新会话。</p>
<p>还有另一种方法openStatelessSession（）返回无状态会话，有关示例的更多详细信息，请阅读Hibernate openSession vs getCurrentSession。</p>
<h3 id="14-Hibernate-Session-get（）和load（）方法有什么区别？"><a href="#14-Hibernate-Session-get（）和load（）方法有什么区别？" class="headerlink" title="14. Hibernate Session get（）和load（）方法有什么区别？"></a>14. Hibernate Session get（）和load（）方法有什么区别？</h3><p>Hibernate会话有不同的方法来从数据库加载数据。get和load是最常用的方法，首先看起来它们很相似，但它们之间有一些差异。</p>
<ol>
<li>get（）在调用数据后立即加载数据，而load（）返回代理对象并仅在实际需要时才加载数据，所以load（）更好，因为它支持延迟加载。</li>
<li>由于load（）在没有找到数据时抛出异常，所以只有当我们知道数据存在时才应该使用它。（get方法返回null，但load若为null则报异常）</li>
<li>当我们想要确保数据库中存在数据时，我们应该使用get（）。</li>
</ol>
<p>有关差异的说明，请阅读Hibernate get vs load 。</p>
<h3 id="15-什么是Hibernate缓存？解释Hibernate的一级缓存？"><a href="#15-什么是Hibernate缓存？解释Hibernate的一级缓存？" class="headerlink" title="15. 什么是Hibernate缓存？解释Hibernate的一级缓存？"></a>15. 什么是Hibernate缓存？解释Hibernate的一级缓存？</h3><p>顾名思义，Hibernate缓存查询数据以使我们的应用程序更快。如果使用正确，Hibernate Cache可以在获得快速应用程序性能方面非常有用 缓存背后的想法是减少数据库查询的数量，从而减少应用程序的吞吐时间。</p>
<p>Hibernate一级缓存与Session对象相关联。Hibernate一级缓存默认启用，无法禁用它。然而，Hibernate提供了一些方法，我们可以通过这些方法从缓存中删除选定的对象或完全清除缓存。</p>
<p>在会话中缓存的任何对象对其他会话都不可见，并且在会话关闭时，所有缓存的对象也将丢失。</p>
<p>为了更好的解释，请阅读Hibernate一级缓存 。</p>
<h3 id="16-如何使用EHCache配置Hibernate二级缓存？"><a href="#16-如何使用EHCache配置Hibernate二级缓存？" class="headerlink" title="16. 如何使用EHCache配置Hibernate二级缓存？"></a>16. 如何使用EHCache配置Hibernate二级缓存？</h3><p>EHCache是​​利用Hibernate二级缓存的最佳选择。在Hibernate应用程序中启用EHCache需要执行以下步骤。</p>
<p>在Maven项目中添加Hibernate-ehcache依赖项，如果它不是maven，则添加相应的jar。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在Hibernate配置文件中添加以下属性。<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.region.factory_class"</span>&gt;</span>org.hibernate.cache.ehcache.EhCacheRegionFactory<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">         </span><br><span class="line"><span class="comment">&lt;!-- For singleton factory --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name="hibernate.cache.region.factory_class"&gt;org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory&lt;/property&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">          </span><br><span class="line"><span class="comment">&lt;!-- enable second level cache and query cache --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.use_second_level_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.use_query_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"net.sf.ehcache.configurationResourceName"</span>&gt;</span>/myehcache.xml<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>创建EHCache配置文件，示例文件myehcache.xml如下所示。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"ehcache.xsd"</span> <span class="attr">updateCheck</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">monitoring</span>=<span class="string">"autodetect"</span> <span class="attr">dynamicConfig</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir/ehcache"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span> <span class="attr">maxEntriesLocalHeap</span>=<span class="string">"10000"</span> <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span> <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span> <span class="attr">diskSpoolBufferSizeMB</span>=<span class="string">"30"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxEntriesLocalDisk</span>=<span class="string">"10000000"</span> <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span> <span class="attr">statistics</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">persistence</span> <span class="attr">strategy</span>=<span class="string">"localTempSwap"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"employee"</span> <span class="attr">maxEntriesLocalHeap</span>=<span class="string">"10000"</span> <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"5"</span> <span class="attr">timeToLiveSeconds</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">persistence</span> <span class="attr">strategy</span>=<span class="string">"localTempSwap"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"org.hibernate.cache.internal.StandardQueryCache"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxEntriesLocalHeap</span>=<span class="string">"5"</span> <span class="attr">eternal</span>=<span class="string">"false"</span> <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">persistence</span> <span class="attr">strategy</span>=<span class="string">"localTempSwap"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"org.hibernate.cache.spi.UpdateTimestampsCache"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxEntriesLocalHeap</span>=<span class="string">"5000"</span> <span class="attr">eternal</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">persistence</span> <span class="attr">strategy</span>=<span class="string">"localTempSwap"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>使用@Cache注解和缓存策略注解实体bean 例如，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hibernate.annotations.Cache;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.CacheConcurrencyStrategy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"ADDRESS"</span>)</span><br><span class="line"><span class="meta">@Cache</span>(usage=CacheConcurrencyStrategy.READ_ONLY, region=<span class="string">"employee"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>就是这样，我们完成了 Hibernate将使用EHCache进行二级缓存，请阅读Hibernate EHCache示例以获得完整的解释示例。</p>
<h3 id="17-实体bean的有些什么不同状态？"><a href="#17-实体bean的有些什么不同状态？" class="headerlink" title="17. 实体bean的有些什么不同状态？"></a>17. 实体bean的有些什么不同状态？</h3><p>实体bean实例可以以下三种状态的其中之一。</p>
<ol>
<li><strong>瞬时态（Transient）</strong> ：当对象永远不会持久或与任何会话无关联时，它处于瞬态状态。通过调用save（），persist（）或saveOrUpdate（），可以使瞬态实例持久化 通过调用delete（）可以使持久性实例成为暂态。</li>
<li><strong>持久态（Persistent）</strong> ：当对象与唯一会话关联时，它处于持久状态。由get（）或load（）方法返回的任何实例都是持久的。</li>
<li><strong>游离态（Detached）</strong> ：当一个对象先前是持久性的，但没有与任何会话相关联时，它处于游离状态。游离的实例可以通过调用update（），saveOrUpdate（），lock（）或replicate（）来持久化。通过调用merge（），瞬时或游离实例的状态也可以作为新的持久实例持久化。</li>
</ol>
<h3 id="18-Hibernate-Session-merge（）用来做什么？"><a href="#18-Hibernate-Session-merge（）用来做什么？" class="headerlink" title="18. Hibernate Session merge（）用来做什么？"></a>18. Hibernate Session merge（）用来做什么？</h3><p>Hibernate合并可以用来更新现有的值，但是这种方法从传递的实体对象中创建一个副本并返回它。返回的对象是持久化上下文的一部分，并对任何更改进行跟踪，传递的对象不被跟踪。 示例程序，阅读Hibernate合并 。</p>
<h3 id="19-Hibernate的save（），saveOrUpdate（）和persist（）方法有什么区别？"><a href="#19-Hibernate的save（），saveOrUpdate（）和persist（）方法有什么区别？" class="headerlink" title="19. Hibernate的save（），saveOrUpdate（）和persist（）方法有什么区别？"></a>19. Hibernate的save（），saveOrUpdate（）和persist（）方法有什么区别？</h3><p>Hibernate保存可用于将实体保存到数据库。save（）的问题是它可以在没有事务的情况下被调用，如果我们有映射实体，那么只有主对象被保存，导致数据不一致。另外保存立即返回生成的ID。</p>
<p>Hibernate persist与事务保存类似。我觉得它比保存更好，因为我们不能在事务边界外使用它，所以所有的对象映射都被保留下来。此外，persist不会立即返回生成的ID，因此数据持久化发生在需要的时候。</p>
<p>根据提供的数据将Hibernate saveOrUpdate结果插入或更新查询。如果数据存在于数据库中，则执行更新查询。我们也可以在没有事务的情况下使用saveOrUpdate（），但如果会话不刷新，您将再次遇到映射对象未保存的问题。例如使用这些方法，请阅读Hibernate save vs persist 。</p>
<h3 id="20-如果我们在Entity-bean中没有无参数构造函数会发生什么？"><a href="#20-如果我们在Entity-bean中没有无参数构造函数会发生什么？" class="headerlink" title="20. 如果我们在Entity bean中没有无参数构造函数会发生什么？"></a>20. 如果我们在Entity bean中没有无参数构造函数会发生什么？</h3><p>Hibernate使用Reflection API来创建实体bean的实例，通常在调用get（）或load（）方法时 方法Class.newInstance()用于此，它需要无参数构造函数。因此，如果你在实体bean中没有无参数构造函数，Hibernate将无法实例化它，你将得到HibernateException 。</p>
<h3 id="21-排序集合（sorted-collection）和有序集合（ordered-collection）之间有什么区别，哪一个更好？"><a href="#21-排序集合（sorted-collection）和有序集合（ordered-collection）之间有什么区别，哪一个更好？" class="headerlink" title="21. 排序集合（sorted collection）和有序集合（ordered collection）之间有什么区别，哪一个更好？"></a>21. 排序集合（sorted collection）和有序集合（ordered collection）之间有什么区别，哪一个更好？</h3><p>当我们使用Collection API排序算法对一个集合进行排序时，它被称为排序集合。对于小型集合来说，它没有多少开销，但对于较大的集合，它可能导致性能下降和OutOfMemory错误。另外，实体bean应该实现<code>Comparable</code>或<code>Comparator</code>接口，以便在Java对象列表排序时进行更多的工作。</p>
<p>如果我们使用Hibernate框架从数据库加载集合数据，我们可以使用它的Criteria API来使用“order by”子句来获得有序列表。下面的代码片段显示了如何获取它。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Employee&gt; empList = session.createCriteria(Employee.class)</span><br><span class="line">						.addOrder(Order.desc(<span class="string">"id"</span>)).list();</span><br></pre></td></tr></table></figure>
<p>有序列表比排序列表要好，因为实际的排序是在数据库级完成的，速度很快并且不会导致内存问题。</p>
<h3 id="22-Hibernate中的有哪些集合类型？"><a href="#22-Hibernate中的有哪些集合类型？" class="headerlink" title="22. Hibernate中的有哪些集合类型？"></a>22. Hibernate中的有哪些集合类型？</h3><p>Hibernate中有五种集合类型用于一对多关系映射。</p>
<ol>
<li>Bag</li>
<li>Set</li>
<li>List</li>
<li>Array</li>
<li>Map</li>
</ol>
<h3 id="23-如何在Hibernate中实现连接？"><a href="#23-如何在Hibernate中实现连接？" class="headerlink" title="23. 如何在Hibernate中实现连接？"></a>23. 如何在Hibernate中实现连接？</h3><p>有多种方法可以在Hibernate中实现连接。</p>
<ol>
<li>使用诸如一对一，一对多等关联。</li>
<li>在HQL查询中使用JOIN。还有另一种形式“联合提取”来同时加载相关数据，没有延迟加载。</li>
<li>我们可以触发原生的sql查询并使用join关键字。</li>
</ol>
<h3 id="24-为什么我们不应该让实体类final类？"><a href="#24-为什么我们不应该让实体类final类？" class="headerlink" title="24. 为什么我们不应该让实体类final类？"></a>24. 为什么我们不应该让实体类final类？</h3><p>只有在需要的时候，Hibernate才会使用代理类来延迟加载数据。这是通过扩展实体bean来完成的，如果实体bean是final类，那么延迟加载将不可能，因此性能低下。</p>
<h3 id="25-什么是HQL？它有什么好处？"><a href="#25-什么是HQL？它有什么好处？" class="headerlink" title="25. 什么是HQL？它有什么好处？"></a>25. 什么是HQL？它有什么好处？</h3><p>Hibernate Framework带有一个强大的面向对象的查询语言–Hibernate Query Language（HQL）。它与SQL很相似，除了我们使用对象而不是表名，这使得它更接近于面向对象的编程。</p>
<p>除java类和变量名之外，Hibernate查询语言不区分大小写的。因此，SeLeCT与sELEct与SELECT相同，但com.lexiangmiao.model.Employee与com.lexiangmiao.model.EMPLOYEE不同。</p>
<p>HQL查询被缓存，但我们应尽可能避免它，否则我们将不得不照顾关联。 然而，由于面向对象的方法，它是比原生SQL查询更好的选择。 阅读HQL示例 。</p>
<h3 id="26-什么是Hibernate中的查询缓存？"><a href="#26-什么是Hibernate中的查询缓存？" class="headerlink" title="26. 什么是Hibernate中的查询缓存？"></a>26. 什么是Hibernate中的查询缓存？</h3><p>Hibernate为查询结果集实现了一个缓存区域，该查询结果集与Hibernate二级缓存紧密集成。</p>
<p>这是一个可选功能，需要额外的代码步骤。这只对使用相同参数频繁运行的查询很有用。首先我们需要在Hibernate配置文件中配置下面的属性。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.use_query_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在代码中，我们需要使用Query的setCacheable（true）方法，快速示例如下所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Query query = session.createQuery(<span class="string">"from Employee"</span>);</span><br><span class="line">query.setCacheable(<span class="keyword">true</span>);</span><br><span class="line">query.setCacheRegion(<span class="string">"ALL_EMP"</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="27-我们可以在Hibernate中执行原生的sql查询吗？"><a href="#27-我们可以在Hibernate中执行原生的sql查询吗？" class="headerlink" title="27. 我们可以在Hibernate中执行原生的sql查询吗？"></a>27. 我们可以在Hibernate中执行原生的sql查询吗？</h3><p>Hibernate提供了通过使用SQLQuery对象来执行原生SQL查询的选项。</p>
<p>然而，对于正常情况来说，它不是推荐的方法，因为我们失去了与Hibernate关联和Hibernate一级缓存相关的好处。阅读Hibernate Native SQL查询示例。</p>
<h3 id="28-原生SQL查询支持在Hibernate中的好处是什么？"><a href="#28-原生SQL查询支持在Hibernate中的好处是什么？" class="headerlink" title="28. 原生SQL查询支持在Hibernate中的好处是什么？"></a>28. 原生SQL查询支持在Hibernate中的好处是什么？</h3><p>当我们想要执行Hibernate API不支持的特定于数据库的查询（如查询提示或Oracle数据库中的CONNECT关键字）时，原生SQL Query便于使用。</p>
<h3 id="29-什么是命名SQL查询？"><a href="#29-什么是命名SQL查询？" class="headerlink" title="29. 什么是命名SQL查询？"></a>29. 什么是命名SQL查询？</h3><p>Hibernate提供了可以在中心位置定义的命名查询（ Named Query），并在代码中的任何地方使用它们。我们可以为HQL和Native SQL创建命名查询。</p>
<p>Hibernate命名查询可以在Hibernate映射文件中定义，也可以通过使用JPA注角@NamedQuery和@NamedNativeQuery来定义。</p>
<h3 id="30-命名SQL查询有什么好处？"><a href="#30-命名SQL查询有什么好处？" class="headerlink" title="30. 命名SQL查询有什么好处？"></a>30. 命名SQL查询有什么好处？</h3><ol>
<li>Hibernate命名查询（ Named Query）帮助我们将查询分组在一个中心位置（便于管理），而不是让它们遍布整个代码。 </li>
<li>在创建Hibernate会话工厂时检查Hibernate命名查询语法，从而在命名查询出现任何错误的情况下使应用程序快速失败。（便于查错） </li>
<li>Hibernate命名查询是全局的，意味着一旦定义它可以在整个应用程序中使用。 </li>
</ol>
<p>然而，命名查询的一个主要缺点是很难调试，因为我们需要找出它的定义位置。</p>
<h3 id="31-Hibernate-Criteria-API有什么好处？"><a href="#31-Hibernate-Criteria-API有什么好处？" class="headerlink" title="31. Hibernate Criteria API有什么好处？"></a>31. Hibernate Criteria API有什么好处？</h3><p>Hibernate提供的Criteria API更加面向对象，用于查询数据库和获取结果。我们不能使用Criteria来运行更新或删除查询或任何DDL语句。它仅用于使用更多面向对象的方法从数据库中获取结果。</p>
<p>Criteria API的一些常见用法是：</p>
<ol>
<li>Criteria API提供了Projection，我们可以使用sum（），min（），max（）等集合函数。</li>
<li>Criteria API可以与ProjectionList一起使用来仅提取选定的列。</li>
<li>Criteria API可以通过连接多个表来用于连接查询，有用的方法是createAlias（），setFetchMode（）和setProjection（）</li>
<li>Criteria API可用于获取带有条件的结果，有用的方法是add（），我们可以在其中添加限制条件。</li>
<li>Criteria API提供了可用于排序结果的addOrder（）方法。</li>
</ol>
<p>在Hibernate标准示例中学习一些快速示例。</p>
<h3 id="32-如何在日志文件中记录Hibernate生成的sql查询？"><a href="#32-如何在日志文件中记录Hibernate生成的sql查询？" class="headerlink" title="32. 如何在日志文件中记录Hibernate生成的sql查询？"></a>32. 如何在日志文件中记录Hibernate生成的sql查询？</h3><p>我们可以在Hibernate配置下面设置属性来记录SQL查询。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>但是，我们应该只在开发或测试环境中使用它，并在生产环境中关闭它。</p>
<h3 id="33-什么是Hibernate-Proxy以及它如何在延迟加载中提供帮助？"><a href="#33-什么是Hibernate-Proxy以及它如何在延迟加载中提供帮助？" class="headerlink" title="33. 什么是Hibernate Proxy以及它如何在延迟加载中提供帮助？"></a>33. 什么是Hibernate Proxy以及它如何在延迟加载中提供帮助？</h3><p>Hibernate使用代理对象来支持延迟加载。基本上，当你从表中加载数据时，Hibernate不加载所有的映射对象。只要通过getter方法引用子对象或查找对象，如果链接的实体不在会话缓存中，则代理代码将转到数据库并加载链接的对象。它使用javassist来有效地动态生成实体对象的子类实现。</p>
<h3 id="34-如何在Hibernate中实现关联？"><a href="#34-如何在Hibernate中实现关联？" class="headerlink" title="34. 如何在Hibernate中实现关联？"></a>34. 如何在Hibernate中实现关联？</h3><p>我们可以在Hibernate中轻松实现一对一，一对多和多对多的关联。 它可以使用JPA注解以及基于XML的配置来完成 为了更好地理解，你应该阅读以下教程。</p>
<ol>
<li>Hibernate一对一映射</li>
<li>Hibernate一对多映射</li>
<li>Hibernate多对多映射</li>
</ol>
<h3 id="35-事务管理如何在Hibernate中工作？"><a href="#35-事务管理如何在Hibernate中工作？" class="headerlink" title="35. 事务管理如何在Hibernate中工作？"></a>35. 事务管理如何在Hibernate中工作？</h3><p>在Hibernate中事务管理非常简单，因为大多数操作在事务之外是不允许的。所以在从SessionFactory获得会话之后，我们可以调用会话<code>beginTransaction()</code>来启动事务。此方法返回事务引用，我们稍后可以使用该引用来提交或回滚事务。</p>
<p>总的来说，Hibernate事务管理比JDBC事务管理要好，因为我们不需要依赖异常来回滚。<strong>会话方法引发的任何异常都会自动回滚事务</strong>。</p>
<h3 id="36-什么是级联，什么是不同类型的级联？"><a href="#36-什么是级联，什么是不同类型的级联？" class="headerlink" title="36. 什么是级联，什么是不同类型的级联？"></a>36. 什么是级联，什么是不同类型的级联？</h3><p>当我们有实体之间的关系时，我们需要定义不同的操作将如何影响另一个实体。这是通过级联完成的，它有不同的类型。</p>
<p>以下是在主要和次要实体之间应用级联的简单示例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> org.hibernate.annotations.Cascade;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"EMPLOYEE"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OneToOne</span>(mappedBy = <span class="string">"employee"</span>)</span><br><span class="line"><span class="meta">@Cascade</span>(value = org.hibernate.annotations.CascadeType.ALL)</span><br><span class="line"><span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>请注意，Hibernate CascadeType枚举常量与JPA <code>javax.persistence.CascadeType</code>稍有不同，因此我们需要使用Hibernate。CascadeType和Cascade批注进行映射，如上例所示 </p>
<p>CascadeType枚举中定义的常用级联类型有：</p>
<ol>
<li>None：没有级联，它不是一种类型，但是当我们没有定义任何级联时，父级没有任何操作会影响孩子。</li>
<li>ALL：级联save, delete, update, evict, lock, replicate, merge, persist。基本上一切。</li>
<li>SAVE_UPDATE：级联保存和更新，仅在Hibernate时可用。</li>
<li>DELETE：仅在Hibernate中对应于Hibernate本机DELETE操作。</li>
<li>DETATCH，MERGE，PERSIST，REFRESH和REMOVE - 此类类似的操作</li>
<li>LOCK：对应于Hibernate本地LOCK动作。</li>
<li>REPLICATE：对应于Hibernate本地REPLICATE操作。</li>
</ol>
<h3 id="37-如何将log4j日志集成到Hibernate应用程序中？"><a href="#37-如何将log4j日志集成到Hibernate应用程序中？" class="headerlink" title="37. 如何将log4j日志集成到Hibernate应用程序中？"></a>37. 如何将log4j日志集成到Hibernate应用程序中？</h3><p>Hibernate 4使用JBoss日志记录，而不是早期版本中使用的slf4j。对于log4j配置，我们需要遵循以下步骤。</p>
<ol>
<li>为maven项目添加log4j依赖项，如果不是maven，则添加相应的jar文件。</li>
<li>创建log4j.xml配置文件或log4j.properties文件并将其保存在类路径中。无论您想要什么，您都可以保留文件名，因为我们将在下一步中加载它。</li>
<li>对于独立项目，使用静态块使用DOMConfigurator或PropertyConfigurator配置log4j。对于Web应用程序，您可以使用ServletContextListener来配置它。</li>
</ol>
<p>就是这样，我们的设置已经准备就绪。在java类中创建org.apache.log4j.Logger实例并开始记录。对于完整的示例代码，您应该参阅Hibernate log4j示例和Servlet log4j示例。</p>
<h3 id="38-如何在Hibernate框架中使用应用程序服务器JNDI-DataSource？"><a href="#38-如何在Hibernate框架中使用应用程序服务器JNDI-DataSource？" class="headerlink" title="38. 如何在Hibernate框架中使用应用程序服务器JNDI DataSource？"></a>38. 如何在Hibernate框架中使用应用程序服务器JNDI DataSource？</h3><p>对于Web应用程序，最好允许servlet容器管理连接池。这就是我们为DataSource定义JNDI资源的原因，并且我们可以在Web应用程序中使用它 在Hibernate中使用非常简单，我们需要的是删除所有数据库特定的属性，并使用下面的属性来提供JNDI数据源名称。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.datasource"</span>&gt;</span>java:comp/env/jdbc/MyLocalDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>有关完整示例，请参阅Hibernate JNDI数据源示例 。</p>
<h3 id="39-如何整合Hibernate和Spring框架？"><a href="#39-如何整合Hibernate和Spring框架？" class="headerlink" title="39. 如何整合Hibernate和Spring框架？"></a>39. 如何整合Hibernate和Spring框架？</h3><p>Spring是最常用的Java EE框架之一，Hibernate是最流行的ORM框架。这就是Spring Hibernate组合在企业应用程序中被广泛使用的原因。Spring最好的部分就是它提供了Spring ORM模块对Hibernate的开箱即用集成支持。将Spring和Hibernate框架集成在一起需要执行以下步骤。</p>
<ol>
<li>添加Hibernate-entitymanager，Hibernate-core和spring-orm依赖项。</li>
<li>为数据库操作创建模型类和相应的DAO实现。 请注意，DAO类将使用将由Spring Bean配置注入的SessionFactory。</li>
<li>如果您使用Hibernate 3，则需要在Spring Bean配置文件中配置org.springframework.orm.Hibernate3.LocalSessionFactoryBean或org.springframework.orm.Hibernate3.annotation.AnnotationSessionFactoryBean。对于Hibernate 4，应该配置单个类org.springframework.orm.Hibernate4.LocalSessionFactoryBean 。</li>
<li>请注意，我们不需要使用Hibernate事务管理，我们可以使用@Transactional注解将它留给Spring声明式事务管理。</li>
</ol>
<p>有关完整的示例，请参阅Spring Hibernate集成和Spring MVC Hibernate集成 。</p>
<h3 id="40-什么是HibernateTemplate类？"><a href="#40-什么是HibernateTemplate类？" class="headerlink" title="40. 什么是HibernateTemplate类？"></a>40. 什么是HibernateTemplate类？</h3><p>当Spring和Hibernate集成开始时，Spring ORM提供了两个辅助类HibernateDaoSupport和HibernateTemplate。使用它们的原因是从Hibernate获取Session并获得Spring事务管理的好处。 但是从Hibernate 3.0.1开始，我们可以使用SessionFactory getCurrentSession（）方法获取当前会话并使用它来获得Spring事务管理的好处。如果你通过上面的例子，你会看到它是多么容易，这就是为什么我们不应该再使用这些类。</p>
<p>HibernateTemplate另一个好处是异常转换，但可以通过在服务类中使用@Repository注解轻松实现，如上面的spring mvc示例所示。这是判断你的知识的一个诡计问题，以及你是否知道最近的事态发展。</p>
<h3 id="41-如何将Hibernate与Servlet或Struts2-Web应用程序集成？"><a href="#41-如何将Hibernate与Servlet或Struts2-Web应用程序集成？" class="headerlink" title="41. 如何将Hibernate与Servlet或Struts2 Web应用程序集成？"></a>41. 如何将Hibernate与Servlet或Struts2 Web应用程序集成？</h3><p>Hibernate与Servlet或Struts2的集成需要使用ServletContextListener完成，在Hibernate Struts2集成示例中可以找到完整的示例。</p>
<h3 id="42-Hibernate框架中使用哪些设计模式？"><a href="#42-Hibernate框架中使用哪些设计模式？" class="headerlink" title="42. Hibernate框架中使用哪些设计模式？"></a>42. Hibernate框架中使用哪些设计模式？</h3><p>Hibernate框架中使用的一些设计模式是：</p>
<p>领域模型（Domain Model）模式 - 包含行为和数据的领域的对象模型。<br>数据映射器（Data Mapper） - 一层映射器，它可以在对象和数据库之间移动数据，同时保持对象和映射器本身的独立性。<br>代理模式用于延迟加载<br>SessionFactory中的工厂模式</p>
<h3 id="43-Hibernate框架遵循的最佳实践是什么？"><a href="#43-Hibernate框架遵循的最佳实践是什么？" class="headerlink" title="43. Hibernate框架遵循的最佳实践是什么？"></a>43. Hibernate框架遵循的最佳实践是什么？</h3><p>在Hibernate中遵循的一些最佳实践是：</p>
<ol>
<li>总是检查主键字段的访问权限，如果它是在数据库层生成的，那么你不应该为此设置setter。</li>
<li>默认情况下，Hibernate直接设置字段值，而不使用setter 所以如果你想让Hibernate使用setter，那么确保正确的访问被定义为<code>@Access(value=AccessType.PROPERTY)</code> 。</li>
<li>如果访问类型是属性，请确保注解与getter方法而不是setter方法一起使用 避免在提交和获取方法上混合使用注解。</li>
<li>仅当使用原生SQL查询是在无法使用HQL完成时（例如使用数据库特定功能），才使用原生SQL查询。</li>
<li>如果您必须对集合进行排序，请使用有序列表，而不要使用Collection API进行排序。</li>
<li>明智地使用命名查询，将其保存在一个地方以便于调试 仅将它们用于常用查询 对于特定于实体的查询，您可以将它们保留在实体bean本身中。</li>
<li>对于Web应用程序，总是尝试使用JNDI DataSource而不是配置来在Hibernate中创建连接。</li>
<li>避免多对多关系，可以使用双向一对多和多对一关系轻松实现。</li>
<li>对于集合，尝试使用Lists, maps and sets。避免使用array，因为你没有得到延迟加载的好处。</li>
<li>不要将异常视为可恢复，回滚事务并关闭会话。如果你不这样做，Hibernate不能保证内存状态准确地表示持久状态。</li>
<li>首选DAO模式来暴露可用于实体bean的不同方法。</li>
<li>倾向于关联的延迟抓取。</li>
</ol>
<h3 id="44-什么是Hibernate验证框架？"><a href="#44-什么是Hibernate验证框架？" class="headerlink" title="44. 什么是Hibernate验证框架？"></a>44. 什么是Hibernate验证框架？</h3><p>数据验证是任何应用程序的组成部分。您将在表示层使用Javascript找到数据验证，然后在处理它之前在服务器端代码，在持久化之前也要进行数据验证，以确保它遵循正确的格式。</p>
<p>验证是一项横切任务，所以我们应该尽量保持它与业务逻辑的区分。这就是为什么JSR303和JSR349提供通过使用注解来验证bean的规范。Hibernate Validator提供了这两个bean验证规范的参考实现。在Hibernate验证示例中阅读更多内容。</p>
<h3 id="45-Hibernate-Tools-Eclipse插件的好处是什么？"><a href="#45-Hibernate-Tools-Eclipse插件的好处是什么？" class="headerlink" title="45. Hibernate Tools Eclipse插件的好处是什么？"></a>45. Hibernate Tools Eclipse插件的好处是什么？</h3><p>Hibernate Tools插件可以帮助我们轻松编写Hibernate配置和映射文件。主要的好处是内容帮助可以帮助我们使用属性或xml标签。它还会根据Hibernate DTD文件来验证它们，所以我们事先知道任何错误。学习如何安装和使用Hibernate Tools Eclipse插件。</p>
<p>这就是Hibernate面试的问题和答案，我希望它能帮助你作为新人或有经验的人面试。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ol>
<li><a href="https://www.journaldev.com/3633/hibernate-interview-questions-and-answers?utm_source=website&amp;utm_medium=menubar&amp;utm_campaign=Top-Menu-Bar" target="_blank" rel="noopener">原文</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> db </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hibernate,ORM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[导出csv文件注意事项]]></title>
      <url>/2018/11/26/export-svc-file/</url>
      <content type="html"><![CDATA[<p>web应用系统开发或多或少的会涉及到导出csv文件，用于excel打开，本文件总结了一些注意事项和解决方法。</p>
<a id="more"></a>
<h2 id="1-列与列这间逗号分隔"><a href="#1-列与列这间逗号分隔" class="headerlink" title="1. 列与列这间逗号分隔"></a>1. 列与列这间逗号分隔</h2><p>逗号必须为半角逗号的形式</p>
<h2 id="2-第一行标题列"><a href="#2-第一行标题列" class="headerlink" title="2. 第一行标题列"></a>2. 第一行标题列</h2><h2 id="3-列值放在双引号内"><a href="#3-列值放在双引号内" class="headerlink" title="3. 列值放在双引号内"></a>3. 列值放在双引号内</h2><p>避免因列值存在逗号而出现错行</p>
<h2 id="4-设置ContentType为”application-csv-charset-UTF-8”"><a href="#4-设置ContentType为”application-csv-charset-UTF-8”" class="headerlink" title="4. 设置ContentType为”application/csv; charset=UTF-8”"></a>4. 设置ContentType为”application/csv; charset=UTF-8”</h2><p>非英文环境必须设置为UTF-8</p>
<h2 id="5-设置Header的”Content-Disposition”为”attachment-filename-ctripCancelOrders-csv”"><a href="#5-设置Header的”Content-Disposition”为”attachment-filename-ctripCancelOrders-csv”" class="headerlink" title="5. 设置Header的”Content-Disposition”为”attachment; filename=ctripCancelOrders.csv”"></a>5. 设置Header的”Content-Disposition”为”attachment; filename=ctripCancelOrders.csv”</h2><h2 id="6-不同应用环境中需要考虑写入编码"><a href="#6-不同应用环境中需要考虑写入编码" class="headerlink" title="6. 不同应用环境中需要考虑写入编码"></a>6. 不同应用环境中需要考虑写入编码</h2><p>例如在java中需要加入以下特殊输入，才能让excel打开时没有乱码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outputStream.write(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">byte</span>[] &#123; (<span class="keyword">byte</span>) <span class="number">0xEF</span>, (<span class="keyword">byte</span>) <span class="number">0xBB</span>,(<span class="keyword">byte</span>) <span class="number">0xBF</span> &#125;));</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> others </category>
            
        </categories>
        
        
        <tags>
            
            <tag> csv,excel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何在CentOS上搭建迷你版的java应用]]></title>
      <url>/2018/11/26/build-mini-java-app-env-on-centos/</url>
      <content type="html"><![CDATA[<p>开发好一个基本spring-boot和nodejs应用后，如何使用最少的工具在纯净版的CentOS上搭建运行环境。本文提供了一个可行的方案。</p>
<a id="more"></a>
<h2 id="运行环境需求"><a href="#运行环境需求" class="headerlink" title="运行环境需求"></a>运行环境需求</h2><ul>
<li>后端运行环境 JRE </li>
<li>数据库 mysql </li>
</ul>
<h2 id="实施过程"><a href="#实施过程" class="headerlink" title="实施过程"></a>实施过程</h2><h3 id="安装Java-8-JRE"><a href="#安装Java-8-JRE" class="headerlink" title="安装Java 8 JRE"></a>安装Java 8 JRE</h3><p>1 选择Oracle的JDK主要是为了保证开发和生产一致性。当然视情况也可以选择OpenJRE。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget --no-cookies --no-check-certificate --header <span class="string">"Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie"</span> <span class="string">"http://download.oracle.com/otn-pub/java/jdk/8u162-b12/0da788060d494f5095bf8624735fa2f1/jre-8u162-linux-i586.rpm"</span></span><br><span class="line"></span><br><span class="line">sudo yum localinstall jre-8u162-linux-i586.rpm</span><br><span class="line"></span><br><span class="line">rm ~/jre-8u162-linux-i586.rpm</span><br></pre></td></tr></table></figure>
<p>2 接下来设置环境变量</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--针对当前用户</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_60/jre</span><br><span class="line">--针对所有用户</span><br><span class="line">sudo sh -c <span class="string">"echo export JAVA_HOME=/usr/java/jdk1.8.0_60/jre &gt;&gt; /etc/environment"</span></span><br><span class="line">--显示设置的环境变量</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></table></figure>
<p>3 卸载安装包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--列出所安装的jre</span><br><span class="line">yum list | grep jre</span><br><span class="line">--执行卸载</span><br><span class="line">yum remove jre1.8</span><br></pre></td></tr></table></figure>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-java-on-centos-and-fedora" target="_blank" rel="noopener">ref</a></p>
<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p>下载并添加仓库，然后更新</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">yum update</span><br></pre></td></tr></table></figure>
<p>安装mysql并启动服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install mysql-server</span><br><span class="line">sudo systemctl start mysqld</span><br></pre></td></tr></table></figure>
<p><a href="https://linode.com/docs/databases/mysql/how-to-install-mysql-on-centos-7/" target="_blank" rel="noopener">ref</a></p>
<h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><p>以下为实现自动化，可能需要安装的工具。</p>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>以管理员方式，使用yum安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install git-all</span><br></pre></td></tr></table></figure>
<p><a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git" target="_blank" rel="noopener">ref</a></p>
<h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><h5 id="方法一-安装多版本nodejs"><a href="#方法一-安装多版本nodejs" class="headerlink" title="方法一 安装多版本nodejs"></a>方法一 安装多版本nodejs</h5><p>1 获取脚本并执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/creationix/nvm/v0.13.1/install.sh | bash</span><br></pre></td></tr></table></figure></p>
<p>2 刷新资源<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></p>
<p>3 查看远程版本后选择安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nvm --查看帮助</span><br><span class="line">nvm ls-remote</span><br><span class="line">nvm install v8.9.4</span><br><span class="line">nvm use v8.9.4</span><br></pre></td></tr></table></figure></p>
<p>4 验证安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm version</span><br></pre></td></tr></table></figure>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-a-centos-7-server" target="_blank" rel="noopener">ref</a></p>
<h5 id="方法二-通过下载二进制安装nodejs"><a href="#方法二-通过下载二进制安装nodejs" class="headerlink" title="方法二 通过下载二进制安装nodejs"></a>方法二 通过下载二进制安装nodejs</h5><p>1 下载 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v8.9.4/node-v8.9.4-linux-x86.tar.xz</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">2 解压到指定目录 </span><br><span class="line"></span><br><span class="line">``` bash</span><br><span class="line"> sudo mkdir /usr/lib/nodejs</span><br><span class="line"> sudo tar -xJvf node-v8.9.4-linux-x64.tar.xz -C /usr/lib/nodejs </span><br><span class="line"> sudo mv /usr/lib/nodejs/node-v8.9.4-linux-x64 /usr/lib/nodejs/node-v8.9.4</span><br></pre></td></tr></table></figure>
<p>3 设置环境变量 <code>~/.profile</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nodejs</span></span><br><span class="line"><span class="built_in">export</span> NODEJS_HOME=/usr/lib/nodejs/node-v8.9.4</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NODEJS_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>4 刷新profile</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. ~/.profile</span><br></pre></td></tr></table></figure>
<p>5 验证安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm version</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/nodejs/help/wiki/Installation" target="_blank" rel="noopener">ref</a></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux,CentOS,java,jvm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[客户端异步wcf调用]]></title>
      <url>/2018/11/26/async-wcf-calls/</url>
      <content type="html"><![CDATA[<p>一个无需svcUtil产生异步代码的、客户端异步调用同步wcf服务端的实现方法<br><a id="more"></a></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>要想异步实现调用wcf，有两种方式。方式一：服务端增加异步契约，在客户端是使用专用的异步调用；方式二：是在客户端生成异步调用代码。</p>
<p>方式一增加了契约接口，前后端都增加了维护成本。方式二契约接口统一，代码维护量减少，但是微软的做法是svcUtil生成异步代码（同步代码可以使用ChannelFactory实现，也不需要生成代码）。这样一来，其缺点是一旦契约变动，就需要重新生生成，可维护性不是太友好。</p>
<p>所以若能不生成异步代码，实现异步功能，即解决了我们的问题。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>使用Windsor container and WCF Facility执行异步wcf调用已有同步契约接口即可，示例如下。</p>
<p>目录结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">|--Async.Wcf.Calls</span><br><span class="line">   |--Client</span><br><span class="line">      |--app.config</span><br><span class="line">      |--CategoryServiceClient.cs</span><br><span class="line">      |--Program.cs</span><br><span class="line">   |--Contracts</span><br><span class="line">      |--DataContracts</span><br><span class="line">         |--Category.cs</span><br><span class="line">      |--ServiceContracts</span><br><span class="line">         |--ICategoryService.cs</span><br><span class="line">   |--Services</span><br><span class="line">      |--CategoryServices</span><br><span class="line">         |--CategoryService.cs</span><br><span class="line">      |--ServiceHosts</span><br><span class="line">         |--CategoryServiceHost.svc</span><br><span class="line">      |--App.config</span><br></pre></td></tr></table></figure>
<p>契约项目客户端和服务端公用</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ServiceContract(Name = <span class="meta-string">"CategoryService"</span>, Namespace = <span class="meta-string">"http://northwind.com/categoryservice"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICategoryService</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">OperationContract</span>]</span><br><span class="line">    <span class="function"><span class="keyword">string</span> <span class="title">GetCategoryName</span>(<span class="params"><span class="keyword">int</span> categoryId</span>)</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">OperationContract</span>]</span><br><span class="line">    <span class="function">Category <span class="title">GetCategoryDetails</span>(<span class="params"><span class="keyword">int</span> categoryId</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DataContract</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Category</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DataMember</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> CategoryId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DataMember</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> CategoryName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DataMember</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> CategoryDescription &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DataMember</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> CategoryUrl &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意这是同步版本的服务端契约。</p>
<p>服务端实现如下。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ServiceBehavior(Name = <span class="meta-string">"CategoryService"</span>, Namespace = <span class="meta-string">"http://northwind.com/categoryservice"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CategoryService</span> : <span class="title">ICategoryService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetCategoryName</span>(<span class="params"><span class="keyword">int</span> categoryId</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Thread.Sleep(<span class="number">5000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Beverages"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">GetCategoryDetails</span>(<span class="params"><span class="keyword">int</span> categoryId</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> category = <span class="keyword">new</span> Category</span><br><span class="line">        &#123;</span><br><span class="line">            CategoryId = <span class="number">1</span>,</span><br><span class="line">            CategoryName = <span class="string">"Beverages"</span>,</span><br><span class="line">            CategoryDescription = <span class="string">"Soft drinks, coffees, teas, beers, and ales"</span>,</span><br><span class="line">            CategoryUrl = <span class="string">"http://northwind.com/Beverages"</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> category;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们使用svc实现自启动服务,服务端的app.config配置如下。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">system.web</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">compilation</span> <span class="attr">debug</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">system.web</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">system.serviceModel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">services</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">service</span> <span class="attr">name</span>=<span class="string">"Services.CategoryServices.CategoryService"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">host</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">baseAddresses</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">add</span> <span class="attr">baseAddress</span>=<span class="string">"http://localhost:7741/NorthwindServices/CategoryServices/CategoryService"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">baseAddresses</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endpoint</span> <span class="attr">address</span>=<span class="string">""</span> <span class="attr">binding</span>=<span class="string">"wsHttpBinding"</span> <span class="attr">contract</span>=<span class="string">"Contracts.ServiceContracts.ICategoryService"</span> <span class="attr">bindingNamespace</span>=<span class="string">"http://northwind.com/categoryservice"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">endpoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endpoint</span> <span class="attr">address</span>=<span class="string">"mex"</span> <span class="attr">binding</span>=<span class="string">"mexHttpBinding"</span> <span class="attr">contract</span>=<span class="string">"IMetadataExchange"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">services</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">behaviors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">serviceBehaviors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">behavior</span>&gt;</span>          </span><br><span class="line">          <span class="tag">&lt;<span class="name">serviceMetadata</span> <span class="attr">httpGetEnabled</span>=<span class="string">"True"</span>/&gt;</span>          </span><br><span class="line">          <span class="tag">&lt;<span class="name">serviceDebug</span> <span class="attr">includeExceptionDetailInFaults</span>=<span class="string">"False"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">behavior</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">serviceBehaviors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">behaviors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">system.serviceModel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">startup</span>&gt;</span><span class="tag">&lt;<span class="name">supportedRuntime</span> <span class="attr">version</span>=<span class="string">"v4.0"</span> <span class="attr">sku</span>=<span class="string">".NETFramework,Version=v4.0"</span>/&gt;</span><span class="tag">&lt;/<span class="name">startup</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>客户端实现更加简单，app.config无需配置，其他代码实现如下。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">CategoryServiceClient</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Windsor 异步版</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">GetCategoryNameAsync</span>(<span class="params"><span class="keyword">int</span> categoryId</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            WindsorContainer container = ConfigureContainer();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> service = container.Resolve&lt;ICategoryService&gt;(<span class="string">"categegory"</span>);</span><br><span class="line"></span><br><span class="line">            Task&lt;<span class="keyword">string</span>&gt; taskResult =</span><br><span class="line">                Task.Factory.FromAsync&lt;<span class="keyword">string</span>&gt;(service.BeginWcfCall(p =&gt; p.GetCategoryName(categoryId)),</span><br><span class="line">                    service.EndWcfCall&lt;<span class="keyword">string</span>&gt;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> taskResult;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Windsor  同步版</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetCategoryName</span>(<span class="params"><span class="keyword">int</span> categoryId</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            WindsorContainer container = ConfigureContainer();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> instance = container.Resolve&lt;ICategoryService&gt;(<span class="string">"categegory"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">string</span> categoryName = instance.GetCategoryName(categoryId);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> categoryName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ChannelFactory  同步版</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Category <span class="title">GetCategoryDetails</span>(<span class="params"><span class="keyword">int</span> categoryID</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> category = <span class="keyword">new</span> Category();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> myBinding = <span class="keyword">new</span> WSHttpBinding();</span><br><span class="line">            <span class="keyword">var</span> myEndpoint =</span><br><span class="line">                <span class="keyword">new</span> EndpointAddress(<span class="string">"http://localhost:7741/NorthwindServices/CategoryServices/CategoryService"</span>);</span><br><span class="line">            <span class="keyword">var</span> myChannelFactory = <span class="keyword">new</span> ChannelFactory&lt;ICategoryService&gt;(myBinding, myEndpoint);</span><br><span class="line"></span><br><span class="line">            ICategoryService instance = myChannelFactory.CreateChannel();</span><br><span class="line"></span><br><span class="line">            category = instance.GetCategoryDetails(categoryID);</span><br><span class="line"></span><br><span class="line">            myChannelFactory.Close();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> category;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> WindsorContainer <span class="title">ConfigureContainer</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> container = <span class="keyword">new</span> WindsorContainer();</span><br><span class="line">            container.AddFacility&lt;WcfFacility&gt;().Register(</span><br><span class="line">                Component.For&lt;ICategoryService&gt;()</span><br><span class="line">                    .Named(<span class="string">"categegory"</span>)</span><br><span class="line">                    .AsWcfClient(<span class="keyword">new</span> DefaultClientModel</span><br><span class="line">                    &#123;</span><br><span class="line">                        Endpoint =</span><br><span class="line">                            WcfEndpoint.BoundTo(<span class="keyword">new</span> WSHttpBinding())</span><br><span class="line">                                .At(<span class="string">"http://localhost:7741/NorthwindServices/CategoryServices/CategoryService"</span>)</span><br><span class="line">                    &#125;));</span><br><span class="line">            <span class="keyword">return</span> container;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> ```   </span><br><span class="line"></span><br><span class="line"> 启动程序</span><br><span class="line"></span><br><span class="line"> ```csharp</span><br><span class="line"> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> p = <span class="keyword">new</span> Program();</span><br><span class="line">            p.ExeSync();</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">ExeSync</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Task&lt;<span class="keyword">string</span>&gt; taskResult = CategoryServiceClient.GetCategoryNameAsync(<span class="number">10</span>);</span><br><span class="line">            DoIndependentWork();</span><br><span class="line">            <span class="keyword">string</span> result = <span class="keyword">await</span> taskResult;</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DoIndependentWork</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"loding..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p> 在配置好Windsor container和WCF Facility后，我们就实现了一个客户端代理。使用WCF Facility就可以奇迹般的异步调用啦。</p>
]]></content>
      
        <categories>
            
            <category> csharp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> asynchronous,wcf, castle, WcfFacility,异步. </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在win7中访问VirtualBox中的CentOS站点]]></title>
      <url>/2018/11/26/access-virtualbox-centos7-site-on-win7-setting/</url>
      <content type="html"><![CDATA[<p>在VirtualBox中建好CentOS站点应用后，首先要做的是看是否能够正常访问。以下描述了具体的实施过程。</p>
<a id="more"></a>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>可通过http正常访问CentOS的站点 </li>
</ul>
<h2 id="实施步骤"><a href="#实施步骤" class="headerlink" title="实施步骤"></a>实施步骤</h2><h4 id="1-确保可以访问外网"><a href="#1-确保可以访问外网" class="headerlink" title="1. 确保可以访问外网"></a>1. 确保可以访问外网</h4><p>按如下配置完成后，可自动实现虚机访问外网的功能</p>
<p>设置-&gt;网络-&gt;选网络地下转换(NAT)-&gt;..-&gt;确定</p>
<p>启动虚机后检验<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping lexiangmiao.com</span><br></pre></td></tr></table></figure></p>
<h3 id="2-主机访问虚机"><a href="#2-主机访问虚机" class="headerlink" title="2. 主机访问虚机"></a>2. 主机访问虚机</h3><p>按如下配置完成后，可自动实现虚机访问主机的功能<br>设置-&gt;网络-&gt;仅主机(Host-Only)网络-&gt;..-&gt;确定</p>
<p>启动虚机后检验<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.56.1</span><br><span class="line"><span class="comment"># 查看网卡和虚机地址</span></span><br><span class="line">ip address</span><br></pre></td></tr></table></figure></p>
<h3 id="3-永久开放端口"><a href="#3-永久开放端口" class="headerlink" title="3. 永久开放端口"></a>3. 永久开放端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-port=5121/tcp --permanent</span><br><span class="line"><span class="comment"># --zone 作用域</span></span><br><span class="line"><span class="comment"># --add-port=5121/tcp 添加端口，格式为：端口/通讯协议</span></span><br><span class="line"><span class="comment"># --permanent 永久生效，没有此参数重启后失效</span></span><br><span class="line"></span><br><span class="line">sudo firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查新的防火墙规则</span></span><br><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure>
<p>防火墙开关</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久关闭防火墙，开机自启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时打开防火墙</span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久打开防火墙，开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux,CentOS,VirtualBox,win7 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[开篇]]></title>
      <url>/2018/11/26/start/</url>
      <content type="html"><![CDATA[<p>摘要<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><p>More info: <a href="http://blog.zhangruipeng.me/hexo-theme-hueman/2014/12/25/Markdown/" target="_blank" rel="noopener">Markdown</a></p>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="internal-links"><a href="#internal-links" class="headerlink" title="internal links"></a>internal links</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_path start %&#125;</span><br><span class="line">// /2017/08/11/start/</span><br><span class="line">&#123;% post_link start %&#125;</span><br><span class="line">// &lt;a href=<span class="string">"/2017/08/11/start/"</span>&gt;开篇&lt;/a&gt;</span><br><span class="line">&#123;% post_link start 自定义标题 %&#125;</span><br><span class="line">// &lt;a href=<span class="string">"/2017/08/11/hello-world/"</span>&gt;自定义标题&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&#123;% asset_path example.jpg %&#125;</span><br><span class="line">// /2017/08/11/hello-world/example.jpg</span><br><span class="line">&#123;% asset_link example.jpg %&#125;</span><br><span class="line">// &lt;a href=<span class="string">"/2017/08/11/hello-world/example.jpg"</span>&gt;example.jpg&lt;/a&gt;</span><br><span class="line">&#123;% asset_link example.jpg Example %&#125;</span><br><span class="line">// &lt;a href=<span class="string">"/2017/08/11/hello-world/example.jpg"</span>&gt;Example&lt;/a&gt;</span><br><span class="line">&#123;% asset_img example.jpg %&#125;</span><br><span class="line">// &lt;img src=<span class="string">"/2017/08/11/hello-world/example.jpg"</span>&gt;</span><br></pre></td></tr></table></figure>
/2018/11/26/start/ <br><br><a href="/2018/11/26/start/" title="开篇">开篇</a> <br><br><a href="/2018/11/26/start/" title="自定义标题">自定义标题</a> <br><br><br> <br><br> <br><br> <br><br>
<h3 id="Gallery-example"><a href="#Gallery-example" class="headerlink" title="Gallery example"></a>Gallery example</h3><h4 id="You-can-also-add-photos-between-text-to-create-another-gallery-like-this"><a href="#You-can-also-add-photos-between-text-to-create-another-gallery-like-this" class="headerlink" title="You can also add photos between text to create another gallery like this:"></a>You can also add photos between text to create another gallery like this:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![hydric hammock](/gallery/hydric-hammock.jpg <span class="string">"hydric hammock"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/gallery/hydric-hammock.jpg" alt="hydric hammock" title="hydric hammock"></p>
<h4 id="To-add-a-photo-gallery-placeholder-to-your-post-just-add-the-following-lines-to-your-front-matter"><a href="#To-add-a-photo-gallery-placeholder-to-your-post-just-add-the-following-lines-to-your-front-matter" class="headerlink" title="To add a photo gallery placeholder to your post, just add the following lines to your front-matter:"></a>To add a photo gallery placeholder to your post, just add the following lines to your front-matter:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">photos:</span><br><span class="line">- https://www.hdwallpapers.net/previews/starry-night-over-corsica-986.jpg</span><br><span class="line">- https://www.hdwallpapers.net/previews/water-plant-close-up-979.jpg</span><br><span class="line">- /gallery/hydric-hammock.jpg</span><br></pre></td></tr></table></figure>
<h4 id="Finally-you-can-also-use-Justified-Gallery-to-display-you-photos-in-a-grid"><a href="#Finally-you-can-also-use-Justified-Gallery-to-display-you-photos-in-a-grid" class="headerlink" title="Finally, you can also use Justified Gallery to display you photos in a grid:"></a>Finally, you can also use Justified Gallery to display you photos in a grid:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"justified-gallery"</span>&gt;</span><br><span class="line">![hydric hammock](/gallery/hydric-hammock.jpg <span class="string">"aa hydric hammock"</span>)</span><br><span class="line">![hydric hammock](/gallery/hydric-hammock.jpg <span class="string">"bb hydric hammock"</span>)</span><br><span class="line">![hydric hammock](/gallery/hydric-hammock.jpg <span class="string">"aa hydric hammock"</span>)</span><br><span class="line">![hydric hammock](/gallery/hydric-hammock.jpg <span class="string">"bb hydric hammock"</span>)</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<div class="justified-gallery"><br><img src="/gallery/hydric-hammock.jpg" alt="hydric hammock" title="aa hydric hammock"><br><img src="/gallery/hydric-hammock.jpg" alt="hydric hammock" title="bb hydric hammock"><br><img src="/gallery/hydric-hammock.jpg" alt="hydric hammock" title="aa hydric hammock"><br><img src="/gallery/hydric-hammock.jpg" alt="hydric hammock" title="bb hydric hammock"><br></div>


]]></content>
      
        <categories>
            
            <category> others </category>
            
        </categories>
        
        
        <tags>
            
            <tag> test,hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
